#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PyShowAnimInstanceBase

#include "Basic.hpp"

#include "Python_enums_structs.hpp"
#include "Marvel_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// PythonClass PyShowAnimInstanceBase.PyShowAnimInstanceBase
// 0x0130 (0x0550 - 0x0420)
class UPyShowAnimInstanceBase : public UMarvelShowAnimInstance
{
public:
	class UAnimSequence*                          Stand_Idle;                                        // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Stand_Personality;                                 // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Toggle_Half;                                       // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Toggle_Stand;                                      // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Half_Idle;                                         // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Half_Personality;                                  // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Turn;                                              // 0x0450(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EShowTurnAnimType, class UAnimSequence*> TurnList;                                          // 0x0458(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UAnimSequence*                          HG_CardPose;                                       // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          HG_HoverIdle;                                      // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          HG_HoverToggleStand;                               // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Emote;                                             // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          EmoteIdle;                                         // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          MVP;                                               // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Like;                                              // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPersonality;                                     // 0x04E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsToggleHalf;                                      // 0x04E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRetoggleHalf;                                    // 0x04E2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsResetHalfAnim;                                   // 0x04E3(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsJumpStandIdle;                                   // 0x04E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsJumpHalfIdle;                                    // 0x04E5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTurn;                                            // 0x04E6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPositiveTrun;                                    // 0x04E7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHeroCommercia;                                   // 0x04E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEmote;                                           // 0x04E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsMVP;                                             // 0x04EA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLike;                                            // 0x04EB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsReplayLike;                                      // 0x04EC(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHeroGallery;                                     // 0x04ED(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPlayCardPose;                                    // 0x04EE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPlayHoverStand;                                  // 0x04EF(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TurnCameraGaze;                                    // 0x04F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseIdleAO1D;                                       // 0x04F1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4F2[0x6];                                      // 0x04F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CameraLocation;                                    // 0x04F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAimOffsetBlendSpace1D*                 Stand_Idle_AO_1D;                                  // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAimOffsetBlendSpace1D*                 Half_Idle_AO_1D;                                   // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OpenGazeBlendTime;                                 // 0x0520(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloseGazeBlendTime;                                // 0x0524(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SkipGazeInterp;                                    // 0x0528(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPlayVoiceAnim;                                   // 0x0529(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52A[0x6];                                      // 0x052A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          VoiceAnim;                                         // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HoverToggleStand__BlendTime;                       // 0x0538(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StandPersonality_BlendTime;                        // 0x053C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfPersonality_BlendTime;                         // 0x0540(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ToggleStand_BlendTime;                             // 0x0544(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ToggleHalf_BlendTime;                              // 0x0548(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void BlueprintBeginPlay();
	void BlueprintUnintializeAnimation();
	void BlueprintPreUpdateAnimation(float DeltaSeconds);
	void OnPlayShowAnim(bool IsPlay);
	void OnPlayToggleAnim(bool IsToggleHalf_0);
	void OnReplayToggleAnim();
	void OnJumpStandIdle();
	void OnJumpHalfIdle();
	void OnPlayTurnAnim();
	void OnPlayEmoteAnim(const class FString& ItemId);
	void OnPlayMVPAnim();
	void OnPlayLikeAnim();
	void OnPlayHeroGallerAnim();
	void OnPlayHeroGaller_CardPose(bool IsPlayCardPose_0);
	void OnPlayHeroGaller_HoverStand(bool IsPlayHoverStand_0);
	void ResetAllAnim();
	void ResetPersonality();
	void ResetHeroGallery();
	void AnimNotify_StandIdle_Begin();
	void AnimNotify_StandIdle_End();
	void AnimNotify_HalfIdle_Begin();
	void AnimNotify_HalfIdle_End();
	void AnimNotify_ToggleHalf_Begin();
	void AnimNotify_ToggleHalf_End();
	void AnimNotify_ToggleStand_Begin();
	void AnimNotify_ToggleStand_End();
	void AnimNotify_Personality_Begin();
	void AnimNotify_Personality_End();
	void AnimNotify_Turn_Begin();
	void AnimNotify_Turn_Play();
	void AnimNotify_Like_Play();
	void AnimNotify_LikeIdle_Play();
	void AnimNotify_Like_End();
	void AnimNotify_MVP_Play();
	void AnimNotify_MVP_End();
	void AnimNotify_Emote_Play();
	void AnimNotify_Emote_End();
	void AnimNotify_HeroGallery_IdleBegin();
	void AnimNotify_HeroGallery_IdleEnd();
	void AnimNotify_HeroGallery_CardPose();
	void AnimNotify_HeroGallery_HoverIdle();
	void AnimNotify_HeroGallery_HoverStand();
	void AnimNotify_HeroGallery_Half1IdleStandEnd();
	void OnShowActorCameraGaze(bool TurnCameraGaze_0, const struct FVector& CameraLocation_0, float OpenBlendTime, float CloseBlendTime);
	void AnimNotify_AnimVoice_Begin();
	void AnimNotify_AnimVoice_End();
	void OnPlayVoiceAnim(class UAnimSequence* VoiceAnim_0);
	void OnStopVoiceAnim();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyShowAnimInstanceBase">();
	}
	static class UPyShowAnimInstanceBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyShowAnimInstanceBase>();
	}
};
static_assert(alignof(UPyShowAnimInstanceBase) == 0x000010, "Wrong alignment on UPyShowAnimInstanceBase");
static_assert(sizeof(UPyShowAnimInstanceBase) == 0x000550, "Wrong size on UPyShowAnimInstanceBase");
static_assert(offsetof(UPyShowAnimInstanceBase, Stand_Idle) == 0x000420, "Member 'UPyShowAnimInstanceBase::Stand_Idle' has a wrong offset!");
static_assert(offsetof(UPyShowAnimInstanceBase, Stand_Personality) == 0x000428, "Member 'UPyShowAnimInstanceBase::Stand_Personality' has a wrong offset!");
static_assert(offsetof(UPyShowAnimInstanceBase, Toggle_Half) == 0x000430, "Member 'UPyShowAnimInstanceBase::Toggle_Half' has a wrong offset!");
static_assert(offsetof(UPyShowAnimInstanceBase, Toggle_Stand) == 0x000438, "Member 'UPyShowAnimInstanceBase::Toggle_Stand' has a wrong offset!");
static_assert(offsetof(UPyShowAnimInstanceBase, Half_Idle) == 0x000440, "Member 'UPyShowAnimInstanceBase::Half_Idle' has a wrong offset!");
static_assert(offsetof(UPyShowAnimInstanceBase, Half_Personality) == 0x000448, "Member 'UPyShowAnimInstanceBase::Half_Personality' has a wrong offset!");
static_assert(offsetof(UPyShowAnimInstanceBase, Turn) == 0x000450, "Member 'UPyShowAnimInstanceBase::Turn' has a wrong offset!");
static_assert(offsetof(UPyShowAnimInstanceBase, TurnList) == 0x000458, "Member 'UPyShowAnimInstanceBase::TurnList' has a wrong offset!");
static_assert(offsetof(UPyShowAnimInstanceBase, HG_CardPose) == 0x0004A8, "Member 'UPyShowAnimInstanceBase::HG_CardPose' has a wrong offset!");
static_assert(offsetof(UPyShowAnimInstanceBase, HG_HoverIdle) == 0x0004B0, "Member 'UPyShowAnimInstanceBase::HG_HoverIdle' has a wrong offset!");
static_assert(offsetof(UPyShowAnimInstanceBase, HG_HoverToggleStand) == 0x0004B8, "Member 'UPyShowAnimInstanceBase::HG_HoverToggleStand' has a wrong offset!");
static_assert(offsetof(UPyShowAnimInstanceBase, Emote) == 0x0004C0, "Member 'UPyShowAnimInstanceBase::Emote' has a wrong offset!");
static_assert(offsetof(UPyShowAnimInstanceBase, EmoteIdle) == 0x0004C8, "Member 'UPyShowAnimInstanceBase::EmoteIdle' has a wrong offset!");
static_assert(offsetof(UPyShowAnimInstanceBase, MVP) == 0x0004D0, "Member 'UPyShowAnimInstanceBase::MVP' has a wrong offset!");
static_assert(offsetof(UPyShowAnimInstanceBase, Like) == 0x0004D8, "Member 'UPyShowAnimInstanceBase::Like' has a wrong offset!");
static_assert(offsetof(UPyShowAnimInstanceBase, IsPersonality) == 0x0004E0, "Member 'UPyShowAnimInstanceBase::IsPersonality' has a wrong offset!");
static_assert(offsetof(UPyShowAnimInstanceBase, IsToggleHalf) == 0x0004E1, "Member 'UPyShowAnimInstanceBase::IsToggleHalf' has a wrong offset!");
static_assert(offsetof(UPyShowAnimInstanceBase, IsRetoggleHalf) == 0x0004E2, "Member 'UPyShowAnimInstanceBase::IsRetoggleHalf' has a wrong offset!");
static_assert(offsetof(UPyShowAnimInstanceBase, IsResetHalfAnim) == 0x0004E3, "Member 'UPyShowAnimInstanceBase::IsResetHalfAnim' has a wrong offset!");
static_assert(offsetof(UPyShowAnimInstanceBase, IsJumpStandIdle) == 0x0004E4, "Member 'UPyShowAnimInstanceBase::IsJumpStandIdle' has a wrong offset!");
static_assert(offsetof(UPyShowAnimInstanceBase, IsJumpHalfIdle) == 0x0004E5, "Member 'UPyShowAnimInstanceBase::IsJumpHalfIdle' has a wrong offset!");
static_assert(offsetof(UPyShowAnimInstanceBase, IsTurn) == 0x0004E6, "Member 'UPyShowAnimInstanceBase::IsTurn' has a wrong offset!");
static_assert(offsetof(UPyShowAnimInstanceBase, IsPositiveTrun) == 0x0004E7, "Member 'UPyShowAnimInstanceBase::IsPositiveTrun' has a wrong offset!");
static_assert(offsetof(UPyShowAnimInstanceBase, IsHeroCommercia) == 0x0004E8, "Member 'UPyShowAnimInstanceBase::IsHeroCommercia' has a wrong offset!");
static_assert(offsetof(UPyShowAnimInstanceBase, IsEmote) == 0x0004E9, "Member 'UPyShowAnimInstanceBase::IsEmote' has a wrong offset!");
static_assert(offsetof(UPyShowAnimInstanceBase, IsMVP) == 0x0004EA, "Member 'UPyShowAnimInstanceBase::IsMVP' has a wrong offset!");
static_assert(offsetof(UPyShowAnimInstanceBase, IsLike) == 0x0004EB, "Member 'UPyShowAnimInstanceBase::IsLike' has a wrong offset!");
static_assert(offsetof(UPyShowAnimInstanceBase, IsReplayLike) == 0x0004EC, "Member 'UPyShowAnimInstanceBase::IsReplayLike' has a wrong offset!");
static_assert(offsetof(UPyShowAnimInstanceBase, IsHeroGallery) == 0x0004ED, "Member 'UPyShowAnimInstanceBase::IsHeroGallery' has a wrong offset!");
static_assert(offsetof(UPyShowAnimInstanceBase, IsPlayCardPose) == 0x0004EE, "Member 'UPyShowAnimInstanceBase::IsPlayCardPose' has a wrong offset!");
static_assert(offsetof(UPyShowAnimInstanceBase, IsPlayHoverStand) == 0x0004EF, "Member 'UPyShowAnimInstanceBase::IsPlayHoverStand' has a wrong offset!");
static_assert(offsetof(UPyShowAnimInstanceBase, TurnCameraGaze) == 0x0004F0, "Member 'UPyShowAnimInstanceBase::TurnCameraGaze' has a wrong offset!");
static_assert(offsetof(UPyShowAnimInstanceBase, UseIdleAO1D) == 0x0004F1, "Member 'UPyShowAnimInstanceBase::UseIdleAO1D' has a wrong offset!");
static_assert(offsetof(UPyShowAnimInstanceBase, CameraLocation) == 0x0004F8, "Member 'UPyShowAnimInstanceBase::CameraLocation' has a wrong offset!");
static_assert(offsetof(UPyShowAnimInstanceBase, Stand_Idle_AO_1D) == 0x000510, "Member 'UPyShowAnimInstanceBase::Stand_Idle_AO_1D' has a wrong offset!");
static_assert(offsetof(UPyShowAnimInstanceBase, Half_Idle_AO_1D) == 0x000518, "Member 'UPyShowAnimInstanceBase::Half_Idle_AO_1D' has a wrong offset!");
static_assert(offsetof(UPyShowAnimInstanceBase, OpenGazeBlendTime) == 0x000520, "Member 'UPyShowAnimInstanceBase::OpenGazeBlendTime' has a wrong offset!");
static_assert(offsetof(UPyShowAnimInstanceBase, CloseGazeBlendTime) == 0x000524, "Member 'UPyShowAnimInstanceBase::CloseGazeBlendTime' has a wrong offset!");
static_assert(offsetof(UPyShowAnimInstanceBase, SkipGazeInterp) == 0x000528, "Member 'UPyShowAnimInstanceBase::SkipGazeInterp' has a wrong offset!");
static_assert(offsetof(UPyShowAnimInstanceBase, IsPlayVoiceAnim) == 0x000529, "Member 'UPyShowAnimInstanceBase::IsPlayVoiceAnim' has a wrong offset!");
static_assert(offsetof(UPyShowAnimInstanceBase, VoiceAnim) == 0x000530, "Member 'UPyShowAnimInstanceBase::VoiceAnim' has a wrong offset!");
static_assert(offsetof(UPyShowAnimInstanceBase, HoverToggleStand__BlendTime) == 0x000538, "Member 'UPyShowAnimInstanceBase::HoverToggleStand__BlendTime' has a wrong offset!");
static_assert(offsetof(UPyShowAnimInstanceBase, StandPersonality_BlendTime) == 0x00053C, "Member 'UPyShowAnimInstanceBase::StandPersonality_BlendTime' has a wrong offset!");
static_assert(offsetof(UPyShowAnimInstanceBase, HalfPersonality_BlendTime) == 0x000540, "Member 'UPyShowAnimInstanceBase::HalfPersonality_BlendTime' has a wrong offset!");
static_assert(offsetof(UPyShowAnimInstanceBase, ToggleStand_BlendTime) == 0x000544, "Member 'UPyShowAnimInstanceBase::ToggleStand_BlendTime' has a wrong offset!");
static_assert(offsetof(UPyShowAnimInstanceBase, ToggleHalf_BlendTime) == 0x000548, "Member 'UPyShowAnimInstanceBase::ToggleHalf_BlendTime' has a wrong offset!");

}

