#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PyAbility_201

#include "Basic.hpp"

#include "Marvel_structs.hpp"
#include "Marvel_classes.hpp"
#include "PyAbility_201_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK
{

// PythonClass PyAbility_201.PyAbility_201
// 0x0020 (0x25C8 - 0x25A8)
class UPyAbility_201 : public UAbility_201
{
public:
	FMulticastInlineDelegateProperty_             OnStateChange;                                     // 0x25A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnClickShortcutDelegate;                           // 0x25B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void OnStateChange__DelegateSignature(ESignalInputState State);
	void OnClickShortcutDelegate__DelegateSignature(int32 InComm);
	void BeginPlay();
	void EndPlay();
	void K2_ActivateAbility();
	void K2_OnEndAbility(bool bWasCancelled);
	void OnClickShortcut(const int32 InCommID);
	void OnReplayStateChanged(EMarvelReplayState ReplayState);
	void SetSignalInfo(const struct FGameplayTag& InSignalTag, const struct FHitResult& InHitResult, class AActor* InActor, bool IsHandleCoolingdown, const struct FGameplayTag& InAbilityTag, const class FString& Handle_type_tag);
	void OnStatusUpdate();
	void OnClickGamepadFaceRight(const struct FKey& Key);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyAbility_201">();
	}
	static class UPyAbility_201* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyAbility_201>();
	}
};
static_assert(alignof(UPyAbility_201) == 0x000008, "Wrong alignment on UPyAbility_201");
static_assert(sizeof(UPyAbility_201) == 0x0025C8, "Wrong size on UPyAbility_201");
static_assert(offsetof(UPyAbility_201, OnStateChange) == 0x0025A8, "Member 'UPyAbility_201::OnStateChange' has a wrong offset!");
static_assert(offsetof(UPyAbility_201, OnClickShortcutDelegate) == 0x0025B8, "Member 'UPyAbility_201::OnClickShortcutDelegate' has a wrong offset!");

// PythonClass PyAbility_201.PyUIController_201
// 0x0108 (0x0D60 - 0x0C58)
class UPyUIController_201 final : public UUIC_Ability
{
public:
	int32                                         MinResponseDistanceSquare;                         // 0x0C58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C5C[0x4];                                      // 0x0C5C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimaryDataAsset*                      SignalDataAsset;                                   // 0x0C60(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   GamepadRightThumbstick;                            // 0x0C68(0x0020)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ChaosSignalTag;                                    // 0x0C88(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SceneSignalTag;                                    // 0x0C94(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  PayloadTags;                                       // 0x0CA0(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTag                           WinterFestivalCommonTag;                           // 0x0D08(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           WinterFestivalAttachTag;                           // 0x0D14(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           WinterFestivalDefendTag;                           // 0x0D20(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           HurtTeammateTag;                                   // 0x0D2C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EnemyCharacterTag;                                 // 0x0D38(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EnemySummonedTag;                                  // 0x0D44(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           TeammateSummonedTag;                               // 0x0D50(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SetAbility(int32 InAbilityId, class UGameplayAbility* InAbility);
	void Destruct();
	void OnTagUpdate(const struct FGameplayTag& Tag, bool Exist);
	void HandleAbilityBlock(bool IsBlocked);
	void ListenAbilityActivateFailed(bool IsListen);
	void OnAbilityFailed(class UMarvelGameplayAbility* Ability_0, const struct FGameplayTagContainer& Reason);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyUIController_201">();
	}
	static class UPyUIController_201* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyUIController_201>();
	}
};
static_assert(alignof(UPyUIController_201) == 0x000008, "Wrong alignment on UPyUIController_201");
static_assert(sizeof(UPyUIController_201) == 0x000D60, "Wrong size on UPyUIController_201");
static_assert(offsetof(UPyUIController_201, MinResponseDistanceSquare) == 0x000C58, "Member 'UPyUIController_201::MinResponseDistanceSquare' has a wrong offset!");
static_assert(offsetof(UPyUIController_201, SignalDataAsset) == 0x000C60, "Member 'UPyUIController_201::SignalDataAsset' has a wrong offset!");
static_assert(offsetof(UPyUIController_201, GamepadRightThumbstick) == 0x000C68, "Member 'UPyUIController_201::GamepadRightThumbstick' has a wrong offset!");
static_assert(offsetof(UPyUIController_201, ChaosSignalTag) == 0x000C88, "Member 'UPyUIController_201::ChaosSignalTag' has a wrong offset!");
static_assert(offsetof(UPyUIController_201, SceneSignalTag) == 0x000C94, "Member 'UPyUIController_201::SceneSignalTag' has a wrong offset!");
static_assert(offsetof(UPyUIController_201, PayloadTags) == 0x000CA0, "Member 'UPyUIController_201::PayloadTags' has a wrong offset!");
static_assert(offsetof(UPyUIController_201, WinterFestivalCommonTag) == 0x000D08, "Member 'UPyUIController_201::WinterFestivalCommonTag' has a wrong offset!");
static_assert(offsetof(UPyUIController_201, WinterFestivalAttachTag) == 0x000D14, "Member 'UPyUIController_201::WinterFestivalAttachTag' has a wrong offset!");
static_assert(offsetof(UPyUIController_201, WinterFestivalDefendTag) == 0x000D20, "Member 'UPyUIController_201::WinterFestivalDefendTag' has a wrong offset!");
static_assert(offsetof(UPyUIController_201, HurtTeammateTag) == 0x000D2C, "Member 'UPyUIController_201::HurtTeammateTag' has a wrong offset!");
static_assert(offsetof(UPyUIController_201, EnemyCharacterTag) == 0x000D38, "Member 'UPyUIController_201::EnemyCharacterTag' has a wrong offset!");
static_assert(offsetof(UPyUIController_201, EnemySummonedTag) == 0x000D44, "Member 'UPyUIController_201::EnemySummonedTag' has a wrong offset!");
static_assert(offsetof(UPyUIController_201, TeammateSummonedTag) == 0x000D50, "Member 'UPyUIController_201::TeammateSummonedTag' has a wrong offset!");

}

