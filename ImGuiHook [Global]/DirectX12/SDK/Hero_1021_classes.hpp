#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Hero_1021

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Marvel_structs.hpp"
#include "Marvel_classes.hpp"
#include "Hero_1021_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class Hero_1021.Config_102111
// 0x0F58 (0x0FF0 - 0x0098)
class UConfig_102111 final : public UMarvelAbilityConfig
{
public:
	float                                         AimLostDuration;                                   // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StageOneEnergy;                                    // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StageTwoEnergy;                                    // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnergyToDamagePer;                                 // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelAbilityTraceContext             AimTraceContext;                                   // 0x00B0(0x0F30)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bOpenLog;                                          // 0x0FE0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FE1[0xF];                                      // 0x0FE1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_102111">();
	}
	static class UConfig_102111* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_102111>();
	}
};
static_assert(alignof(UConfig_102111) == 0x000010, "Wrong alignment on UConfig_102111");
static_assert(sizeof(UConfig_102111) == 0x000FF0, "Wrong size on UConfig_102111");
static_assert(offsetof(UConfig_102111, AimLostDuration) == 0x000098, "Member 'UConfig_102111::AimLostDuration' has a wrong offset!");
static_assert(offsetof(UConfig_102111, StageOneEnergy) == 0x00009C, "Member 'UConfig_102111::StageOneEnergy' has a wrong offset!");
static_assert(offsetof(UConfig_102111, StageTwoEnergy) == 0x0000A0, "Member 'UConfig_102111::StageTwoEnergy' has a wrong offset!");
static_assert(offsetof(UConfig_102111, EnergyToDamagePer) == 0x0000A4, "Member 'UConfig_102111::EnergyToDamagePer' has a wrong offset!");
static_assert(offsetof(UConfig_102111, AimTraceContext) == 0x0000B0, "Member 'UConfig_102111::AimTraceContext' has a wrong offset!");
static_assert(offsetof(UConfig_102111, bOpenLog) == 0x000FE0, "Member 'UConfig_102111::bOpenLog' has a wrong offset!");

// Class Hero_1021.Ability_102111
// 0x00B8 (0x2608 - 0x2550)
class UAbility_102111 : public UMarvelGameplayAbility
{
public:
	class AHawkeyeCharacter*                      OwnerChar;                                         // 0x2550(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UConfig_102111*                         OwnConfig;                                         // 0x2558(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  WaitTags;                                          // 0x2560(0x0068)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         AimTargets;                                        // 0x25C8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Cache;                                             // 0x25D8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25DC[0x4];                                     // 0x25DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 Stages;                                            // 0x25E0(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bStageOne;                                         // 0x25F0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStageTwo;                                         // 0x25F1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsIn102181;                                       // 0x25F2(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsIn102131;                                       // 0x25F3(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBowState;                                         // 0x25F4(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNowAiming;                                        // 0x25F5(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25F6[0x2];                                     // 0x25F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         QAbilityID;                                        // 0x25F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DrawAbilityID;                                     // 0x25FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilityTask_WaitAttributeChangeThreshold* WaitEnergyReduceTask;                              // 0x2600(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	int32 CheckEnergyStage();
	void InitStages();
	void OnActivateAbility(int32 AbilityID);
	void OnAimTargetChanged(bool bAimingTarget);
	void OnBowStageChanged(bool bIsInBowState);
	void OnEndAbility(int32 AbilityID);
	void OnEnergyAttrChangeThroughStageOne(bool bLessStageOne, float CurrentValue);
	void OnUpdateEnergyStatus();
	void UpdateAbilityActiveState();
	int32 UpdateEnergyDamage();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_102111">();
	}
	static class UAbility_102111* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_102111>();
	}
};
static_assert(alignof(UAbility_102111) == 0x000008, "Wrong alignment on UAbility_102111");
static_assert(sizeof(UAbility_102111) == 0x002608, "Wrong size on UAbility_102111");
static_assert(offsetof(UAbility_102111, OwnerChar) == 0x002550, "Member 'UAbility_102111::OwnerChar' has a wrong offset!");
static_assert(offsetof(UAbility_102111, OwnConfig) == 0x002558, "Member 'UAbility_102111::OwnConfig' has a wrong offset!");
static_assert(offsetof(UAbility_102111, WaitTags) == 0x002560, "Member 'UAbility_102111::WaitTags' has a wrong offset!");
static_assert(offsetof(UAbility_102111, AimTargets) == 0x0025C8, "Member 'UAbility_102111::AimTargets' has a wrong offset!");
static_assert(offsetof(UAbility_102111, Cache) == 0x0025D8, "Member 'UAbility_102111::Cache' has a wrong offset!");
static_assert(offsetof(UAbility_102111, Stages) == 0x0025E0, "Member 'UAbility_102111::Stages' has a wrong offset!");
static_assert(offsetof(UAbility_102111, bStageOne) == 0x0025F0, "Member 'UAbility_102111::bStageOne' has a wrong offset!");
static_assert(offsetof(UAbility_102111, bStageTwo) == 0x0025F1, "Member 'UAbility_102111::bStageTwo' has a wrong offset!");
static_assert(offsetof(UAbility_102111, bIsIn102181) == 0x0025F2, "Member 'UAbility_102111::bIsIn102181' has a wrong offset!");
static_assert(offsetof(UAbility_102111, bIsIn102131) == 0x0025F3, "Member 'UAbility_102111::bIsIn102131' has a wrong offset!");
static_assert(offsetof(UAbility_102111, bBowState) == 0x0025F4, "Member 'UAbility_102111::bBowState' has a wrong offset!");
static_assert(offsetof(UAbility_102111, bNowAiming) == 0x0025F5, "Member 'UAbility_102111::bNowAiming' has a wrong offset!");
static_assert(offsetof(UAbility_102111, QAbilityID) == 0x0025F8, "Member 'UAbility_102111::QAbilityID' has a wrong offset!");
static_assert(offsetof(UAbility_102111, DrawAbilityID) == 0x0025FC, "Member 'UAbility_102111::DrawAbilityID' has a wrong offset!");
static_assert(offsetof(UAbility_102111, WaitEnergyReduceTask) == 0x002600, "Member 'UAbility_102111::WaitEnergyReduceTask' has a wrong offset!");

// Class Hero_1021.UIController_102111
// 0x0060 (0x0CB8 - 0x0C58)
class UUIController_102111 final : public UUIC_Ability
{
public:
	struct FTimerHandle                           LoopTimerHandle;                                   // 0x0C58(0x0018)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UConfig_102111*                         Config102111;                                      // 0x0C70(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbility_102111*                        Ability102111;                                     // 0x0C78(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHawkeyeCharacter*                      AbilityOwner;                                      // 0x0C80(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelAbilityItem*                     AbilityAsset;                                      // 0x0C88(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PrePercent;                                        // 0x0C90(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C94[0x4];                                      // 0x0C94(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               WidgetMatProgressMID;                              // 0x0C98(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             TextProg;                                          // 0x0CA0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 ImgProgFill;                                       // 0x0CA8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeInterval;                                      // 0x0CB0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFull;                                           // 0x0CB4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CB5[0x3];                                      // 0x0CB5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearLoopTimer();
	void LoopSetPercent();
	void OnFullPercent(bool InIsFull);
	void SetLoopTimer();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIController_102111">();
	}
	static class UUIController_102111* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIController_102111>();
	}
};
static_assert(alignof(UUIController_102111) == 0x000008, "Wrong alignment on UUIController_102111");
static_assert(sizeof(UUIController_102111) == 0x000CB8, "Wrong size on UUIController_102111");
static_assert(offsetof(UUIController_102111, LoopTimerHandle) == 0x000C58, "Member 'UUIController_102111::LoopTimerHandle' has a wrong offset!");
static_assert(offsetof(UUIController_102111, Config102111) == 0x000C70, "Member 'UUIController_102111::Config102111' has a wrong offset!");
static_assert(offsetof(UUIController_102111, Ability102111) == 0x000C78, "Member 'UUIController_102111::Ability102111' has a wrong offset!");
static_assert(offsetof(UUIController_102111, AbilityOwner) == 0x000C80, "Member 'UUIController_102111::AbilityOwner' has a wrong offset!");
static_assert(offsetof(UUIController_102111, AbilityAsset) == 0x000C88, "Member 'UUIController_102111::AbilityAsset' has a wrong offset!");
static_assert(offsetof(UUIController_102111, PrePercent) == 0x000C90, "Member 'UUIController_102111::PrePercent' has a wrong offset!");
static_assert(offsetof(UUIController_102111, WidgetMatProgressMID) == 0x000C98, "Member 'UUIController_102111::WidgetMatProgressMID' has a wrong offset!");
static_assert(offsetof(UUIController_102111, TextProg) == 0x000CA0, "Member 'UUIController_102111::TextProg' has a wrong offset!");
static_assert(offsetof(UUIController_102111, ImgProgFill) == 0x000CA8, "Member 'UUIController_102111::ImgProgFill' has a wrong offset!");
static_assert(offsetof(UUIController_102111, TimeInterval) == 0x000CB0, "Member 'UUIController_102111::TimeInterval' has a wrong offset!");
static_assert(offsetof(UUIController_102111, bIsFull) == 0x000CB4, "Member 'UUIController_102111::bIsFull' has a wrong offset!");

// Class Hero_1021.Cue_Ability_Loop_10211102
// 0x0198 (0x0E10 - 0x0C78)
class ACue_Ability_Loop_10211102 final : public AMarvelCueNotify_Actor
{
public:
	struct FTimerHandle                           LoopTimerHandle;                                   // 0x0C78(0x0018)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHawkeyeCharacter*                      CacheHawkeye;                                      // 0x0C90(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbility_102111*                        Ability;                                           // 0x0C98(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxEnergy;                                         // 0x0CA0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreviousStage;                                     // 0x0CA4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasPlayStageOne;                                  // 0x0CA8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBowAudioPlaying;                                // 0x0CA9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CAA[0x6];                                      // 0x0CAA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFXSystemComponent*>             BlastArrowFxCom;                                   // 0x0CB0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UFXSystemComponent*>             BlastArrowFxCom2;                                  // 0x0CC0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UFXSystemComponent*                     StageStartFxCom;                                   // 0x0CD0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFXSystemComponent*                     StageFxCom;                                        // 0x0CD8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFXSystemComponent*                     NormalArrowFxCom;                                  // 0x0CE0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StageStartFxAttachBone;                            // 0x0CE8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StageStartFxAttachBoneTriple;                      // 0x0CF4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         StageStartFx;                                      // 0x0D00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         StageStartFxSuper;                                 // 0x0D08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, float>                            EnergyToFxStage;                                   // 0x0D10(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FName                                   StageFxAttachBoneSingle;                           // 0x0D60(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StageFxAttachBoneTriple;                           // 0x0D6C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         StageFx;                                           // 0x0D78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         StageFxBlastArrow;                                 // 0x0D80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         StageFxNormalArrow;                                // 0x0D88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           BlastArrowPoint;                                   // 0x0D90(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   NormalArrowPoint;                                  // 0x0DA0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DAC[0x4];                                      // 0x0DAC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           Curve;                                             // 0x0DB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BowIntensityParam;                                 // 0x0DB8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BowArrowFresnelParam;                              // 0x0DC4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BowMaterialSlot;                                   // 0x0DD0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD4[0x4];                                      // 0x0DD4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ArrowMaterialSlot;                                 // 0x0DD8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   ArrowSwitchParam;                                  // 0x0DE8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ArrowIntensityParam;                               // 0x0DF4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageFxLoopAudioID;                                // 0x0E00(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageFxEndAudioID;                                 // 0x0E04(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OneStageAudioID;                                   // 0x0E08(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TwoStageAudioID;                                   // 0x0E0C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnEnergyStageChanged(int32 InStage);
	void OnEnergyStageIsUp(int32 InStageIndex, bool bIsUp);
	void UpdateBowArrowMaterial();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Ability_Loop_10211102">();
	}
	static class ACue_Ability_Loop_10211102* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Ability_Loop_10211102>();
	}
};
static_assert(alignof(ACue_Ability_Loop_10211102) == 0x000008, "Wrong alignment on ACue_Ability_Loop_10211102");
static_assert(sizeof(ACue_Ability_Loop_10211102) == 0x000E10, "Wrong size on ACue_Ability_Loop_10211102");
static_assert(offsetof(ACue_Ability_Loop_10211102, LoopTimerHandle) == 0x000C78, "Member 'ACue_Ability_Loop_10211102::LoopTimerHandle' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10211102, CacheHawkeye) == 0x000C90, "Member 'ACue_Ability_Loop_10211102::CacheHawkeye' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10211102, Ability) == 0x000C98, "Member 'ACue_Ability_Loop_10211102::Ability' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10211102, MaxEnergy) == 0x000CA0, "Member 'ACue_Ability_Loop_10211102::MaxEnergy' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10211102, PreviousStage) == 0x000CA4, "Member 'ACue_Ability_Loop_10211102::PreviousStage' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10211102, bHasPlayStageOne) == 0x000CA8, "Member 'ACue_Ability_Loop_10211102::bHasPlayStageOne' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10211102, bIsBowAudioPlaying) == 0x000CA9, "Member 'ACue_Ability_Loop_10211102::bIsBowAudioPlaying' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10211102, BlastArrowFxCom) == 0x000CB0, "Member 'ACue_Ability_Loop_10211102::BlastArrowFxCom' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10211102, BlastArrowFxCom2) == 0x000CC0, "Member 'ACue_Ability_Loop_10211102::BlastArrowFxCom2' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10211102, StageStartFxCom) == 0x000CD0, "Member 'ACue_Ability_Loop_10211102::StageStartFxCom' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10211102, StageFxCom) == 0x000CD8, "Member 'ACue_Ability_Loop_10211102::StageFxCom' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10211102, NormalArrowFxCom) == 0x000CE0, "Member 'ACue_Ability_Loop_10211102::NormalArrowFxCom' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10211102, StageStartFxAttachBone) == 0x000CE8, "Member 'ACue_Ability_Loop_10211102::StageStartFxAttachBone' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10211102, StageStartFxAttachBoneTriple) == 0x000CF4, "Member 'ACue_Ability_Loop_10211102::StageStartFxAttachBoneTriple' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10211102, StageStartFx) == 0x000D00, "Member 'ACue_Ability_Loop_10211102::StageStartFx' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10211102, StageStartFxSuper) == 0x000D08, "Member 'ACue_Ability_Loop_10211102::StageStartFxSuper' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10211102, EnergyToFxStage) == 0x000D10, "Member 'ACue_Ability_Loop_10211102::EnergyToFxStage' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10211102, StageFxAttachBoneSingle) == 0x000D60, "Member 'ACue_Ability_Loop_10211102::StageFxAttachBoneSingle' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10211102, StageFxAttachBoneTriple) == 0x000D6C, "Member 'ACue_Ability_Loop_10211102::StageFxAttachBoneTriple' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10211102, StageFx) == 0x000D78, "Member 'ACue_Ability_Loop_10211102::StageFx' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10211102, StageFxBlastArrow) == 0x000D80, "Member 'ACue_Ability_Loop_10211102::StageFxBlastArrow' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10211102, StageFxNormalArrow) == 0x000D88, "Member 'ACue_Ability_Loop_10211102::StageFxNormalArrow' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10211102, BlastArrowPoint) == 0x000D90, "Member 'ACue_Ability_Loop_10211102::BlastArrowPoint' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10211102, NormalArrowPoint) == 0x000DA0, "Member 'ACue_Ability_Loop_10211102::NormalArrowPoint' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10211102, Curve) == 0x000DB0, "Member 'ACue_Ability_Loop_10211102::Curve' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10211102, BowIntensityParam) == 0x000DB8, "Member 'ACue_Ability_Loop_10211102::BowIntensityParam' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10211102, BowArrowFresnelParam) == 0x000DC4, "Member 'ACue_Ability_Loop_10211102::BowArrowFresnelParam' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10211102, BowMaterialSlot) == 0x000DD0, "Member 'ACue_Ability_Loop_10211102::BowMaterialSlot' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10211102, ArrowMaterialSlot) == 0x000DD8, "Member 'ACue_Ability_Loop_10211102::ArrowMaterialSlot' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10211102, ArrowSwitchParam) == 0x000DE8, "Member 'ACue_Ability_Loop_10211102::ArrowSwitchParam' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10211102, ArrowIntensityParam) == 0x000DF4, "Member 'ACue_Ability_Loop_10211102::ArrowIntensityParam' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10211102, StageFxLoopAudioID) == 0x000E00, "Member 'ACue_Ability_Loop_10211102::StageFxLoopAudioID' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10211102, StageFxEndAudioID) == 0x000E04, "Member 'ACue_Ability_Loop_10211102::StageFxEndAudioID' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10211102, OneStageAudioID) == 0x000E08, "Member 'ACue_Ability_Loop_10211102::OneStageAudioID' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10211102, TwoStageAudioID) == 0x000E0C, "Member 'ACue_Ability_Loop_10211102::TwoStageAudioID' has a wrong offset!");

// Class Hero_1021.TraceComponent_10216101_Base
// 0x0000 (0x16B0 - 0x16B0)
class UTraceComponent_10216101_Base final : public UMarvelAgentTraceComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TraceComponent_10216101_Base">();
	}
	static class UTraceComponent_10216101_Base* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTraceComponent_10216101_Base>();
	}
};
static_assert(alignof(UTraceComponent_10216101_Base) == 0x000010, "Wrong alignment on UTraceComponent_10216101_Base");
static_assert(sizeof(UTraceComponent_10216101_Base) == 0x0016B0, "Wrong size on UTraceComponent_10216101_Base");

// Class Hero_1021.TraceComponent_10216102_Base
// 0x0000 (0x16B0 - 0x16B0)
class UTraceComponent_10216102_Base final : public UMarvelAgentTraceComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TraceComponent_10216102_Base">();
	}
	static class UTraceComponent_10216102_Base* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTraceComponent_10216102_Base>();
	}
};
static_assert(alignof(UTraceComponent_10216102_Base) == 0x000010, "Wrong alignment on UTraceComponent_10216102_Base");
static_assert(sizeof(UTraceComponent_10216102_Base) == 0x0016B0, "Wrong size on UTraceComponent_10216102_Base");

// Class Hero_1021.DragAbility_102161
// 0x0018 (0x1CB8 - 0x1CA0)
class UDragAbility_102161 final : public UMarvelDragAbility
{
public:
	int32                                         BuffID;                                            // 0x1CA0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CueTag;                                            // 0x1CA4(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CB0[0x8];                                     // 0x1CB0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyBuffToTarget(EDashStopReason Reason);
	void OnCharacterHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DragAbility_102161">();
	}
	static class UDragAbility_102161* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDragAbility_102161>();
	}
};
static_assert(alignof(UDragAbility_102161) == 0x000008, "Wrong alignment on UDragAbility_102161");
static_assert(sizeof(UDragAbility_102161) == 0x001CB8, "Wrong size on UDragAbility_102161");
static_assert(offsetof(UDragAbility_102161, BuffID) == 0x001CA0, "Member 'UDragAbility_102161::BuffID' has a wrong offset!");
static_assert(offsetof(UDragAbility_102161, CueTag) == 0x001CA4, "Member 'UDragAbility_102161::CueTag' has a wrong offset!");

// Class Hero_1021.Projectile_10216102
// 0x0010 (0x2F70 - 0x2F60)
class AProjectile_10216102 final : public AMarvelAbilityTargetActor_Projectile
{
public:
	float                                         WallDamage;                                        // 0x2F60(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F64[0xC];                                     // 0x2F64(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Projectile_10216102">();
	}
	static class AProjectile_10216102* GetDefaultObj()
	{
		return GetDefaultObjImpl<AProjectile_10216102>();
	}
};
static_assert(alignof(AProjectile_10216102) == 0x000010, "Wrong alignment on AProjectile_10216102");
static_assert(sizeof(AProjectile_10216102) == 0x002F70, "Wrong size on AProjectile_10216102");
static_assert(offsetof(AProjectile_10216102, WallDamage) == 0x002F60, "Member 'AProjectile_10216102::WallDamage' has a wrong offset!");

// Class Hero_1021.Projectile_10216101
// 0x0010 (0x2F70 - 0x2F60)
class AProjectile_10216101 : public AMarvelAbilityTargetActor_Projectile
{
public:
	float                                         DelayTimeToSpawnScope10216101;                     // 0x2F60(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F64[0xC];                                     // 0x2F64(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnTimeToSpawnScope10216101();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Projectile_10216101">();
	}
	static class AProjectile_10216101* GetDefaultObj()
	{
		return GetDefaultObjImpl<AProjectile_10216101>();
	}
};
static_assert(alignof(AProjectile_10216101) == 0x000010, "Wrong alignment on AProjectile_10216101");
static_assert(sizeof(AProjectile_10216101) == 0x002F70, "Wrong size on AProjectile_10216101");
static_assert(offsetof(AProjectile_10216101, DelayTimeToSpawnScope10216101) == 0x002F60, "Member 'AProjectile_10216101::DelayTimeToSpawnScope10216101' has a wrong offset!");

// Class Hero_1021.AfterImageComponent
// 0x0000 (0x0870 - 0x0870)
class UAfterImageComponent final : public UCapsuleComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AfterImageComponent">();
	}
	static class UAfterImageComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAfterImageComponent>();
	}
};
static_assert(alignof(UAfterImageComponent) == 0x000010, "Wrong alignment on UAfterImageComponent");
static_assert(sizeof(UAfterImageComponent) == 0x000870, "Wrong size on UAfterImageComponent");

// Class Hero_1021.Summoned_102181
// 0x0330 (0x0B30 - 0x0800)
class ASummoned_102181 : public AMarvelSummonerBase
{
public:
	uint8                                         Pad_7F8[0x8];                                      // 0x07F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeInternal;                                      // 0x0800(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnInternal;                                     // 0x0804(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExistingDuration;                                  // 0x0808(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxSpawnNum;                                       // 0x080C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, struct FSpecialMeshSetting>       HeroMeshSpecialSettings;                           // 0x0810(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bClientShowCapsule;                                // 0x0860(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_861[0x3];                                      // 0x0861(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DebugShowTime;                                     // 0x0864(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  IgnoreAdjustCapsuleTags;                           // 0x0868(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            DamageEffect;                                      // 0x08D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           DataTag;                                           // 0x08D8(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           IgnoreSpawnTag;                                    // 0x08E4(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  EffectTag;                                         // 0x08F0(0x0068)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FTimerHandle                           LoopTimerHandle;                                   // 0x0958(0x0018)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldCreate;                                     // 0x0970(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_971[0x7];                                      // 0x0971(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnSetupAfterImageCom;                              // 0x0978(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnRelevantChanged;                                 // 0x0988(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class AMarvelBaseCharacter*                   TargetCharacter;                                   // 0x0998(0x0008)(Net, ZeroConstructor, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AMarvelBaseCharacter*                   Causer;                                            // 0x09A0(0x0008)(Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9A8[0x10];                                     // 0x09A8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAfterImageSpecContainer               AfterImageSpecsContainer;                          // 0x09B8(0x0128)(Net, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TMap<int32, class UAfterImageComponent*>      AfterImageComponentPools;                          // 0x0AE0(0x0050)(ExportObject, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	void ClearCurrentAfterImage();
	void GetAllAfterImageLocations(TArray<struct FVector>* OutLocations);
	class AMarvelBaseCharacter* GetCauser();
	bool GetIsRelevant();
	class AMarvelBaseCharacter* GetTargetCharacter();
	void LoopUpdate();
	void OnRep_TargetCharacter();
	void OnSummonerTakeDamage(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void SetShouldCreate(bool bShould);
	void SetTargetCharacter(class AMarvelBaseCharacter* OutTarget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Summoned_102181">();
	}
	static class ASummoned_102181* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASummoned_102181>();
	}
};
static_assert(alignof(ASummoned_102181) == 0x000010, "Wrong alignment on ASummoned_102181");
static_assert(sizeof(ASummoned_102181) == 0x000B30, "Wrong size on ASummoned_102181");
static_assert(offsetof(ASummoned_102181, TimeInternal) == 0x000800, "Member 'ASummoned_102181::TimeInternal' has a wrong offset!");
static_assert(offsetof(ASummoned_102181, SpawnInternal) == 0x000804, "Member 'ASummoned_102181::SpawnInternal' has a wrong offset!");
static_assert(offsetof(ASummoned_102181, ExistingDuration) == 0x000808, "Member 'ASummoned_102181::ExistingDuration' has a wrong offset!");
static_assert(offsetof(ASummoned_102181, MaxSpawnNum) == 0x00080C, "Member 'ASummoned_102181::MaxSpawnNum' has a wrong offset!");
static_assert(offsetof(ASummoned_102181, HeroMeshSpecialSettings) == 0x000810, "Member 'ASummoned_102181::HeroMeshSpecialSettings' has a wrong offset!");
static_assert(offsetof(ASummoned_102181, bClientShowCapsule) == 0x000860, "Member 'ASummoned_102181::bClientShowCapsule' has a wrong offset!");
static_assert(offsetof(ASummoned_102181, DebugShowTime) == 0x000864, "Member 'ASummoned_102181::DebugShowTime' has a wrong offset!");
static_assert(offsetof(ASummoned_102181, IgnoreAdjustCapsuleTags) == 0x000868, "Member 'ASummoned_102181::IgnoreAdjustCapsuleTags' has a wrong offset!");
static_assert(offsetof(ASummoned_102181, DamageEffect) == 0x0008D0, "Member 'ASummoned_102181::DamageEffect' has a wrong offset!");
static_assert(offsetof(ASummoned_102181, DataTag) == 0x0008D8, "Member 'ASummoned_102181::DataTag' has a wrong offset!");
static_assert(offsetof(ASummoned_102181, IgnoreSpawnTag) == 0x0008E4, "Member 'ASummoned_102181::IgnoreSpawnTag' has a wrong offset!");
static_assert(offsetof(ASummoned_102181, EffectTag) == 0x0008F0, "Member 'ASummoned_102181::EffectTag' has a wrong offset!");
static_assert(offsetof(ASummoned_102181, LoopTimerHandle) == 0x000958, "Member 'ASummoned_102181::LoopTimerHandle' has a wrong offset!");
static_assert(offsetof(ASummoned_102181, bShouldCreate) == 0x000970, "Member 'ASummoned_102181::bShouldCreate' has a wrong offset!");
static_assert(offsetof(ASummoned_102181, OnSetupAfterImageCom) == 0x000978, "Member 'ASummoned_102181::OnSetupAfterImageCom' has a wrong offset!");
static_assert(offsetof(ASummoned_102181, OnRelevantChanged) == 0x000988, "Member 'ASummoned_102181::OnRelevantChanged' has a wrong offset!");
static_assert(offsetof(ASummoned_102181, TargetCharacter) == 0x000998, "Member 'ASummoned_102181::TargetCharacter' has a wrong offset!");
static_assert(offsetof(ASummoned_102181, Causer) == 0x0009A0, "Member 'ASummoned_102181::Causer' has a wrong offset!");
static_assert(offsetof(ASummoned_102181, AfterImageSpecsContainer) == 0x0009B8, "Member 'ASummoned_102181::AfterImageSpecsContainer' has a wrong offset!");
static_assert(offsetof(ASummoned_102181, AfterImageComponentPools) == 0x000AE0, "Member 'ASummoned_102181::AfterImageComponentPools' has a wrong offset!");

// Class Hero_1021.SummonedComp_10218101
// 0x0000 (0x0C90 - 0x0C90)
class USummonedComp_10218101 final : public UMarvelSummonedComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SummonedComp_10218101">();
	}
	static class USummonedComp_10218101* GetDefaultObj()
	{
		return GetDefaultObjImpl<USummonedComp_10218101>();
	}
};
static_assert(alignof(USummonedComp_10218101) == 0x000010, "Wrong alignment on USummonedComp_10218101");
static_assert(sizeof(USummonedComp_10218101) == 0x000C90, "Wrong size on USummonedComp_10218101");

// Class Hero_1021.Config_102182
// 0x0008 (0x00A0 - 0x0098)
class UConfig_102182 final : public UMarvelAbilityConfig
{
public:
	int32                                         OriginAbilityID;                                   // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SummonedID;                                        // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_102182">();
	}
	static class UConfig_102182* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_102182>();
	}
};
static_assert(alignof(UConfig_102182) == 0x000008, "Wrong alignment on UConfig_102182");
static_assert(sizeof(UConfig_102182) == 0x0000A0, "Wrong size on UConfig_102182");
static_assert(offsetof(UConfig_102182, OriginAbilityID) == 0x000098, "Member 'UConfig_102182::OriginAbilityID' has a wrong offset!");
static_assert(offsetof(UConfig_102182, SummonedID) == 0x00009C, "Member 'UConfig_102182::SummonedID' has a wrong offset!");

// Class Hero_1021.Ability_102182
// 0x0008 (0x2558 - 0x2550)
class UAbility_102182 : public UMarvelGameplayAbility
{
public:
	class ASummoned_102181*                       Summoner;                                          // 0x2550(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_102182">();
	}
	static class UAbility_102182* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_102182>();
	}
};
static_assert(alignof(UAbility_102182) == 0x000008, "Wrong alignment on UAbility_102182");
static_assert(sizeof(UAbility_102182) == 0x002558, "Wrong size on UAbility_102182");
static_assert(offsetof(UAbility_102182, Summoner) == 0x002550, "Member 'UAbility_102182::Summoner' has a wrong offset!");

// Class Hero_1021.Cue_Summoner_Loop_10218101
// 0x0060 (0x0E90 - 0x0E30)
class ACue_Summoner_Loop_10218101 final : public AMarvelCueNotify_Summoned
{
public:
	class UMaterialInterface*                     AfterImageMaterial;                                // 0x0E30(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     AfterImageMaterialTargetPerspective;               // 0x0E38(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeInterval;                                      // 0x0E40(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PoseMeshIgnoreTag;                                 // 0x0E44(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PoseMeshTargetTag;                                 // 0x0E50(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E5C[0x4];                                      // 0x0E5C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASummoned_102181*                       OwnerSummoner;                                     // 0x0E60(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FPoseMeshItem>                  PoseMeshPool;                                      // 0x0E68(0x0010)(BlueprintVisible, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FTimerHandle                           LoopTimerHandle;                                   // 0x0E78(0x0018)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	int32 ApplyUsablePoseMesh();
	void ClearLoopTimer();
	void OnSetupAfterCom(class AMarvelBaseCharacter* OutTargetCharacter, const struct FAfterImageSpec& AfterImageSpec);
	void ResetPoseMeshPool();
	void SetLoopTimer();
	void UpdatePoseMesh(float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Summoner_Loop_10218101">();
	}
	static class ACue_Summoner_Loop_10218101* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Summoner_Loop_10218101>();
	}
};
static_assert(alignof(ACue_Summoner_Loop_10218101) == 0x000008, "Wrong alignment on ACue_Summoner_Loop_10218101");
static_assert(sizeof(ACue_Summoner_Loop_10218101) == 0x000E90, "Wrong size on ACue_Summoner_Loop_10218101");
static_assert(offsetof(ACue_Summoner_Loop_10218101, AfterImageMaterial) == 0x000E30, "Member 'ACue_Summoner_Loop_10218101::AfterImageMaterial' has a wrong offset!");
static_assert(offsetof(ACue_Summoner_Loop_10218101, AfterImageMaterialTargetPerspective) == 0x000E38, "Member 'ACue_Summoner_Loop_10218101::AfterImageMaterialTargetPerspective' has a wrong offset!");
static_assert(offsetof(ACue_Summoner_Loop_10218101, TimeInterval) == 0x000E40, "Member 'ACue_Summoner_Loop_10218101::TimeInterval' has a wrong offset!");
static_assert(offsetof(ACue_Summoner_Loop_10218101, PoseMeshIgnoreTag) == 0x000E44, "Member 'ACue_Summoner_Loop_10218101::PoseMeshIgnoreTag' has a wrong offset!");
static_assert(offsetof(ACue_Summoner_Loop_10218101, PoseMeshTargetTag) == 0x000E50, "Member 'ACue_Summoner_Loop_10218101::PoseMeshTargetTag' has a wrong offset!");
static_assert(offsetof(ACue_Summoner_Loop_10218101, OwnerSummoner) == 0x000E60, "Member 'ACue_Summoner_Loop_10218101::OwnerSummoner' has a wrong offset!");
static_assert(offsetof(ACue_Summoner_Loop_10218101, PoseMeshPool) == 0x000E68, "Member 'ACue_Summoner_Loop_10218101::PoseMeshPool' has a wrong offset!");
static_assert(offsetof(ACue_Summoner_Loop_10218101, LoopTimerHandle) == 0x000E78, "Member 'ACue_Summoner_Loop_10218101::LoopTimerHandle' has a wrong offset!");

// Class Hero_1021.Summoned_10219101
// 0x0000 (0x0800 - 0x0800)
class ASummoned_10219101 : public AMarvelSummonerBase
{
public:
	class UBoxComponent*                          BoxShape;                                          // 0x07F8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Summoned_10219101">();
	}
	static class ASummoned_10219101* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASummoned_10219101>();
	}
};
static_assert(alignof(ASummoned_10219101) == 0x000010, "Wrong alignment on ASummoned_10219101");
static_assert(sizeof(ASummoned_10219101) == 0x000800, "Wrong size on ASummoned_10219101");
static_assert(offsetof(ASummoned_10219101, BoxShape) == 0x0007F8, "Member 'ASummoned_10219101::BoxShape' has a wrong offset!");

// Class Hero_1021.EpicMomentAction_1021
// 0x0020 (0x0140 - 0x0120)
class UEpicMomentAction_1021 : public UEpicMomentBaseAction
{
public:
	struct FEpicMomentNodeInfo                    ShiftConfig;                                       // 0x0120(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ShiftAbilityID;                                    // 0x012C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEpicMomentNodeInfo                    MeleeConfig;                                       // 0x0130(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         MeleeSummonerID;                                   // 0x013C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnSummonedBegin(class AActor* SourceActor, class UMarvelGameplayAbility* SourceAbility, class AActor* Summoned, const struct FMarvelTargetActorGenerateInfo& GenerateInfo);
	void OnSummonedEnd(class AActor* InSummoner);
	void OnSummonerTakeDamage(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EpicMomentAction_1021">();
	}
	static class UEpicMomentAction_1021* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEpicMomentAction_1021>();
	}
};
static_assert(alignof(UEpicMomentAction_1021) == 0x000008, "Wrong alignment on UEpicMomentAction_1021");
static_assert(sizeof(UEpicMomentAction_1021) == 0x000140, "Wrong size on UEpicMomentAction_1021");
static_assert(offsetof(UEpicMomentAction_1021, ShiftConfig) == 0x000120, "Member 'UEpicMomentAction_1021::ShiftConfig' has a wrong offset!");
static_assert(offsetof(UEpicMomentAction_1021, ShiftAbilityID) == 0x00012C, "Member 'UEpicMomentAction_1021::ShiftAbilityID' has a wrong offset!");
static_assert(offsetof(UEpicMomentAction_1021, MeleeConfig) == 0x000130, "Member 'UEpicMomentAction_1021::MeleeConfig' has a wrong offset!");
static_assert(offsetof(UEpicMomentAction_1021, MeleeSummonerID) == 0x00013C, "Member 'UEpicMomentAction_1021::MeleeSummonerID' has a wrong offset!");

// Class Hero_1021.HawkeyeAnimInstance
// 0x0040 (0x0940 - 0x0900)
class UHawkeyeAnimInstance final : public UMarvelAnimInstance
{
public:
	bool                                          bIsInBowState;                                     // 0x0900(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_901[0x7];                                      // 0x0901(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                StartVelocity;                                     // 0x0908(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTriggerDoubleJump;                                // 0x0920(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_921[0x1F];                                     // 0x0921(0x001F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HawkeyeAnimInstance">();
	}
	static class UHawkeyeAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHawkeyeAnimInstance>();
	}
};
static_assert(alignof(UHawkeyeAnimInstance) == 0x000010, "Wrong alignment on UHawkeyeAnimInstance");
static_assert(sizeof(UHawkeyeAnimInstance) == 0x000940, "Wrong size on UHawkeyeAnimInstance");
static_assert(offsetof(UHawkeyeAnimInstance, bIsInBowState) == 0x000900, "Member 'UHawkeyeAnimInstance::bIsInBowState' has a wrong offset!");
static_assert(offsetof(UHawkeyeAnimInstance, StartVelocity) == 0x000908, "Member 'UHawkeyeAnimInstance::StartVelocity' has a wrong offset!");
static_assert(offsetof(UHawkeyeAnimInstance, bTriggerDoubleJump) == 0x000920, "Member 'UHawkeyeAnimInstance::bTriggerDoubleJump' has a wrong offset!");

// Class Hero_1021.HawkeyeCharacter
// 0x0130 (0x18F0 - 0x17C0)
class AHawkeyeCharacter : public AMarvelBaseCharacter
{
public:
	FMulticastInlineDelegateProperty_             BowStateHandleDelegate;                            // 0x17B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             EnergyStageChanged;                                // 0x17C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             EnergyStageIsUp;                                   // 0x17D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             IsHiddenArrowStateDelegate;                        // 0x17E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             ArrowTypeChanged;                                  // 0x17F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UHawkeyeMoveLogicBaseComponent*         HawkeyeMoveLogic;                                  // 0x1808(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsInBowState;                                     // 0x1810(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1811[0x3];                                     // 0x1811(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EnergyStage;                                       // 0x1814(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsHiddenArrow;                                    // 0x1818(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1819[0x3];                                     // 0x1819(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastReplicatedEnergyStage;                         // 0x181C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FName>                           ThumpArrowBones;                                   // 0x1820(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                           BurstArrowBones;                                   // 0x1830(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FName                                   PenetrateArrowBone;                                // 0x1840(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           ThumpTag;                                          // 0x184C(0x000C)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           BurstTag;                                          // 0x1858(0x000C)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1864[0x4];                                     // 0x1864(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  ArrowStateTags;                                    // 0x1868(0x0068)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected)
	TDelegate<void(struct FGameplayTag& InTag, bool bExists)> ArrowTagUpdatedDelegate;                           // 0x18D0(0x0014)(ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18E4[0xC];                                     // 0x18E4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetIsHiddenArrow();
	bool GetIsInBowState();
	void OnArrowTypeTagUpdate(const struct FGameplayTag& Tag, bool bExist);
	void OnLivingStateChanged(EPlayerLivingState LivingState);
	void OnRep_bIsInBowState();
	void OnRep_EnergyStage();
	void OnRep_IsHiddenArrow();
	void RefreshArrowState();
	void SetCurrentArrowType(EHawkeyeArrowType ArrowType);
	void SetEnergyDamage(float InValue);
	void SetEnergyStage(int32 InStageIndex);
	void SetIsHiddenArrow(bool bHiddenArrow);
	void SetIsInBowState(bool bCanInBowState);

	EHawkeyeArrowType GetCurrentArrowType() const;
	float GetEnergyDamage() const;
	int32 GetEnergyStage() const;
	bool GetIsInTripleArrowState() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HawkeyeCharacter">();
	}
	static class AHawkeyeCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHawkeyeCharacter>();
	}
};
static_assert(alignof(AHawkeyeCharacter) == 0x000010, "Wrong alignment on AHawkeyeCharacter");
static_assert(sizeof(AHawkeyeCharacter) == 0x0018F0, "Wrong size on AHawkeyeCharacter");
static_assert(offsetof(AHawkeyeCharacter, BowStateHandleDelegate) == 0x0017B8, "Member 'AHawkeyeCharacter::BowStateHandleDelegate' has a wrong offset!");
static_assert(offsetof(AHawkeyeCharacter, EnergyStageChanged) == 0x0017C8, "Member 'AHawkeyeCharacter::EnergyStageChanged' has a wrong offset!");
static_assert(offsetof(AHawkeyeCharacter, EnergyStageIsUp) == 0x0017D8, "Member 'AHawkeyeCharacter::EnergyStageIsUp' has a wrong offset!");
static_assert(offsetof(AHawkeyeCharacter, IsHiddenArrowStateDelegate) == 0x0017E8, "Member 'AHawkeyeCharacter::IsHiddenArrowStateDelegate' has a wrong offset!");
static_assert(offsetof(AHawkeyeCharacter, ArrowTypeChanged) == 0x0017F8, "Member 'AHawkeyeCharacter::ArrowTypeChanged' has a wrong offset!");
static_assert(offsetof(AHawkeyeCharacter, HawkeyeMoveLogic) == 0x001808, "Member 'AHawkeyeCharacter::HawkeyeMoveLogic' has a wrong offset!");
static_assert(offsetof(AHawkeyeCharacter, bIsInBowState) == 0x001810, "Member 'AHawkeyeCharacter::bIsInBowState' has a wrong offset!");
static_assert(offsetof(AHawkeyeCharacter, EnergyStage) == 0x001814, "Member 'AHawkeyeCharacter::EnergyStage' has a wrong offset!");
static_assert(offsetof(AHawkeyeCharacter, bIsHiddenArrow) == 0x001818, "Member 'AHawkeyeCharacter::bIsHiddenArrow' has a wrong offset!");
static_assert(offsetof(AHawkeyeCharacter, LastReplicatedEnergyStage) == 0x00181C, "Member 'AHawkeyeCharacter::LastReplicatedEnergyStage' has a wrong offset!");
static_assert(offsetof(AHawkeyeCharacter, ThumpArrowBones) == 0x001820, "Member 'AHawkeyeCharacter::ThumpArrowBones' has a wrong offset!");
static_assert(offsetof(AHawkeyeCharacter, BurstArrowBones) == 0x001830, "Member 'AHawkeyeCharacter::BurstArrowBones' has a wrong offset!");
static_assert(offsetof(AHawkeyeCharacter, PenetrateArrowBone) == 0x001840, "Member 'AHawkeyeCharacter::PenetrateArrowBone' has a wrong offset!");
static_assert(offsetof(AHawkeyeCharacter, ThumpTag) == 0x00184C, "Member 'AHawkeyeCharacter::ThumpTag' has a wrong offset!");
static_assert(offsetof(AHawkeyeCharacter, BurstTag) == 0x001858, "Member 'AHawkeyeCharacter::BurstTag' has a wrong offset!");
static_assert(offsetof(AHawkeyeCharacter, ArrowStateTags) == 0x001868, "Member 'AHawkeyeCharacter::ArrowStateTags' has a wrong offset!");
static_assert(offsetof(AHawkeyeCharacter, ArrowTagUpdatedDelegate) == 0x0018D0, "Member 'AHawkeyeCharacter::ArrowTagUpdatedDelegate' has a wrong offset!");

// Class Hero_1021.HawkeyeChildActor
// 0x0040 (0x0A80 - 0x0A40)
class AHawkeyeChildActor final : public AMarvelCharacterChildActor
{
public:
	struct FGameplayTag                           Tag_102161;                                        // 0x0A40(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag_SystemEmote;                                   // 0x0A4C(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHawkeyeCharacter*                      OwnerHawkeye;                                      // 0x0A58(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FName>                           ThumpArrowBones;                                   // 0x0A60(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                           BurstArrowBones;                                   // 0x0A70(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	class AHawkeyeCharacter* GetOwningChar();
	void HandleHiddenArrowMesh(class ACharacter* InCharacter, bool bHiddenArrow);
	void UpdateArrowMesh(class ACharacter* OutUselessChar, EHawkeyeArrowType ArrowType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HawkeyeChildActor">();
	}
	static class AHawkeyeChildActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHawkeyeChildActor>();
	}
};
static_assert(alignof(AHawkeyeChildActor) == 0x000008, "Wrong alignment on AHawkeyeChildActor");
static_assert(sizeof(AHawkeyeChildActor) == 0x000A80, "Wrong size on AHawkeyeChildActor");
static_assert(offsetof(AHawkeyeChildActor, Tag_102161) == 0x000A40, "Member 'AHawkeyeChildActor::Tag_102161' has a wrong offset!");
static_assert(offsetof(AHawkeyeChildActor, Tag_SystemEmote) == 0x000A4C, "Member 'AHawkeyeChildActor::Tag_SystemEmote' has a wrong offset!");
static_assert(offsetof(AHawkeyeChildActor, OwnerHawkeye) == 0x000A58, "Member 'AHawkeyeChildActor::OwnerHawkeye' has a wrong offset!");
static_assert(offsetof(AHawkeyeChildActor, ThumpArrowBones) == 0x000A60, "Member 'AHawkeyeChildActor::ThumpArrowBones' has a wrong offset!");
static_assert(offsetof(AHawkeyeChildActor, BurstArrowBones) == 0x000A70, "Member 'AHawkeyeChildActor::BurstArrowBones' has a wrong offset!");

// Class Hero_1021.HawkeyeMoveLogicBaseComponent
// 0x0000 (0x03F0 - 0x03F0)
class UHawkeyeMoveLogicBaseComponent final : public UMarvelMoveLogicBaseComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HawkeyeMoveLogicBaseComponent">();
	}
	static class UHawkeyeMoveLogicBaseComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHawkeyeMoveLogicBaseComponent>();
	}
};
static_assert(alignof(UHawkeyeMoveLogicBaseComponent) == 0x000008, "Wrong alignment on UHawkeyeMoveLogicBaseComponent");
static_assert(sizeof(UHawkeyeMoveLogicBaseComponent) == 0x0003F0, "Wrong size on UHawkeyeMoveLogicBaseComponent");

// Class Hero_1021.HawkeyeMovementComponent
// 0x0000 (0x1AF0 - 0x1AF0)
class UHawkeyeMovementComponent final : public UMarvelCharacterMovementComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HawkeyeMovementComponent">();
	}
	static class UHawkeyeMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHawkeyeMovementComponent>();
	}
};
static_assert(alignof(UHawkeyeMovementComponent) == 0x000010, "Wrong alignment on UHawkeyeMovementComponent");
static_assert(sizeof(UHawkeyeMovementComponent) == 0x001AF0, "Wrong size on UHawkeyeMovementComponent");

// Class Hero_1021.TabData_1021
// 0x0000 (0x0050 - 0x0050)
class UTabData_1021 final : public UHeroTabDataBase
{
public:
	void OnActorPreDeath(class AActor* Killer, class AActor* Target, const struct FAttributeModifierHandle& ModifierParameterHandle, const struct FGlobalEventExtraData& ExtraData);
	void OnBuffAddEvent(class UAbilitySystemComponent* Source, class UAbilitySystemComponent* Target, const struct FGameplayEffectSpecStackHandle& EffectSpecHandle, const struct FActiveGameplayEffectHandle& EffectHandle);
	void OnPostApplyDamage(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TabData_1021">();
	}
	static class UTabData_1021* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTabData_1021>();
	}
};
static_assert(alignof(UTabData_1021) == 0x000008, "Wrong alignment on UTabData_1021");
static_assert(sizeof(UTabData_1021) == 0x000050, "Wrong size on UTabData_1021");

}

