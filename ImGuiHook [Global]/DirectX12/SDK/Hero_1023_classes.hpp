#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Hero_1023

#include "Basic.hpp"

#include "Hero_1023_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Marvel_structs.hpp"
#include "Marvel_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "AnimationPro_structs.hpp"


namespace SDK
{

// Class Hero_1023.Config_102301
// 0x0008 (0x0120 - 0x0118)
class UConfig_102301 : public UWallRunningAbilityConfig
{
public:
	bool                                          bEnableAllDirection;                               // 0x0118(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_102301">();
	}
	static class UConfig_102301* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_102301>();
	}
};
static_assert(alignof(UConfig_102301) == 0x000008, "Wrong alignment on UConfig_102301");
static_assert(sizeof(UConfig_102301) == 0x000120, "Wrong size on UConfig_102301");
static_assert(offsetof(UConfig_102301, bEnableAllDirection) == 0x000118, "Member 'UConfig_102301::bEnableAllDirection' has a wrong offset!");

// Class Hero_1023.Ability_102301
// 0x0000 (0x25D8 - 0x25D8)
class UAbility_102301 : public UWallRunningAbility
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_102301">();
	}
	static class UAbility_102301* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_102301>();
	}
};
static_assert(alignof(UAbility_102301) == 0x000008, "Wrong alignment on UAbility_102301");
static_assert(sizeof(UAbility_102301) == 0x0025D8, "Wrong size on UAbility_102301");

// Class Hero_1023.Config_102311
// 0x0000 (0x0098 - 0x0098)
class UConfig_102311 final : public UMarvelAbilityConfig
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_102311">();
	}
	static class UConfig_102311* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_102311>();
	}
};
static_assert(alignof(UConfig_102311) == 0x000008, "Wrong alignment on UConfig_102311");
static_assert(sizeof(UConfig_102311) == 0x000098, "Wrong size on UConfig_102311");

// Class Hero_1023.Ability_102311
// 0x0000 (0x2550 - 0x2550)
class UAbility_102311 final : public UMarvelGameplayAbility
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_102311">();
	}
	static class UAbility_102311* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_102311>();
	}
};
static_assert(alignof(UAbility_102311) == 0x000008, "Wrong alignment on UAbility_102311");
static_assert(sizeof(UAbility_102311) == 0x002550, "Wrong size on UAbility_102311");

// Class Hero_1023.Cue_Projectile_Loop_10232101
// 0x0008 (0x0C80 - 0x0C78)
class ACue_Projectile_Loop_10232101 final : public AMarvelCueNotify_Actor
{
public:
	int32                                         TrajectoryAudioID;                                 // 0x0C78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrajectoryAudibleDistance;                         // 0x0C7C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Projectile_Loop_10232101">();
	}
	static class ACue_Projectile_Loop_10232101* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Projectile_Loop_10232101>();
	}
};
static_assert(alignof(ACue_Projectile_Loop_10232101) == 0x000008, "Wrong alignment on ACue_Projectile_Loop_10232101");
static_assert(sizeof(ACue_Projectile_Loop_10232101) == 0x000C80, "Wrong size on ACue_Projectile_Loop_10232101");
static_assert(offsetof(ACue_Projectile_Loop_10232101, TrajectoryAudioID) == 0x000C78, "Member 'ACue_Projectile_Loop_10232101::TrajectoryAudioID' has a wrong offset!");
static_assert(offsetof(ACue_Projectile_Loop_10232101, TrajectoryAudibleDistance) == 0x000C7C, "Member 'ACue_Projectile_Loop_10232101::TrajectoryAudibleDistance' has a wrong offset!");

// Class Hero_1023.Config_102322
// 0x0020 (0x00E8 - 0x00C8)
class UConfig_102322 : public UConfig_106
{
public:
	float                                         NiagaraTreatAlpha;                                 // 0x00C8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NiagaraNonTreatAlpha;                              // 0x00CC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakingMinSpeed;                                   // 0x00D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakingDeceleration;                               // 0x00D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoverAcceleration;                               // 0x00D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumEffectiveTracesLimit;                           // 0x00DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumProjectileLimit;                                // 0x00E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BounceDelay;                                       // 0x00E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_102322">();
	}
	static class UConfig_102322* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_102322>();
	}
};
static_assert(alignof(UConfig_102322) == 0x000008, "Wrong alignment on UConfig_102322");
static_assert(sizeof(UConfig_102322) == 0x0000E8, "Wrong size on UConfig_102322");
static_assert(offsetof(UConfig_102322, NiagaraTreatAlpha) == 0x0000C8, "Member 'UConfig_102322::NiagaraTreatAlpha' has a wrong offset!");
static_assert(offsetof(UConfig_102322, NiagaraNonTreatAlpha) == 0x0000CC, "Member 'UConfig_102322::NiagaraNonTreatAlpha' has a wrong offset!");
static_assert(offsetof(UConfig_102322, BrakingMinSpeed) == 0x0000D0, "Member 'UConfig_102322::BrakingMinSpeed' has a wrong offset!");
static_assert(offsetof(UConfig_102322, BrakingDeceleration) == 0x0000D4, "Member 'UConfig_102322::BrakingDeceleration' has a wrong offset!");
static_assert(offsetof(UConfig_102322, RecoverAcceleration) == 0x0000D8, "Member 'UConfig_102322::RecoverAcceleration' has a wrong offset!");
static_assert(offsetof(UConfig_102322, NumEffectiveTracesLimit) == 0x0000DC, "Member 'UConfig_102322::NumEffectiveTracesLimit' has a wrong offset!");
static_assert(offsetof(UConfig_102322, NumProjectileLimit) == 0x0000E0, "Member 'UConfig_102322::NumProjectileLimit' has a wrong offset!");
static_assert(offsetof(UConfig_102322, BounceDelay) == 0x0000E4, "Member 'UConfig_102322::BounceDelay' has a wrong offset!");

// Class Hero_1023.Ability_102322
// 0x0010 (0x2678 - 0x2668)
class UAbility_102322 : public UAbility_106
{
public:
	TArray<class AProjectile_102322*>             ProjectileArray;                                   // 0x2668(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_102322">();
	}
	static class UAbility_102322* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_102322>();
	}
};
static_assert(alignof(UAbility_102322) == 0x000008, "Wrong alignment on UAbility_102322");
static_assert(sizeof(UAbility_102322) == 0x002678, "Wrong size on UAbility_102322");
static_assert(offsetof(UAbility_102322, ProjectileArray) == 0x002668, "Member 'UAbility_102322::ProjectileArray' has a wrong offset!");

// Class Hero_1023.Projectile_102322
// 0x01E0 (0x3140 - 0x2F60)
class AProjectile_102322 final : public AMarvelAbilityTargetActor_Projectile
{
public:
	uint8                                         Pad_2F60[0x18];                                    // 0x2F60(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bFirstTraced;                                      // 0x2F78(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bBrakingState;                                     // 0x2F79(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTreatingState;                                    // 0x2F7A(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F7B[0x5];                                     // 0x2F7B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UConfig_102322*                         MyConfig;                                          // 0x2F80(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F88[0x4];                                     // 0x2F88(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BounceDelay;                                       // 0x2F8C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             ImpactRes;                                         // 0x2F90(0x0160)(IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                ImpactVel;                                         // 0x30F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimerHandle                           BounceDelayHandle;                                 // 0x3108(0x0018)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnBounceHit;                                       // 0x3120(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnBounceBegin;                                     // 0x3130(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)

public:
	void OnRep_TreatingState();
	void OnTreatingActivate(bool bInActivate);
	void SetBrakingState(bool bInState);
	void SetMovementSimulation();
	void SetTreatingState(bool bInState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Projectile_102322">();
	}
	static class AProjectile_102322* GetDefaultObj()
	{
		return GetDefaultObjImpl<AProjectile_102322>();
	}
};
static_assert(alignof(AProjectile_102322) == 0x000010, "Wrong alignment on AProjectile_102322");
static_assert(sizeof(AProjectile_102322) == 0x003140, "Wrong size on AProjectile_102322");
static_assert(offsetof(AProjectile_102322, bFirstTraced) == 0x002F78, "Member 'AProjectile_102322::bFirstTraced' has a wrong offset!");
static_assert(offsetof(AProjectile_102322, bBrakingState) == 0x002F79, "Member 'AProjectile_102322::bBrakingState' has a wrong offset!");
static_assert(offsetof(AProjectile_102322, bTreatingState) == 0x002F7A, "Member 'AProjectile_102322::bTreatingState' has a wrong offset!");
static_assert(offsetof(AProjectile_102322, MyConfig) == 0x002F80, "Member 'AProjectile_102322::MyConfig' has a wrong offset!");
static_assert(offsetof(AProjectile_102322, BounceDelay) == 0x002F8C, "Member 'AProjectile_102322::BounceDelay' has a wrong offset!");
static_assert(offsetof(AProjectile_102322, ImpactRes) == 0x002F90, "Member 'AProjectile_102322::ImpactRes' has a wrong offset!");
static_assert(offsetof(AProjectile_102322, ImpactVel) == 0x0030F0, "Member 'AProjectile_102322::ImpactVel' has a wrong offset!");
static_assert(offsetof(AProjectile_102322, BounceDelayHandle) == 0x003108, "Member 'AProjectile_102322::BounceDelayHandle' has a wrong offset!");
static_assert(offsetof(AProjectile_102322, OnBounceHit) == 0x003120, "Member 'AProjectile_102322::OnBounceHit' has a wrong offset!");
static_assert(offsetof(AProjectile_102322, OnBounceBegin) == 0x003130, "Member 'AProjectile_102322::OnBounceBegin' has a wrong offset!");

// Class Hero_1023.Cue_Projectile_Loop_10232201
// 0x0078 (0x0CF0 - 0x0C78)
class ACue_Projectile_Loop_10232201 final : public AMarvelCueNotify_Actor
{
public:
	class UCueCombineNiagaraComponent*            NS_CombineNiagara;                                 // 0x0C78(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      NS_Treated;                                        // 0x0C80(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFXSystemAsset*                         FinishFX;                                          // 0x0C88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCurveRange;                                    // 0x0C90(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C91[0x7];                                      // 0x0C91(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AProjectile_102322*                     MyProjectile;                                      // 0x0C98(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectScale;                                       // 0x0CA0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EState_10232201                               State;                                             // 0x0CA4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CA5[0x1B];                                     // 0x0CA5(0x001B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CurrentValue;                                      // 0x0CC0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopAudioID;                                       // 0x0CD8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CDC[0xC];                                      // 0x0CDC(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	class UConfig_102322*                         MyConfig;                                          // 0x0CE8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnBounceBegin(const struct FVector& HitLocation, const struct FVector& SourceDir, const struct FVector& ReflexDir);
	void OnBounceHit(const struct FVector& HitLocation, const struct FVector& SourceDir, const struct FVector& ReflexDir);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Projectile_Loop_10232201">();
	}
	static class ACue_Projectile_Loop_10232201* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Projectile_Loop_10232201>();
	}
};
static_assert(alignof(ACue_Projectile_Loop_10232201) == 0x000008, "Wrong alignment on ACue_Projectile_Loop_10232201");
static_assert(sizeof(ACue_Projectile_Loop_10232201) == 0x000CF0, "Wrong size on ACue_Projectile_Loop_10232201");
static_assert(offsetof(ACue_Projectile_Loop_10232201, NS_CombineNiagara) == 0x000C78, "Member 'ACue_Projectile_Loop_10232201::NS_CombineNiagara' has a wrong offset!");
static_assert(offsetof(ACue_Projectile_Loop_10232201, NS_Treated) == 0x000C80, "Member 'ACue_Projectile_Loop_10232201::NS_Treated' has a wrong offset!");
static_assert(offsetof(ACue_Projectile_Loop_10232201, FinishFX) == 0x000C88, "Member 'ACue_Projectile_Loop_10232201::FinishFX' has a wrong offset!");
static_assert(offsetof(ACue_Projectile_Loop_10232201, bUseCurveRange) == 0x000C90, "Member 'ACue_Projectile_Loop_10232201::bUseCurveRange' has a wrong offset!");
static_assert(offsetof(ACue_Projectile_Loop_10232201, MyProjectile) == 0x000C98, "Member 'ACue_Projectile_Loop_10232201::MyProjectile' has a wrong offset!");
static_assert(offsetof(ACue_Projectile_Loop_10232201, EffectScale) == 0x000CA0, "Member 'ACue_Projectile_Loop_10232201::EffectScale' has a wrong offset!");
static_assert(offsetof(ACue_Projectile_Loop_10232201, State) == 0x000CA4, "Member 'ACue_Projectile_Loop_10232201::State' has a wrong offset!");
static_assert(offsetof(ACue_Projectile_Loop_10232201, CurrentValue) == 0x000CC0, "Member 'ACue_Projectile_Loop_10232201::CurrentValue' has a wrong offset!");
static_assert(offsetof(ACue_Projectile_Loop_10232201, LoopAudioID) == 0x000CD8, "Member 'ACue_Projectile_Loop_10232201::LoopAudioID' has a wrong offset!");
static_assert(offsetof(ACue_Projectile_Loop_10232201, MyConfig) == 0x000CE8, "Member 'ACue_Projectile_Loop_10232201::MyConfig' has a wrong offset!");

// Class Hero_1023.TraceComponent_10232201
// 0x00C0 (0x1770 - 0x16B0)
class UTraceComponent_10232201 final : public UMarvelAgentTraceComponent
{
public:
	uint8                                         Pad_16A8[0x8];                                     // 0x16A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumRemainingSkipTraces;                            // 0x16B0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         NumEffectiveTraces;                                // 0x16B4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         NumActiveEffectsOfTrace;                           // 0x16B8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_16BC[0x4];                                     // 0x16BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UConfig_102322*                         MyConfig;                                          // 0x16C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AProjectile_102322*                     MyProjectile;                                      // 0x16C8(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_16D0[0xA0];                                    // 0x16D0(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CanBeTreat(const class AActor* InTargetActor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TraceComponent_10232201">();
	}
	static class UTraceComponent_10232201* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTraceComponent_10232201>();
	}
};
static_assert(alignof(UTraceComponent_10232201) == 0x000010, "Wrong alignment on UTraceComponent_10232201");
static_assert(sizeof(UTraceComponent_10232201) == 0x001770, "Wrong size on UTraceComponent_10232201");
static_assert(offsetof(UTraceComponent_10232201, NumRemainingSkipTraces) == 0x0016B0, "Member 'UTraceComponent_10232201::NumRemainingSkipTraces' has a wrong offset!");
static_assert(offsetof(UTraceComponent_10232201, NumEffectiveTraces) == 0x0016B4, "Member 'UTraceComponent_10232201::NumEffectiveTraces' has a wrong offset!");
static_assert(offsetof(UTraceComponent_10232201, NumActiveEffectsOfTrace) == 0x0016B8, "Member 'UTraceComponent_10232201::NumActiveEffectsOfTrace' has a wrong offset!");
static_assert(offsetof(UTraceComponent_10232201, MyConfig) == 0x0016C0, "Member 'UTraceComponent_10232201::MyConfig' has a wrong offset!");
static_assert(offsetof(UTraceComponent_10232201, MyProjectile) == 0x0016C8, "Member 'UTraceComponent_10232201::MyProjectile' has a wrong offset!");

// Class Hero_1023.SummonedComp_10234101
// 0x0020 (0x0CB0 - 0x0C90)
class USummonedComp_10234101 : public UMarvelSummonedComponent
{
public:
	FMulticastInlineDelegateProperty_             OnCueStateChanged;                                 // 0x0C88(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	ESpawnState                                   SummonedSpawnState;                                // 0x0C98(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C99[0x3];                                      // 0x0C99(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ServerActiveTime;                                  // 0x0C9C(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultHeight;                                     // 0x0CA0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AMarvelBaseCharacter>    RespawningCharacter;                               // 0x0CA4(0x0008)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CAC[0x4];                                      // 0x0CAC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearLeaveTimer();
	class AMarvelBaseCharacter* GetRespawningCharacter();
	bool IsLeaveTimerValid();
	void NativeOnRepSummonedSpawnState();
	void NoParamDelegate__DelegateSignature();
	void OnRep_SummonedSpawnState(ESpawnState OldCueState);
	void RespawnCharacterLeave();
	void SetCollisionMaskFilter(bool bIsSetAllyMaskFilter);
	void SetRespawningCharacter(class AMarvelBaseCharacter* MarvelBaseCharacter);
	void SetSummonedSpawnState(ESpawnState NewState);
	void SetTargetAnimToDeath(class AMarvelBaseCharacter* Target);
	void SetTargetAnimToReviving(class AMarvelBaseCharacter* Target);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SummonedComp_10234101">();
	}
	static class USummonedComp_10234101* GetDefaultObj()
	{
		return GetDefaultObjImpl<USummonedComp_10234101>();
	}
};
static_assert(alignof(USummonedComp_10234101) == 0x000010, "Wrong alignment on USummonedComp_10234101");
static_assert(sizeof(USummonedComp_10234101) == 0x000CB0, "Wrong size on USummonedComp_10234101");
static_assert(offsetof(USummonedComp_10234101, OnCueStateChanged) == 0x000C88, "Member 'USummonedComp_10234101::OnCueStateChanged' has a wrong offset!");
static_assert(offsetof(USummonedComp_10234101, SummonedSpawnState) == 0x000C98, "Member 'USummonedComp_10234101::SummonedSpawnState' has a wrong offset!");
static_assert(offsetof(USummonedComp_10234101, ServerActiveTime) == 0x000C9C, "Member 'USummonedComp_10234101::ServerActiveTime' has a wrong offset!");
static_assert(offsetof(USummonedComp_10234101, DefaultHeight) == 0x000CA0, "Member 'USummonedComp_10234101::DefaultHeight' has a wrong offset!");
static_assert(offsetof(USummonedComp_10234101, RespawningCharacter) == 0x000CA4, "Member 'USummonedComp_10234101::RespawningCharacter' has a wrong offset!");

// Class Hero_1023.Summoned_10234101
// 0x0080 (0x0880 - 0x0800)
class ASummoned_10234101 : public AMarvelSummonerBase
{
public:
	class UMarvelRespawnerMovementComponent*      ProjectileMovement;                                // 0x07F8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USummonedMovementComponent*             SummonedMovement;                                  // 0x0800(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameplayTasksComponent*                GameplayTasks;                                     // 0x0808(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMoveIgnoreActorControllerComponent*    MoveIgnoreActorController;                         // 0x0810(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USphereComponent*                       UpCollision;                                       // 0x0818(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoxComponent*                          DownCollision;                                     // 0x0820(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TopExtendHeightWhileResurrect;                     // 0x0828(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82C[0x4];                                      // 0x082C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TopHeightChangeTimeline;                           // 0x0830(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_838[0x20];                                     // 0x0838(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            TopHeightRaiseCurve;                               // 0x0858(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_860[0x20];                                     // 0x0860(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UConfig_102341* GetConfig();
	struct FVector GetDownCollisionTopLocation();
	void OnCueStateChanged(class USummonedComp_10234101* SummonedComponent, ESpawnState OldState, ESpawnState NewState);
	void OnEndAgentTask();
	void OnHeightUpdateWhileRespawning();
	void OnRecycleAgentTask();
	void OnTopHeightUpdateWhileActive(class FName TrackName, class FName PropertyName, float Output);
	void SetRootComponentIgnoreAbilityHit();
	void SetUpCollisionIgnoreAll(bool bIgnore);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Summoned_10234101">();
	}
	static class ASummoned_10234101* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASummoned_10234101>();
	}
};
static_assert(alignof(ASummoned_10234101) == 0x000010, "Wrong alignment on ASummoned_10234101");
static_assert(sizeof(ASummoned_10234101) == 0x000880, "Wrong size on ASummoned_10234101");
static_assert(offsetof(ASummoned_10234101, ProjectileMovement) == 0x0007F8, "Member 'ASummoned_10234101::ProjectileMovement' has a wrong offset!");
static_assert(offsetof(ASummoned_10234101, SummonedMovement) == 0x000800, "Member 'ASummoned_10234101::SummonedMovement' has a wrong offset!");
static_assert(offsetof(ASummoned_10234101, GameplayTasks) == 0x000808, "Member 'ASummoned_10234101::GameplayTasks' has a wrong offset!");
static_assert(offsetof(ASummoned_10234101, MoveIgnoreActorController) == 0x000810, "Member 'ASummoned_10234101::MoveIgnoreActorController' has a wrong offset!");
static_assert(offsetof(ASummoned_10234101, UpCollision) == 0x000818, "Member 'ASummoned_10234101::UpCollision' has a wrong offset!");
static_assert(offsetof(ASummoned_10234101, DownCollision) == 0x000820, "Member 'ASummoned_10234101::DownCollision' has a wrong offset!");
static_assert(offsetof(ASummoned_10234101, TopExtendHeightWhileResurrect) == 0x000828, "Member 'ASummoned_10234101::TopExtendHeightWhileResurrect' has a wrong offset!");
static_assert(offsetof(ASummoned_10234101, TopHeightChangeTimeline) == 0x000830, "Member 'ASummoned_10234101::TopHeightChangeTimeline' has a wrong offset!");
static_assert(offsetof(ASummoned_10234101, TopHeightRaiseCurve) == 0x000858, "Member 'ASummoned_10234101::TopHeightRaiseCurve' has a wrong offset!");

// Class Hero_1023.Summoned_10234101_Item
// 0x0030 (0x0830 - 0x0800)
class ASummoned_10234101_Item : public AMarvelSummonerBase
{
public:
	class UMarvelProjectileComponent*             ProjectileMovementItem;                            // 0x07F8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMoveIgnoreActorControllerComponent*    MoveIgnoreActorController;                         // 0x0800(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USphereComponent*                       OverlapCollisionComponent;                         // 0x0808(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOverlapHandlerComponent*               OverlapHandleComponent;                            // 0x0810(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_818[0x8];                                      // 0x0818(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BuffID;                                            // 0x0820(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_824[0xC];                                      // 0x0824(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnActorOverlap(class AActor* InActor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Summoned_10234101_Item">();
	}
	static class ASummoned_10234101_Item* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASummoned_10234101_Item>();
	}
};
static_assert(alignof(ASummoned_10234101_Item) == 0x000010, "Wrong alignment on ASummoned_10234101_Item");
static_assert(sizeof(ASummoned_10234101_Item) == 0x000830, "Wrong size on ASummoned_10234101_Item");
static_assert(offsetof(ASummoned_10234101_Item, ProjectileMovementItem) == 0x0007F8, "Member 'ASummoned_10234101_Item::ProjectileMovementItem' has a wrong offset!");
static_assert(offsetof(ASummoned_10234101_Item, MoveIgnoreActorController) == 0x000800, "Member 'ASummoned_10234101_Item::MoveIgnoreActorController' has a wrong offset!");
static_assert(offsetof(ASummoned_10234101_Item, OverlapCollisionComponent) == 0x000808, "Member 'ASummoned_10234101_Item::OverlapCollisionComponent' has a wrong offset!");
static_assert(offsetof(ASummoned_10234101_Item, OverlapHandleComponent) == 0x000810, "Member 'ASummoned_10234101_Item::OverlapHandleComponent' has a wrong offset!");
static_assert(offsetof(ASummoned_10234101_Item, BuffID) == 0x000820, "Member 'ASummoned_10234101_Item::BuffID' has a wrong offset!");

// Class Hero_1023.MarvelRespawnerMovementComponent
// 0x0390 (0x2300 - 0x1F70)
class UMarvelRespawnerMovementComponent final : public UMarvelProjectileComponent
{
public:
	struct FMarvelTraceRule                       SummonedBounceRule;                                // 0x1F68(0x0390)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         MaxSlopeDegree;                                    // 0x22F8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_22FC[0x4];                                     // 0x22FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelRespawnerMovementComponent">();
	}
	static class UMarvelRespawnerMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelRespawnerMovementComponent>();
	}
};
static_assert(alignof(UMarvelRespawnerMovementComponent) == 0x000010, "Wrong alignment on UMarvelRespawnerMovementComponent");
static_assert(sizeof(UMarvelRespawnerMovementComponent) == 0x002300, "Wrong size on UMarvelRespawnerMovementComponent");
static_assert(offsetof(UMarvelRespawnerMovementComponent, SummonedBounceRule) == 0x001F68, "Member 'UMarvelRespawnerMovementComponent::SummonedBounceRule' has a wrong offset!");
static_assert(offsetof(UMarvelRespawnerMovementComponent, MaxSlopeDegree) == 0x0022F8, "Member 'UMarvelRespawnerMovementComponent::MaxSlopeDegree' has a wrong offset!");

// Class Hero_1023.Cue_Buff_10234107
// 0x0058 (0x1040 - 0x0FE8)
class ACue_Buff_10234107 : public AMarvelCueNotify_Buff
{
public:
	class UCurveFloat*                            DeathMaterialCurve;                                // 0x0FE8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            RevivingMaterialCurve;                             // 0x0FF0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FF8[0x1C];                                     // 0x0FF8(0x001C)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayHideMeshTimeAfterPreSpawn;                    // 0x1014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1018[0x20];                                    // 0x1018(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class USummonedComp_10234101>  CachedBindSummonedComp;                            // 0x1038(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnResurrectStateChanged(class USummonedComp_10234101* SummonedComponent, ESpawnState OldState, ESpawnState NewState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Buff_10234107">();
	}
	static class ACue_Buff_10234107* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Buff_10234107>();
	}
};
static_assert(alignof(ACue_Buff_10234107) == 0x000008, "Wrong alignment on ACue_Buff_10234107");
static_assert(sizeof(ACue_Buff_10234107) == 0x001040, "Wrong size on ACue_Buff_10234107");
static_assert(offsetof(ACue_Buff_10234107, DeathMaterialCurve) == 0x000FE8, "Member 'ACue_Buff_10234107::DeathMaterialCurve' has a wrong offset!");
static_assert(offsetof(ACue_Buff_10234107, RevivingMaterialCurve) == 0x000FF0, "Member 'ACue_Buff_10234107::RevivingMaterialCurve' has a wrong offset!");
static_assert(offsetof(ACue_Buff_10234107, DelayHideMeshTimeAfterPreSpawn) == 0x001014, "Member 'ACue_Buff_10234107::DelayHideMeshTimeAfterPreSpawn' has a wrong offset!");
static_assert(offsetof(ACue_Buff_10234107, CachedBindSummonedComp) == 0x001038, "Member 'ACue_Buff_10234107::CachedBindSummonedComp' has a wrong offset!");

// Class Hero_1023.Config_102341
// 0x0008 (0x00A0 - 0x0098)
class UConfig_102341 : public UMarvelAbilityConfig
{
public:
	float                                         RespawnDistance;                                   // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RespawnPeriod_Detect;                              // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_102341">();
	}
	static class UConfig_102341* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_102341>();
	}
};
static_assert(alignof(UConfig_102341) == 0x000008, "Wrong alignment on UConfig_102341");
static_assert(sizeof(UConfig_102341) == 0x0000A0, "Wrong size on UConfig_102341");
static_assert(offsetof(UConfig_102341, RespawnDistance) == 0x000098, "Member 'UConfig_102341::RespawnDistance' has a wrong offset!");
static_assert(offsetof(UConfig_102341, RespawnPeriod_Detect) == 0x00009C, "Member 'UConfig_102341::RespawnPeriod_Detect' has a wrong offset!");

// Class Hero_1023.Cue_Summoner_Loop_10234101_2
// 0x0090 (0x0EC0 - 0x0E30)
class alignas(0x10) ACue_Summoner_Loop_10234101_2 : public AMarvelCueNotify_Summoned
{
public:
	class USkeletalMeshComponent*                 UpMesh;                                            // 0x0E30(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                 DownMesh;                                          // 0x0E38(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TopMeshHeight;                                     // 0x0E40(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E44[0x6C];                                     // 0x0E44(0x006C)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      MiddleFX;                                          // 0x0EB0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EB8[0x8];                                      // 0x0EB8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCueStateChanged(class USummonedComp_10234101* SummonedComponent, ESpawnState OldState, ESpawnState NewState);
	void UpdateMiddleFXHeight();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Summoner_Loop_10234101_2">();
	}
	static class ACue_Summoner_Loop_10234101_2* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Summoner_Loop_10234101_2>();
	}
};
static_assert(alignof(ACue_Summoner_Loop_10234101_2) == 0x000010, "Wrong alignment on ACue_Summoner_Loop_10234101_2");
static_assert(sizeof(ACue_Summoner_Loop_10234101_2) == 0x000EC0, "Wrong size on ACue_Summoner_Loop_10234101_2");
static_assert(offsetof(ACue_Summoner_Loop_10234101_2, UpMesh) == 0x000E30, "Member 'ACue_Summoner_Loop_10234101_2::UpMesh' has a wrong offset!");
static_assert(offsetof(ACue_Summoner_Loop_10234101_2, DownMesh) == 0x000E38, "Member 'ACue_Summoner_Loop_10234101_2::DownMesh' has a wrong offset!");
static_assert(offsetof(ACue_Summoner_Loop_10234101_2, TopMeshHeight) == 0x000E40, "Member 'ACue_Summoner_Loop_10234101_2::TopMeshHeight' has a wrong offset!");
static_assert(offsetof(ACue_Summoner_Loop_10234101_2, MiddleFX) == 0x000EB0, "Member 'ACue_Summoner_Loop_10234101_2::MiddleFX' has a wrong offset!");

// Class Hero_1023.CueDataCurveAction_MaterialScalar_102341
// 0x0000 (0x0048 - 0x0048)
class UCueDataCurveAction_MaterialScalar_102341 final : public UCueDataCurveAction_Base
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueDataCurveAction_MaterialScalar_102341">();
	}
	static class UCueDataCurveAction_MaterialScalar_102341* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCueDataCurveAction_MaterialScalar_102341>();
	}
};
static_assert(alignof(UCueDataCurveAction_MaterialScalar_102341) == 0x000008, "Wrong alignment on UCueDataCurveAction_MaterialScalar_102341");
static_assert(sizeof(UCueDataCurveAction_MaterialScalar_102341) == 0x000048, "Wrong size on UCueDataCurveAction_MaterialScalar_102341");

// Class Hero_1023.Cue_Summoner_Loop_10235101
// 0x00B8 (0x0EE8 - 0x0E30)
class ACue_Summoner_Loop_10235101 : public AMarvelCueNotify_Summoned
{
public:
	class USceneComponent*                        OffsetRoot;                                        // 0x0E30(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 SkeletalMeshObj;                                   // 0x0E38(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      NS_LoopScope;                                      // 0x0E40(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveTime;                                          // 0x0E48(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Gravity;                                           // 0x0E4C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LiftTime;                                          // 0x0E50(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LiftHeight;                                        // 0x0E54(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundHeight;                                      // 0x0E58(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E5C[0x4];                                      // 0x0E5C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFXSystemAsset*                         FireFX;                                            // 0x0E60(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FireFXOffset;                                      // 0x0E68(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnBeginFlyDispatcher;                              // 0x0E80(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnBeginLiftDispatcher;                             // 0x0E90(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnEndLiftDispatcher;                               // 0x0EA0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_EB0[0x38];                                     // 0x0EB0(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Summoner_Loop_10235101">();
	}
	static class ACue_Summoner_Loop_10235101* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Summoner_Loop_10235101>();
	}
};
static_assert(alignof(ACue_Summoner_Loop_10235101) == 0x000008, "Wrong alignment on ACue_Summoner_Loop_10235101");
static_assert(sizeof(ACue_Summoner_Loop_10235101) == 0x000EE8, "Wrong size on ACue_Summoner_Loop_10235101");
static_assert(offsetof(ACue_Summoner_Loop_10235101, OffsetRoot) == 0x000E30, "Member 'ACue_Summoner_Loop_10235101::OffsetRoot' has a wrong offset!");
static_assert(offsetof(ACue_Summoner_Loop_10235101, SkeletalMeshObj) == 0x000E38, "Member 'ACue_Summoner_Loop_10235101::SkeletalMeshObj' has a wrong offset!");
static_assert(offsetof(ACue_Summoner_Loop_10235101, NS_LoopScope) == 0x000E40, "Member 'ACue_Summoner_Loop_10235101::NS_LoopScope' has a wrong offset!");
static_assert(offsetof(ACue_Summoner_Loop_10235101, MoveTime) == 0x000E48, "Member 'ACue_Summoner_Loop_10235101::MoveTime' has a wrong offset!");
static_assert(offsetof(ACue_Summoner_Loop_10235101, Gravity) == 0x000E4C, "Member 'ACue_Summoner_Loop_10235101::Gravity' has a wrong offset!");
static_assert(offsetof(ACue_Summoner_Loop_10235101, LiftTime) == 0x000E50, "Member 'ACue_Summoner_Loop_10235101::LiftTime' has a wrong offset!");
static_assert(offsetof(ACue_Summoner_Loop_10235101, LiftHeight) == 0x000E54, "Member 'ACue_Summoner_Loop_10235101::LiftHeight' has a wrong offset!");
static_assert(offsetof(ACue_Summoner_Loop_10235101, GroundHeight) == 0x000E58, "Member 'ACue_Summoner_Loop_10235101::GroundHeight' has a wrong offset!");
static_assert(offsetof(ACue_Summoner_Loop_10235101, FireFX) == 0x000E60, "Member 'ACue_Summoner_Loop_10235101::FireFX' has a wrong offset!");
static_assert(offsetof(ACue_Summoner_Loop_10235101, FireFXOffset) == 0x000E68, "Member 'ACue_Summoner_Loop_10235101::FireFXOffset' has a wrong offset!");
static_assert(offsetof(ACue_Summoner_Loop_10235101, OnBeginFlyDispatcher) == 0x000E80, "Member 'ACue_Summoner_Loop_10235101::OnBeginFlyDispatcher' has a wrong offset!");
static_assert(offsetof(ACue_Summoner_Loop_10235101, OnBeginLiftDispatcher) == 0x000E90, "Member 'ACue_Summoner_Loop_10235101::OnBeginLiftDispatcher' has a wrong offset!");
static_assert(offsetof(ACue_Summoner_Loop_10235101, OnEndLiftDispatcher) == 0x000EA0, "Member 'ACue_Summoner_Loop_10235101::OnEndLiftDispatcher' has a wrong offset!");

// Class Hero_1023.SummonerAnimInstance_102351
// 0x0010 (0x0430 - 0x0420)
class USummonerAnimInstance_102351 final : public UAnimInstance
{
public:
	float                                         LoopAnimRate;                                      // 0x0418(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         State;                                             // 0x041C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            RateCurve;                                         // 0x0420(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_428[0x8];                                      // 0x0428(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnEnterLoopState(const struct FAnimNode_StateMachine& Machine, int32 PrevStateIndex, int32 NextStateIndex);
	void OnOwnerBeginFly(class AActor* Target);
	void OnOwnerBeginLift(class AActor* Target);
	void OnOwnerRecycle();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SummonerAnimInstance_102351">();
	}
	static class USummonerAnimInstance_102351* GetDefaultObj()
	{
		return GetDefaultObjImpl<USummonerAnimInstance_102351>();
	}
};
static_assert(alignof(USummonerAnimInstance_102351) == 0x000010, "Wrong alignment on USummonerAnimInstance_102351");
static_assert(sizeof(USummonerAnimInstance_102351) == 0x000430, "Wrong size on USummonerAnimInstance_102351");
static_assert(offsetof(USummonerAnimInstance_102351, LoopAnimRate) == 0x000418, "Member 'USummonerAnimInstance_102351::LoopAnimRate' has a wrong offset!");
static_assert(offsetof(USummonerAnimInstance_102351, State) == 0x00041C, "Member 'USummonerAnimInstance_102351::State' has a wrong offset!");
static_assert(offsetof(USummonerAnimInstance_102351, RateCurve) == 0x000420, "Member 'USummonerAnimInstance_102351::RateCurve' has a wrong offset!");

// Class Hero_1023.Config_102361
// 0x0E20 (0x1FF0 - 0x11D0)
class UConfig_102361 : public UMarvelSelectTargetConfig
{
public:
	int32                                         BondID;                                            // 0x11C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOptimizeGameStateFindGroot;                       // 0x11CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11CD[0x3];                                     // 0x11CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GrootFilterDistance;                               // 0x11D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D4[0x4];                                     // 0x11D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDashAbilityInfo                       DashToGrootInfo;                                   // 0x11D8(0x0B70)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  BlockAbilityTagsWhenFlying;                        // 0x1D48(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FName                                   GrootSocketName;                                   // 0x1DB0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERacoonGrootAttachLockCameraYawState          LockState;                                         // 0x1DBC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERacoonGrootLockCameraYawTarget               LockTarget;                                        // 0x1DBD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DBE[0x2];                                     // 0x1DBE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              LimitYaw;                                          // 0x1DC0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawInterpSpeed;                                    // 0x1DD0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DD4[0x4];                                     // 0x1DD4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              LimitPitch;                                        // 0x1DD8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GrootDetachTagContainer;                           // 0x1DE8(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RaccoonDetachTagContainer;                         // 0x1E50(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UCameraInterp*                          RidingCameraInterp;                                // 0x1EB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStateChangedTaskParam                 ExitRideInputSetting;                              // 0x1EC0(0x0028)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bExitRideWhenRaccoonTakeDamage;                    // 0x1EE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EE9[0x7];                                     // 0x1EE9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<int32>                                   SameBuffSet;                                       // 0x1EF0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RemoveEffectWithTagsWhileAttach;                   // 0x1F40(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVector                                AttachCylinderOffset;                              // 0x1FA8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AttachMeshOffset;                                  // 0x1FC0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DettachLaunchVelocity;                             // 0x1FD8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_102361">();
	}
	static class UConfig_102361* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_102361>();
	}
};
static_assert(alignof(UConfig_102361) == 0x000010, "Wrong alignment on UConfig_102361");
static_assert(sizeof(UConfig_102361) == 0x001FF0, "Wrong size on UConfig_102361");
static_assert(offsetof(UConfig_102361, BondID) == 0x0011C8, "Member 'UConfig_102361::BondID' has a wrong offset!");
static_assert(offsetof(UConfig_102361, bOptimizeGameStateFindGroot) == 0x0011CC, "Member 'UConfig_102361::bOptimizeGameStateFindGroot' has a wrong offset!");
static_assert(offsetof(UConfig_102361, GrootFilterDistance) == 0x0011D0, "Member 'UConfig_102361::GrootFilterDistance' has a wrong offset!");
static_assert(offsetof(UConfig_102361, DashToGrootInfo) == 0x0011D8, "Member 'UConfig_102361::DashToGrootInfo' has a wrong offset!");
static_assert(offsetof(UConfig_102361, BlockAbilityTagsWhenFlying) == 0x001D48, "Member 'UConfig_102361::BlockAbilityTagsWhenFlying' has a wrong offset!");
static_assert(offsetof(UConfig_102361, GrootSocketName) == 0x001DB0, "Member 'UConfig_102361::GrootSocketName' has a wrong offset!");
static_assert(offsetof(UConfig_102361, LockState) == 0x001DBC, "Member 'UConfig_102361::LockState' has a wrong offset!");
static_assert(offsetof(UConfig_102361, LockTarget) == 0x001DBD, "Member 'UConfig_102361::LockTarget' has a wrong offset!");
static_assert(offsetof(UConfig_102361, LimitYaw) == 0x001DC0, "Member 'UConfig_102361::LimitYaw' has a wrong offset!");
static_assert(offsetof(UConfig_102361, YawInterpSpeed) == 0x001DD0, "Member 'UConfig_102361::YawInterpSpeed' has a wrong offset!");
static_assert(offsetof(UConfig_102361, LimitPitch) == 0x001DD8, "Member 'UConfig_102361::LimitPitch' has a wrong offset!");
static_assert(offsetof(UConfig_102361, GrootDetachTagContainer) == 0x001DE8, "Member 'UConfig_102361::GrootDetachTagContainer' has a wrong offset!");
static_assert(offsetof(UConfig_102361, RaccoonDetachTagContainer) == 0x001E50, "Member 'UConfig_102361::RaccoonDetachTagContainer' has a wrong offset!");
static_assert(offsetof(UConfig_102361, RidingCameraInterp) == 0x001EB8, "Member 'UConfig_102361::RidingCameraInterp' has a wrong offset!");
static_assert(offsetof(UConfig_102361, ExitRideInputSetting) == 0x001EC0, "Member 'UConfig_102361::ExitRideInputSetting' has a wrong offset!");
static_assert(offsetof(UConfig_102361, bExitRideWhenRaccoonTakeDamage) == 0x001EE8, "Member 'UConfig_102361::bExitRideWhenRaccoonTakeDamage' has a wrong offset!");
static_assert(offsetof(UConfig_102361, SameBuffSet) == 0x001EF0, "Member 'UConfig_102361::SameBuffSet' has a wrong offset!");
static_assert(offsetof(UConfig_102361, RemoveEffectWithTagsWhileAttach) == 0x001F40, "Member 'UConfig_102361::RemoveEffectWithTagsWhileAttach' has a wrong offset!");
static_assert(offsetof(UConfig_102361, AttachCylinderOffset) == 0x001FA8, "Member 'UConfig_102361::AttachCylinderOffset' has a wrong offset!");
static_assert(offsetof(UConfig_102361, AttachMeshOffset) == 0x001FC0, "Member 'UConfig_102361::AttachMeshOffset' has a wrong offset!");
static_assert(offsetof(UConfig_102361, DettachLaunchVelocity) == 0x001FD8, "Member 'UConfig_102361::DettachLaunchVelocity' has a wrong offset!");

// Class Hero_1023.Ability_102361
// 0x00F8 (0x2808 - 0x2710)
class UAbility_102361 : public UMarvelSelectTargetAbility
{
public:
	struct FGameplayTag                           MarkOnGrootTag;                                    // 0x2710(0x000C)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_271C[0x4];                                     // 0x271C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnRaccoonGrootCoopStateChangeDispatcher;           // 0x2720(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	ERacoonGrootAbilityState                      CurrentState;                                      // 0x2730(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldTaskBroadcastEnd;                           // 0x2731(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2732[0x6];                                     // 0x2732(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AGrootCharacter*                        Groot;                                             // 0x2738(0x0008)(BlueprintVisible, Net, ZeroConstructor, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2740[0x90];                                    // 0x2740(0x0090)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelGameState*                       CurrentGameState;                                  // 0x27D0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AMarvelBaseCharacter*                   OwningCharacter;                                   // 0x27D8(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ARocketRaccoonChildActor*               RaccoonChildActor;                                 // 0x27E0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UConfig_102361*                         CoopConfig;                                        // 0x27E8(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_27F0[0x8];                                     // 0x27F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelAbilityTask_WaitInputStateChanged* RideCancelTask;                                    // 0x27F8(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAbility_111*                           InteractiveAbility;                                // 0x2800(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void BindCancelRideInput();
	void BindDettachDelegates(class AActor* InGroot);
	void MarkOnGroot(bool bOnGroot);
	void OnCoopAbilityTickStateChanged(bool bShouldAbilityTick);
	void OnGrootDeath(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnGrootRepToSimulatedRole();
	void OnGrootTagUpdated(const struct FGameplayTag& TagUpdated, bool bTagExists);
	void OnRaccoonDeath(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnRaccoonTagUpdated(const struct FGameplayTag& TagUpdated, bool bTagExists);
	void OnRaccoonTakeDamage(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnRep_CurrentState();
	void OnRep_Groot();
	void OnRideCancel(float StateIntervalTime);
	void Python_AttachToGroot();
	void Python_DetachFromGroot();
	void Python_FailedFlyingToGroot();
	void Python_OnRideCancel();
	void Python_StartFlyingToGroot();
	void ServerOnRideCancel(float StateIntervalTime);
	void SetRacoonState(ERacoonGrootAbilityState InState);
	void SetSpringArmIgnore(class AGrootCharacter* InGroot, class AMarvelBaseCharacter* OwnChar, bool bIgnore);
	void UnBindDettachDelegates(class AActor* InGroot);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_102361">();
	}
	static class UAbility_102361* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_102361>();
	}
};
static_assert(alignof(UAbility_102361) == 0x000008, "Wrong alignment on UAbility_102361");
static_assert(sizeof(UAbility_102361) == 0x002808, "Wrong size on UAbility_102361");
static_assert(offsetof(UAbility_102361, MarkOnGrootTag) == 0x002710, "Member 'UAbility_102361::MarkOnGrootTag' has a wrong offset!");
static_assert(offsetof(UAbility_102361, OnRaccoonGrootCoopStateChangeDispatcher) == 0x002720, "Member 'UAbility_102361::OnRaccoonGrootCoopStateChangeDispatcher' has a wrong offset!");
static_assert(offsetof(UAbility_102361, CurrentState) == 0x002730, "Member 'UAbility_102361::CurrentState' has a wrong offset!");
static_assert(offsetof(UAbility_102361, bShouldTaskBroadcastEnd) == 0x002731, "Member 'UAbility_102361::bShouldTaskBroadcastEnd' has a wrong offset!");
static_assert(offsetof(UAbility_102361, Groot) == 0x002738, "Member 'UAbility_102361::Groot' has a wrong offset!");
static_assert(offsetof(UAbility_102361, CurrentGameState) == 0x0027D0, "Member 'UAbility_102361::CurrentGameState' has a wrong offset!");
static_assert(offsetof(UAbility_102361, OwningCharacter) == 0x0027D8, "Member 'UAbility_102361::OwningCharacter' has a wrong offset!");
static_assert(offsetof(UAbility_102361, RaccoonChildActor) == 0x0027E0, "Member 'UAbility_102361::RaccoonChildActor' has a wrong offset!");
static_assert(offsetof(UAbility_102361, CoopConfig) == 0x0027E8, "Member 'UAbility_102361::CoopConfig' has a wrong offset!");
static_assert(offsetof(UAbility_102361, RideCancelTask) == 0x0027F8, "Member 'UAbility_102361::RideCancelTask' has a wrong offset!");
static_assert(offsetof(UAbility_102361, InteractiveAbility) == 0x002800, "Member 'UAbility_102361::InteractiveAbility' has a wrong offset!");

// Class Hero_1023.Cue_Ability_Loop_10236101
// 0x0070 (0x0E70 - 0x0E00)
class ACue_Ability_Loop_10236101 final : public AMarvelCueNotify_Ability
{
public:
	float                                         StartRideSoundID;                                  // 0x0E00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StopRideSoundID;                                   // 0x0E04(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelBaseCharacter*                   OwningCharacter;                                   // 0x0E08(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAbility_102361*                        CoopAbility;                                       // 0x0E10(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCameraInterp*                          RidingCameraInterp;                                // 0x0E18(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class AActor*, struct FSpringArmControlHandler> SpringArmHandlers;                                 // 0x0E20(0x0050)(Protected, NativeAccessSpecifierProtected)

public:
	void OnRaccoonGrootCoopStateChange(ERacoonGrootAbilityState InState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Ability_Loop_10236101">();
	}
	static class ACue_Ability_Loop_10236101* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Ability_Loop_10236101>();
	}
};
static_assert(alignof(ACue_Ability_Loop_10236101) == 0x000008, "Wrong alignment on ACue_Ability_Loop_10236101");
static_assert(sizeof(ACue_Ability_Loop_10236101) == 0x000E70, "Wrong size on ACue_Ability_Loop_10236101");
static_assert(offsetof(ACue_Ability_Loop_10236101, StartRideSoundID) == 0x000E00, "Member 'ACue_Ability_Loop_10236101::StartRideSoundID' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10236101, StopRideSoundID) == 0x000E04, "Member 'ACue_Ability_Loop_10236101::StopRideSoundID' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10236101, OwningCharacter) == 0x000E08, "Member 'ACue_Ability_Loop_10236101::OwningCharacter' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10236101, CoopAbility) == 0x000E10, "Member 'ACue_Ability_Loop_10236101::CoopAbility' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10236101, RidingCameraInterp) == 0x000E18, "Member 'ACue_Ability_Loop_10236101::RidingCameraInterp' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10236101, SpringArmHandlers) == 0x000E20, "Member 'ACue_Ability_Loop_10236101::SpringArmHandlers' has a wrong offset!");

// Class Hero_1023.Cue_Ability_Loop_10237101
// 0x0010 (0x0E10 - 0x0E00)
class ACue_Ability_Loop_10237101 final : public AMarvelCueNotify_Ability
{
public:
	class UFXSystemAsset*                         FXAsset;                                           // 0x0E00(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFXSystemComponent*                     FXSystemComponent;                                 // 0x0E08(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Ability_Loop_10237101">();
	}
	static class ACue_Ability_Loop_10237101* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Ability_Loop_10237101>();
	}
};
static_assert(alignof(ACue_Ability_Loop_10237101) == 0x000008, "Wrong alignment on ACue_Ability_Loop_10237101");
static_assert(sizeof(ACue_Ability_Loop_10237101) == 0x000E10, "Wrong size on ACue_Ability_Loop_10237101");
static_assert(offsetof(ACue_Ability_Loop_10237101, FXAsset) == 0x000E00, "Member 'ACue_Ability_Loop_10237101::FXAsset' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10237101, FXSystemComponent) == 0x000E08, "Member 'ACue_Ability_Loop_10237101::FXSystemComponent' has a wrong offset!");

// Class Hero_1023.EpicMomentAction_1023
// 0x0000 (0x0170 - 0x0170)
class UEpicMomentAction_1023 final : public UEpicMomentAction_Treat
{
public:
	void OnSummonerBegin(class AActor* SourceActor, class UMarvelGameplayAbility* SourceAbility, class AActor* Summoned, const struct FMarvelTargetActorGenerateInfo& GenerateInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EpicMomentAction_1023">();
	}
	static class UEpicMomentAction_1023* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEpicMomentAction_1023>();
	}
};
static_assert(alignof(UEpicMomentAction_1023) == 0x000008, "Wrong alignment on UEpicMomentAction_1023");
static_assert(sizeof(UEpicMomentAction_1023) == 0x000170, "Wrong size on UEpicMomentAction_1023");

// Class Hero_1023.RocketRaccoonAnimInstance
// 0x01D0 (0x0AD0 - 0x0900)
class URocketRaccoonAnimInstance final : public UMarvelAnimInstance
{
public:
	float                                         WeaponLength_AO;                                   // 0x0900(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AOTraceInterval;                                   // 0x0904(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TraceLineLength;                                   // 0x0908(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LerpSpeed;                                         // 0x090C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LaunchEndDelay;                                    // 0x0910(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_914[0x4];                                      // 0x0914(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAimIKCameraAimInfo                    CameraAimInfo;                                     // 0x0918(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bIsOnTheWall;                                      // 0x0958(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_959[0x3];                                      // 0x0959(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinAOPitch;                                        // 0x095C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bLaunchStart;                                      // 0x0960(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsLaunchDelayEnd;                                  // 0x0961(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsSlowDown;                                       // 0x0962(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEndsSlowDown;                                     // 0x0963(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LaunchPitch;                                       // 0x0964(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsResultBattling;                                 // 0x0968(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOnGroot;                                          // 0x0969(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOnGrootForward;                                   // 0x096A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOnGrootTurnFromLeft;                              // 0x096B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BlendSpaceYaw;                                     // 0x096C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                TraceResult;                                       // 0x0970(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                ControlRigUpPoint;                                 // 0x0988(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                ControlRigForwardPoint;                            // 0x09A0(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_9B8[0x58];                                     // 0x09B8(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Ignores;                                           // 0x0A10(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A20[0xB0];                                     // 0x0A20(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RocketRaccoonAnimInstance">();
	}
	static class URocketRaccoonAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<URocketRaccoonAnimInstance>();
	}
};
static_assert(alignof(URocketRaccoonAnimInstance) == 0x000010, "Wrong alignment on URocketRaccoonAnimInstance");
static_assert(sizeof(URocketRaccoonAnimInstance) == 0x000AD0, "Wrong size on URocketRaccoonAnimInstance");
static_assert(offsetof(URocketRaccoonAnimInstance, WeaponLength_AO) == 0x000900, "Member 'URocketRaccoonAnimInstance::WeaponLength_AO' has a wrong offset!");
static_assert(offsetof(URocketRaccoonAnimInstance, AOTraceInterval) == 0x000904, "Member 'URocketRaccoonAnimInstance::AOTraceInterval' has a wrong offset!");
static_assert(offsetof(URocketRaccoonAnimInstance, TraceLineLength) == 0x000908, "Member 'URocketRaccoonAnimInstance::TraceLineLength' has a wrong offset!");
static_assert(offsetof(URocketRaccoonAnimInstance, LerpSpeed) == 0x00090C, "Member 'URocketRaccoonAnimInstance::LerpSpeed' has a wrong offset!");
static_assert(offsetof(URocketRaccoonAnimInstance, LaunchEndDelay) == 0x000910, "Member 'URocketRaccoonAnimInstance::LaunchEndDelay' has a wrong offset!");
static_assert(offsetof(URocketRaccoonAnimInstance, CameraAimInfo) == 0x000918, "Member 'URocketRaccoonAnimInstance::CameraAimInfo' has a wrong offset!");
static_assert(offsetof(URocketRaccoonAnimInstance, bIsOnTheWall) == 0x000958, "Member 'URocketRaccoonAnimInstance::bIsOnTheWall' has a wrong offset!");
static_assert(offsetof(URocketRaccoonAnimInstance, MinAOPitch) == 0x00095C, "Member 'URocketRaccoonAnimInstance::MinAOPitch' has a wrong offset!");
static_assert(offsetof(URocketRaccoonAnimInstance, bLaunchStart) == 0x000960, "Member 'URocketRaccoonAnimInstance::bLaunchStart' has a wrong offset!");
static_assert(offsetof(URocketRaccoonAnimInstance, IsLaunchDelayEnd) == 0x000961, "Member 'URocketRaccoonAnimInstance::IsLaunchDelayEnd' has a wrong offset!");
static_assert(offsetof(URocketRaccoonAnimInstance, bIsSlowDown) == 0x000962, "Member 'URocketRaccoonAnimInstance::bIsSlowDown' has a wrong offset!");
static_assert(offsetof(URocketRaccoonAnimInstance, bEndsSlowDown) == 0x000963, "Member 'URocketRaccoonAnimInstance::bEndsSlowDown' has a wrong offset!");
static_assert(offsetof(URocketRaccoonAnimInstance, LaunchPitch) == 0x000964, "Member 'URocketRaccoonAnimInstance::LaunchPitch' has a wrong offset!");
static_assert(offsetof(URocketRaccoonAnimInstance, bIsResultBattling) == 0x000968, "Member 'URocketRaccoonAnimInstance::bIsResultBattling' has a wrong offset!");
static_assert(offsetof(URocketRaccoonAnimInstance, bOnGroot) == 0x000969, "Member 'URocketRaccoonAnimInstance::bOnGroot' has a wrong offset!");
static_assert(offsetof(URocketRaccoonAnimInstance, bOnGrootForward) == 0x00096A, "Member 'URocketRaccoonAnimInstance::bOnGrootForward' has a wrong offset!");
static_assert(offsetof(URocketRaccoonAnimInstance, bOnGrootTurnFromLeft) == 0x00096B, "Member 'URocketRaccoonAnimInstance::bOnGrootTurnFromLeft' has a wrong offset!");
static_assert(offsetof(URocketRaccoonAnimInstance, BlendSpaceYaw) == 0x00096C, "Member 'URocketRaccoonAnimInstance::BlendSpaceYaw' has a wrong offset!");
static_assert(offsetof(URocketRaccoonAnimInstance, TraceResult) == 0x000970, "Member 'URocketRaccoonAnimInstance::TraceResult' has a wrong offset!");
static_assert(offsetof(URocketRaccoonAnimInstance, ControlRigUpPoint) == 0x000988, "Member 'URocketRaccoonAnimInstance::ControlRigUpPoint' has a wrong offset!");
static_assert(offsetof(URocketRaccoonAnimInstance, ControlRigForwardPoint) == 0x0009A0, "Member 'URocketRaccoonAnimInstance::ControlRigForwardPoint' has a wrong offset!");
static_assert(offsetof(URocketRaccoonAnimInstance, Ignores) == 0x000A10, "Member 'URocketRaccoonAnimInstance::Ignores' has a wrong offset!");

// Class Hero_1023.RocketRaccoonWeaponAnimInstance
// 0x0010 (0x0910 - 0x0900)
class URocketRaccoonWeaponAnimInstance final : public UMarvelAnimInstance
{
public:
	bool                                          bStopUpdateWhenNotViewTarget;                      // 0x0900(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_901[0x3];                                      // 0x0901(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WeaponState_102371;                                // 0x0904(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_908[0x8];                                      // 0x0908(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RocketRaccoonWeaponAnimInstance">();
	}
	static class URocketRaccoonWeaponAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<URocketRaccoonWeaponAnimInstance>();
	}
};
static_assert(alignof(URocketRaccoonWeaponAnimInstance) == 0x000010, "Wrong alignment on URocketRaccoonWeaponAnimInstance");
static_assert(sizeof(URocketRaccoonWeaponAnimInstance) == 0x000910, "Wrong size on URocketRaccoonWeaponAnimInstance");
static_assert(offsetof(URocketRaccoonWeaponAnimInstance, bStopUpdateWhenNotViewTarget) == 0x000900, "Member 'URocketRaccoonWeaponAnimInstance::bStopUpdateWhenNotViewTarget' has a wrong offset!");
static_assert(offsetof(URocketRaccoonWeaponAnimInstance, WeaponState_102371) == 0x000904, "Member 'URocketRaccoonWeaponAnimInstance::WeaponState_102371' has a wrong offset!");

// Class Hero_1023.SpawnerDownMeshAnimInstance_102341
// 0x0000 (0x0420 - 0x0420)
class USpawnerDownMeshAnimInstance_102341 final : public UAnimInstance
{
public:
	bool                                          bDownMeshActive;                                   // 0x0418(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_419[0x7];                                      // 0x0419(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpawnerDownMeshAnimInstance_102341">();
	}
	static class USpawnerDownMeshAnimInstance_102341* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpawnerDownMeshAnimInstance_102341>();
	}
};
static_assert(alignof(USpawnerDownMeshAnimInstance_102341) == 0x000010, "Wrong alignment on USpawnerDownMeshAnimInstance_102341");
static_assert(sizeof(USpawnerDownMeshAnimInstance_102341) == 0x000420, "Wrong size on USpawnerDownMeshAnimInstance_102341");
static_assert(offsetof(USpawnerDownMeshAnimInstance_102341, bDownMeshActive) == 0x000418, "Member 'USpawnerDownMeshAnimInstance_102341::bDownMeshActive' has a wrong offset!");

// Class Hero_1023.SpawnerUpMeshAnimInstance_102341
// 0x0000 (0x0420 - 0x0420)
class USpawnerUpMeshAnimInstance_102341 final : public UAnimInstance
{
public:
	bool                                          bRespawning;                                       // 0x0418(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_419[0x7];                                      // 0x0419(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpawnerUpMeshAnimInstance_102341">();
	}
	static class USpawnerUpMeshAnimInstance_102341* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpawnerUpMeshAnimInstance_102341>();
	}
};
static_assert(alignof(USpawnerUpMeshAnimInstance_102341) == 0x000010, "Wrong alignment on USpawnerUpMeshAnimInstance_102341");
static_assert(sizeof(USpawnerUpMeshAnimInstance_102341) == 0x000420, "Wrong size on USpawnerUpMeshAnimInstance_102341");
static_assert(offsetof(USpawnerUpMeshAnimInstance_102341, bRespawning) == 0x000418, "Member 'USpawnerUpMeshAnimInstance_102341::bRespawning' has a wrong offset!");

// Class Hero_1023.RocketRaccoonChildActor
// 0x0020 (0x0A60 - 0x0A40)
class ARocketRaccoonChildActor final : public AMarvelCharacterChildActor
{
public:
	bool                                          bIsAbilityBattling;                                // 0x0A40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A41[0x3];                                      // 0x0A41(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PitchLerpSpeed;                                    // 0x0A44(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RollLerpSpeed;                                     // 0x0A48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchLimitRange;                                   // 0x0A4C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RollLimitRange;                                    // 0x0A50(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A54[0x4];                                      // 0x0A54(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARocketRaccoonCharacter*                Raccoon;                                           // 0x0A58(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RocketRaccoonChildActor">();
	}
	static class ARocketRaccoonChildActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARocketRaccoonChildActor>();
	}
};
static_assert(alignof(ARocketRaccoonChildActor) == 0x000008, "Wrong alignment on ARocketRaccoonChildActor");
static_assert(sizeof(ARocketRaccoonChildActor) == 0x000A60, "Wrong size on ARocketRaccoonChildActor");
static_assert(offsetof(ARocketRaccoonChildActor, bIsAbilityBattling) == 0x000A40, "Member 'ARocketRaccoonChildActor::bIsAbilityBattling' has a wrong offset!");
static_assert(offsetof(ARocketRaccoonChildActor, PitchLerpSpeed) == 0x000A44, "Member 'ARocketRaccoonChildActor::PitchLerpSpeed' has a wrong offset!");
static_assert(offsetof(ARocketRaccoonChildActor, RollLerpSpeed) == 0x000A48, "Member 'ARocketRaccoonChildActor::RollLerpSpeed' has a wrong offset!");
static_assert(offsetof(ARocketRaccoonChildActor, PitchLimitRange) == 0x000A4C, "Member 'ARocketRaccoonChildActor::PitchLimitRange' has a wrong offset!");
static_assert(offsetof(ARocketRaccoonChildActor, RollLimitRange) == 0x000A50, "Member 'ARocketRaccoonChildActor::RollLimitRange' has a wrong offset!");
static_assert(offsetof(ARocketRaccoonChildActor, Raccoon) == 0x000A58, "Member 'ARocketRaccoonChildActor::Raccoon' has a wrong offset!");

// Class Hero_1023.RideOnGrootManagementComponent_Rocket
// 0x0000 (0x0250 - 0x0250)
class URideOnGrootManagementComponent_Rocket final : public URideOnCharacterManagementComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RideOnGrootManagementComponent_Rocket">();
	}
	static class URideOnGrootManagementComponent_Rocket* GetDefaultObj()
	{
		return GetDefaultObjImpl<URideOnGrootManagementComponent_Rocket>();
	}
};
static_assert(alignof(URideOnGrootManagementComponent_Rocket) == 0x000008, "Wrong alignment on URideOnGrootManagementComponent_Rocket");
static_assert(sizeof(URideOnGrootManagementComponent_Rocket) == 0x000250, "Wrong size on URideOnGrootManagementComponent_Rocket");

// Class Hero_1023.RocketRaccoonCharacter
// 0x0060 (0x1820 - 0x17C0)
class ARocketRaccoonCharacter : public AMarvelBaseCharacter
{
public:
	class URideOnGrootManagementComponent_Rocket* RideOnGrootManagementComponent;                    // 0x17B8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URocketRaccoonMoveLogicBaseComponent*   RocketRaccoonMoveLogic;                            // 0x17C0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ERushState_102331                             RushState;                                         // 0x17C8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAeroState;                                        // 0x17C9(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17CA[0x56];                                    // 0x17CA(0x0056)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class ARocketRaccoonCharacter* GetDefaultObject();
	class URocketRaccoonMoveLogicBaseComponent* GetRocketRocconMoveLogic();
	class URocketRaccoonMovementComponent* GetRocketRocconMovement();
	void ResetLimitControlRotaion();
	void SetLimitControlRotation(const struct FVector2D& LimitPitch, const struct FVector2D& LimitYaw, const struct FVector2D& LimitRoll);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RocketRaccoonCharacter">();
	}
	static class ARocketRaccoonCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARocketRaccoonCharacter>();
	}
};
static_assert(alignof(ARocketRaccoonCharacter) == 0x000010, "Wrong alignment on ARocketRaccoonCharacter");
static_assert(sizeof(ARocketRaccoonCharacter) == 0x001820, "Wrong size on ARocketRaccoonCharacter");
static_assert(offsetof(ARocketRaccoonCharacter, RideOnGrootManagementComponent) == 0x0017B8, "Member 'ARocketRaccoonCharacter::RideOnGrootManagementComponent' has a wrong offset!");
static_assert(offsetof(ARocketRaccoonCharacter, RocketRaccoonMoveLogic) == 0x0017C0, "Member 'ARocketRaccoonCharacter::RocketRaccoonMoveLogic' has a wrong offset!");
static_assert(offsetof(ARocketRaccoonCharacter, RushState) == 0x0017C8, "Member 'ARocketRaccoonCharacter::RushState' has a wrong offset!");
static_assert(offsetof(ARocketRaccoonCharacter, bAeroState) == 0x0017C9, "Member 'ARocketRaccoonCharacter::bAeroState' has a wrong offset!");

// Class Hero_1023.RocketRaccoonMoveLogicBaseComponent
// 0x0010 (0x0400 - 0x03F0)
class URocketRaccoonMoveLogicBaseComponent final : public UMarvelMoveLogicBaseComponent
{
public:
	uint8                                         Pad_3F0[0x8];                                      // 0x03F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bAllDirectionWallRun;                              // 0x03F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTurnInput;                                        // 0x03F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3FA[0x6];                                      // 0x03FA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RocketRaccoonMoveLogicBaseComponent">();
	}
	static class URocketRaccoonMoveLogicBaseComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<URocketRaccoonMoveLogicBaseComponent>();
	}
};
static_assert(alignof(URocketRaccoonMoveLogicBaseComponent) == 0x000008, "Wrong alignment on URocketRaccoonMoveLogicBaseComponent");
static_assert(sizeof(URocketRaccoonMoveLogicBaseComponent) == 0x000400, "Wrong size on URocketRaccoonMoveLogicBaseComponent");
static_assert(offsetof(URocketRaccoonMoveLogicBaseComponent, bAllDirectionWallRun) == 0x0003F8, "Member 'URocketRaccoonMoveLogicBaseComponent::bAllDirectionWallRun' has a wrong offset!");
static_assert(offsetof(URocketRaccoonMoveLogicBaseComponent, bTurnInput) == 0x0003F9, "Member 'URocketRaccoonMoveLogicBaseComponent::bTurnInput' has a wrong offset!");

// Class Hero_1023.RocketRaccoonMovementComponent
// 0x0010 (0x2EF0 - 0x2EE0)
class URocketRaccoonMovementComponent final : public UCharacterWallRunningComponent
{
public:
	bool                                          bAllDirectionWallRun;                              // 0x2ED8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2ED9[0x7];                                     // 0x2ED9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARocketRaccoonCharacter*                OwnerCharacter;                                    // 0x2EE0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EWallRunSide                                  WallRunSide;                                       // 0x2EE8(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EWallRunCapsuleShape                          WantCapsuleShrinkShape;                            // 0x2EE9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EWallRunCapsuleShape                          LastCapsuleShrinkShape;                            // 0x2EEA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EWallRunCapsuleShape                          CapsuleShrinkShape;                                // 0x2EEB(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2EEC[0x4];                                     // 0x2EEC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool IsLeftWall();
	bool IsWallRun();
	void OnRep_CapsuleShrinkShape();
	void OnRep_WallRunSide();
	void SetMeshRelativeLocationAndRotation(const struct FVector& RelativeLocation, const struct FRotator& RelativeRotation);
	void WantCapsule(EWallRunCapsuleShape _CapsuleShrinkShape);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RocketRaccoonMovementComponent">();
	}
	static class URocketRaccoonMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<URocketRaccoonMovementComponent>();
	}
};
static_assert(alignof(URocketRaccoonMovementComponent) == 0x000010, "Wrong alignment on URocketRaccoonMovementComponent");
static_assert(sizeof(URocketRaccoonMovementComponent) == 0x002EF0, "Wrong size on URocketRaccoonMovementComponent");
static_assert(offsetof(URocketRaccoonMovementComponent, bAllDirectionWallRun) == 0x002ED8, "Member 'URocketRaccoonMovementComponent::bAllDirectionWallRun' has a wrong offset!");
static_assert(offsetof(URocketRaccoonMovementComponent, OwnerCharacter) == 0x002EE0, "Member 'URocketRaccoonMovementComponent::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(URocketRaccoonMovementComponent, WallRunSide) == 0x002EE8, "Member 'URocketRaccoonMovementComponent::WallRunSide' has a wrong offset!");
static_assert(offsetof(URocketRaccoonMovementComponent, WantCapsuleShrinkShape) == 0x002EE9, "Member 'URocketRaccoonMovementComponent::WantCapsuleShrinkShape' has a wrong offset!");
static_assert(offsetof(URocketRaccoonMovementComponent, LastCapsuleShrinkShape) == 0x002EEA, "Member 'URocketRaccoonMovementComponent::LastCapsuleShrinkShape' has a wrong offset!");
static_assert(offsetof(URocketRaccoonMovementComponent, CapsuleShrinkShape) == 0x002EEB, "Member 'URocketRaccoonMovementComponent::CapsuleShrinkShape' has a wrong offset!");

// Class Hero_1023.Cue_Scope_Loop_WithAudioBeforeEnd
// 0x0020 (0x0D40 - 0x0D20)
class ACue_Scope_Loop_WithAudioBeforeEnd final : public AMarvelCueNotify_Scope
{
public:
	int32                                         EarlyEndAudioID;                                   // 0x0D20(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EndAudioEarlyTime;                                 // 0x0D24(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D28[0x18];                                     // 0x0D28(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Scope_Loop_WithAudioBeforeEnd">();
	}
	static class ACue_Scope_Loop_WithAudioBeforeEnd* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Scope_Loop_WithAudioBeforeEnd>();
	}
};
static_assert(alignof(ACue_Scope_Loop_WithAudioBeforeEnd) == 0x000008, "Wrong alignment on ACue_Scope_Loop_WithAudioBeforeEnd");
static_assert(sizeof(ACue_Scope_Loop_WithAudioBeforeEnd) == 0x000D40, "Wrong size on ACue_Scope_Loop_WithAudioBeforeEnd");
static_assert(offsetof(ACue_Scope_Loop_WithAudioBeforeEnd, EarlyEndAudioID) == 0x000D20, "Member 'ACue_Scope_Loop_WithAudioBeforeEnd::EarlyEndAudioID' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_WithAudioBeforeEnd, EndAudioEarlyTime) == 0x000D24, "Member 'ACue_Scope_Loop_WithAudioBeforeEnd::EndAudioEarlyTime' has a wrong offset!");

}

