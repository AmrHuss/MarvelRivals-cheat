#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Hero_1043

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Marvel_structs.hpp"
#include "Marvel_classes.hpp"
#include "Hero_1043_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class Hero_1043.Config_104321
// 0x0BD8 (0x0C98 - 0x00C0)
class UConfig_104321 final : public UMarvelAbilityConfig_DoubleJump
{
public:
	struct FGameplayTagContainer                  FlySkillTagContainer;                              // 0x00C0(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDashAbilityInfo                       UltimateDashInfo;                                  // 0x0128(0x0B70)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_104321">();
	}
	static class UConfig_104321* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_104321>();
	}
};
static_assert(alignof(UConfig_104321) == 0x000008, "Wrong alignment on UConfig_104321");
static_assert(sizeof(UConfig_104321) == 0x000C98, "Wrong size on UConfig_104321");
static_assert(offsetof(UConfig_104321, FlySkillTagContainer) == 0x0000C0, "Member 'UConfig_104321::FlySkillTagContainer' has a wrong offset!");
static_assert(offsetof(UConfig_104321, UltimateDashInfo) == 0x000128, "Member 'UConfig_104321::UltimateDashInfo' has a wrong offset!");

// Class Hero_1043.Ability_104321
// 0x0018 (0x2660 - 0x2648)
class UAbility_104321 : public UMarvelAbility_DoubleJump
{
public:
	class UMarvelAbilityTask_Dash*                DashAbilityTask;                                   // 0x2648(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UConfig_104321*                         MyConfig;                                          // 0x2650(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelAbilityTask_PlayMontageAndWaitForEvent* PlayMontageTask;                                   // 0x2658(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnUltimateDashFinish(EDashStopReason Reason);
	void ServerSetCharacterInput(const struct FVector& CharInput);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_104321">();
	}
	static class UAbility_104321* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_104321>();
	}
};
static_assert(alignof(UAbility_104321) == 0x000008, "Wrong alignment on UAbility_104321");
static_assert(sizeof(UAbility_104321) == 0x002660, "Wrong size on UAbility_104321");
static_assert(offsetof(UAbility_104321, DashAbilityTask) == 0x002648, "Member 'UAbility_104321::DashAbilityTask' has a wrong offset!");
static_assert(offsetof(UAbility_104321, MyConfig) == 0x002650, "Member 'UAbility_104321::MyConfig' has a wrong offset!");
static_assert(offsetof(UAbility_104321, PlayMontageTask) == 0x002658, "Member 'UAbility_104321::PlayMontageTask' has a wrong offset!");

// Class Hero_1043.Cue_AbilityLoop_10432101
// 0x0248 (0x1048 - 0x0E00)
class ACue_AbilityLoop_10432101 final : public AMarvelCueNotify_Ability
{
public:
	bool                                          bIsFollow;                                         // 0x0E00(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPlayAnim;                                       // 0x0E01(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E02[0x6];                                      // 0x0E02(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlendSpace*                            ShadowBlendSpace2D;                                // 0x0E08(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          ShadowBlendSpace1D;                                // 0x0E10(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShadowLODLevel;                                    // 0x0E18(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1C[0x4];                                      // 0x0E1C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            ShadowDisCurve;                                    // 0x0E20(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LaunchOffsetDistance;                              // 0x0E28(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E2C[0x4];                                      // 0x0E2C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 ShadowGenerateTimeListLR;                          // 0x0E30(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 ShadowAnimStartTimeOffsetListLR;                   // 0x0E40(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 ShadowOpacitiesLR;                                 // 0x0E50(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          LeftWeaponShadowMesh;                              // 0x0E60(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LeftSocketName;                                    // 0x0E68(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E74[0x4];                                      // 0x0E74(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     LeftWeaponMaterial;                                // 0x0E78(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          RightWeaponShadowMesh;                             // 0x0E80(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RightSocketName;                                   // 0x0E88(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E94[0x4];                                      // 0x0E94(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     RightWeaponMaterial;                               // 0x0E98(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 ShadowOpacities;                                   // 0x0EA0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIsOpacityChange;                                  // 0x0EB0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EB1[0x7];                                      // 0x0EB1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFXSystemAsset*                         VelocityLineFX;                                    // 0x0EB8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AngleName;                                         // 0x0EC0(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_ECC[0x4];                                      // 0x0ECC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 MaterialAngle;                                     // 0x0ED0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 ShadowGenerateTimeList;                            // 0x0EE0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 ShadowAnimStartTimeOffsetList;                     // 0x0EF0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          ShadowMesh;                                        // 0x0F00(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShadowNum;                                         // 0x0F08(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRenderCustomDepthPass;                           // 0x0F0C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0D[0x3];                                      // 0x0F0D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           ShadowMontage;                                     // 0x0F10(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, class UMaterialInterface*>        MaterialDict;                                      // 0x0F18(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<int32, class UMaterialInterface*>        UltimateMaterialDict;                              // 0x0F68(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FShadowMesh>                    ShadowMeshComponents;                              // 0x0FB8(0x0010)(ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC8[0x80];                                     // 0x0FC8(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CreateCustomMaterial(class USkeletalMeshComponent* MeshComponent, TMap<int32, class UMaterialInterface*>* CurrentMaterialDict);
	void OnTagChanged(const struct FGameplayTag& TagUpdated, bool TagExists);
	void SetMeshPara(class USkeletalMeshComponent* MeshComponent, class USkeletalMesh* SkeletalMesh);
	void ShowShadowMesh(const struct FShadowMesh& ShadowMeshComponent, int32 Index_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_AbilityLoop_10432101">();
	}
	static class ACue_AbilityLoop_10432101* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_AbilityLoop_10432101>();
	}
};
static_assert(alignof(ACue_AbilityLoop_10432101) == 0x000008, "Wrong alignment on ACue_AbilityLoop_10432101");
static_assert(sizeof(ACue_AbilityLoop_10432101) == 0x001048, "Wrong size on ACue_AbilityLoop_10432101");
static_assert(offsetof(ACue_AbilityLoop_10432101, bIsFollow) == 0x000E00, "Member 'ACue_AbilityLoop_10432101::bIsFollow' has a wrong offset!");
static_assert(offsetof(ACue_AbilityLoop_10432101, bIsPlayAnim) == 0x000E01, "Member 'ACue_AbilityLoop_10432101::bIsPlayAnim' has a wrong offset!");
static_assert(offsetof(ACue_AbilityLoop_10432101, ShadowBlendSpace2D) == 0x000E08, "Member 'ACue_AbilityLoop_10432101::ShadowBlendSpace2D' has a wrong offset!");
static_assert(offsetof(ACue_AbilityLoop_10432101, ShadowBlendSpace1D) == 0x000E10, "Member 'ACue_AbilityLoop_10432101::ShadowBlendSpace1D' has a wrong offset!");
static_assert(offsetof(ACue_AbilityLoop_10432101, ShadowLODLevel) == 0x000E18, "Member 'ACue_AbilityLoop_10432101::ShadowLODLevel' has a wrong offset!");
static_assert(offsetof(ACue_AbilityLoop_10432101, ShadowDisCurve) == 0x000E20, "Member 'ACue_AbilityLoop_10432101::ShadowDisCurve' has a wrong offset!");
static_assert(offsetof(ACue_AbilityLoop_10432101, LaunchOffsetDistance) == 0x000E28, "Member 'ACue_AbilityLoop_10432101::LaunchOffsetDistance' has a wrong offset!");
static_assert(offsetof(ACue_AbilityLoop_10432101, ShadowGenerateTimeListLR) == 0x000E30, "Member 'ACue_AbilityLoop_10432101::ShadowGenerateTimeListLR' has a wrong offset!");
static_assert(offsetof(ACue_AbilityLoop_10432101, ShadowAnimStartTimeOffsetListLR) == 0x000E40, "Member 'ACue_AbilityLoop_10432101::ShadowAnimStartTimeOffsetListLR' has a wrong offset!");
static_assert(offsetof(ACue_AbilityLoop_10432101, ShadowOpacitiesLR) == 0x000E50, "Member 'ACue_AbilityLoop_10432101::ShadowOpacitiesLR' has a wrong offset!");
static_assert(offsetof(ACue_AbilityLoop_10432101, LeftWeaponShadowMesh) == 0x000E60, "Member 'ACue_AbilityLoop_10432101::LeftWeaponShadowMesh' has a wrong offset!");
static_assert(offsetof(ACue_AbilityLoop_10432101, LeftSocketName) == 0x000E68, "Member 'ACue_AbilityLoop_10432101::LeftSocketName' has a wrong offset!");
static_assert(offsetof(ACue_AbilityLoop_10432101, LeftWeaponMaterial) == 0x000E78, "Member 'ACue_AbilityLoop_10432101::LeftWeaponMaterial' has a wrong offset!");
static_assert(offsetof(ACue_AbilityLoop_10432101, RightWeaponShadowMesh) == 0x000E80, "Member 'ACue_AbilityLoop_10432101::RightWeaponShadowMesh' has a wrong offset!");
static_assert(offsetof(ACue_AbilityLoop_10432101, RightSocketName) == 0x000E88, "Member 'ACue_AbilityLoop_10432101::RightSocketName' has a wrong offset!");
static_assert(offsetof(ACue_AbilityLoop_10432101, RightWeaponMaterial) == 0x000E98, "Member 'ACue_AbilityLoop_10432101::RightWeaponMaterial' has a wrong offset!");
static_assert(offsetof(ACue_AbilityLoop_10432101, ShadowOpacities) == 0x000EA0, "Member 'ACue_AbilityLoop_10432101::ShadowOpacities' has a wrong offset!");
static_assert(offsetof(ACue_AbilityLoop_10432101, bIsOpacityChange) == 0x000EB0, "Member 'ACue_AbilityLoop_10432101::bIsOpacityChange' has a wrong offset!");
static_assert(offsetof(ACue_AbilityLoop_10432101, VelocityLineFX) == 0x000EB8, "Member 'ACue_AbilityLoop_10432101::VelocityLineFX' has a wrong offset!");
static_assert(offsetof(ACue_AbilityLoop_10432101, AngleName) == 0x000EC0, "Member 'ACue_AbilityLoop_10432101::AngleName' has a wrong offset!");
static_assert(offsetof(ACue_AbilityLoop_10432101, MaterialAngle) == 0x000ED0, "Member 'ACue_AbilityLoop_10432101::MaterialAngle' has a wrong offset!");
static_assert(offsetof(ACue_AbilityLoop_10432101, ShadowGenerateTimeList) == 0x000EE0, "Member 'ACue_AbilityLoop_10432101::ShadowGenerateTimeList' has a wrong offset!");
static_assert(offsetof(ACue_AbilityLoop_10432101, ShadowAnimStartTimeOffsetList) == 0x000EF0, "Member 'ACue_AbilityLoop_10432101::ShadowAnimStartTimeOffsetList' has a wrong offset!");
static_assert(offsetof(ACue_AbilityLoop_10432101, ShadowMesh) == 0x000F00, "Member 'ACue_AbilityLoop_10432101::ShadowMesh' has a wrong offset!");
static_assert(offsetof(ACue_AbilityLoop_10432101, ShadowNum) == 0x000F08, "Member 'ACue_AbilityLoop_10432101::ShadowNum' has a wrong offset!");
static_assert(offsetof(ACue_AbilityLoop_10432101, IsRenderCustomDepthPass) == 0x000F0C, "Member 'ACue_AbilityLoop_10432101::IsRenderCustomDepthPass' has a wrong offset!");
static_assert(offsetof(ACue_AbilityLoop_10432101, ShadowMontage) == 0x000F10, "Member 'ACue_AbilityLoop_10432101::ShadowMontage' has a wrong offset!");
static_assert(offsetof(ACue_AbilityLoop_10432101, MaterialDict) == 0x000F18, "Member 'ACue_AbilityLoop_10432101::MaterialDict' has a wrong offset!");
static_assert(offsetof(ACue_AbilityLoop_10432101, UltimateMaterialDict) == 0x000F68, "Member 'ACue_AbilityLoop_10432101::UltimateMaterialDict' has a wrong offset!");
static_assert(offsetof(ACue_AbilityLoop_10432101, ShadowMeshComponents) == 0x000FB8, "Member 'ACue_AbilityLoop_10432101::ShadowMeshComponents' has a wrong offset!");

// Class Hero_1043.Ability_104331
// 0x00B0 (0x5B40 - 0x5A90)
class UAbility_104331 : public UMarvelAeroBaseAbility
{
public:
	uint8                                         Pad_5A90[0xB0];                                    // 0x5A90(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnMoveBlock(const struct FHitResult& Impact);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_104331">();
	}
	static class UAbility_104331* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_104331>();
	}
};
static_assert(alignof(UAbility_104331) == 0x000010, "Wrong alignment on UAbility_104331");
static_assert(sizeof(UAbility_104331) == 0x005B40, "Wrong size on UAbility_104331");

// Class Hero_1043.Cue_Ability_Loop_10433101
// 0x0010 (0x0E10 - 0x0E00)
class ACue_Ability_Loop_10433101 final : public AMarvelCueNotify_Ability
{
public:
	class UNiagaraComponent*                      VelocityLineFX;                                    // 0x0E00(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinVelocity;                                       // 0x0E08(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E0C[0x4];                                      // 0x0E0C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Ability_Loop_10433101">();
	}
	static class ACue_Ability_Loop_10433101* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Ability_Loop_10433101>();
	}
};
static_assert(alignof(ACue_Ability_Loop_10433101) == 0x000008, "Wrong alignment on ACue_Ability_Loop_10433101");
static_assert(sizeof(ACue_Ability_Loop_10433101) == 0x000E10, "Wrong size on ACue_Ability_Loop_10433101");
static_assert(offsetof(ACue_Ability_Loop_10433101, VelocityLineFX) == 0x000E00, "Member 'ACue_Ability_Loop_10433101::VelocityLineFX' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10433101, MinVelocity) == 0x000E08, "Member 'ACue_Ability_Loop_10433101::MinVelocity' has a wrong offset!");

// Class Hero_1043.Config_104342
// 0x1088 (0x1140 - 0x00B8)
class UConfig_104342 final : public UConfig_105
{
public:
	TArray<int32>                                 LeftFireModeIndexes;                               // 0x00B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<int32>                                 RightFireModeIndexes;                              // 0x00C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSelectTaskParam                       AimSelectParam;                                    // 0x00E0(0x1040)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FName                                   HitChest;                                          // 0x1120(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoAimChangeTime;                                 // 0x112C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAimSpecialConfig>              AimSpecialConfigArray;                             // 0x1130(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_104342">();
	}
	static class UConfig_104342* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_104342>();
	}
};
static_assert(alignof(UConfig_104342) == 0x000010, "Wrong alignment on UConfig_104342");
static_assert(sizeof(UConfig_104342) == 0x001140, "Wrong size on UConfig_104342");
static_assert(offsetof(UConfig_104342, LeftFireModeIndexes) == 0x0000B8, "Member 'UConfig_104342::LeftFireModeIndexes' has a wrong offset!");
static_assert(offsetof(UConfig_104342, RightFireModeIndexes) == 0x0000C8, "Member 'UConfig_104342::RightFireModeIndexes' has a wrong offset!");
static_assert(offsetof(UConfig_104342, AimSelectParam) == 0x0000E0, "Member 'UConfig_104342::AimSelectParam' has a wrong offset!");
static_assert(offsetof(UConfig_104342, HitChest) == 0x001120, "Member 'UConfig_104342::HitChest' has a wrong offset!");
static_assert(offsetof(UConfig_104342, AutoAimChangeTime) == 0x00112C, "Member 'UConfig_104342::AutoAimChangeTime' has a wrong offset!");
static_assert(offsetof(UConfig_104342, AimSpecialConfigArray) == 0x001130, "Member 'UConfig_104342::AimSpecialConfigArray' has a wrong offset!");

// Class Hero_1043.Ability_104342
// 0x0060 (0x25F8 - 0x2598)
class UAbility_104342 : public UAbility_105
{
public:
	uint8                                         Pad_2598[0x18];                                    // 0x2598(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UConfig_104342*                         Config;                                            // 0x25B0(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 ActiveTarget;                                      // 0x25B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AimSelectTime;                                     // 0x25C0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_25C4[0x4];                                     // 0x25C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelAbilityTask_SelectTarget*        SelectTask;                                        // 0x25C8(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_25D0[0x28];                                    // 0x25D0(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FSelectTaskResult GetTarget();
	void OnKillOtherCall(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_104342">();
	}
	static class UAbility_104342* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_104342>();
	}
};
static_assert(alignof(UAbility_104342) == 0x000008, "Wrong alignment on UAbility_104342");
static_assert(sizeof(UAbility_104342) == 0x0025F8, "Wrong size on UAbility_104342");
static_assert(offsetof(UAbility_104342, Config) == 0x0025B0, "Member 'UAbility_104342::Config' has a wrong offset!");
static_assert(offsetof(UAbility_104342, ActiveTarget) == 0x0025B8, "Member 'UAbility_104342::ActiveTarget' has a wrong offset!");
static_assert(offsetof(UAbility_104342, AimSelectTime) == 0x0025C0, "Member 'UAbility_104342::AimSelectTime' has a wrong offset!");
static_assert(offsetof(UAbility_104342, SelectTask) == 0x0025C8, "Member 'UAbility_104342::SelectTask' has a wrong offset!");

// Class Hero_1043.Cue_Ability_Loop_10434101
// 0x00C0 (0x0EC0 - 0x0E00)
class ACue_Ability_Loop_10434101 final : public AMarvelCueNotify_Ability
{
public:
	TArray<struct FMyMaterialParameter>           NormalChangeMaterialArray;                         // 0x0E00(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMyMaterialParameter>           ChangeMaterialArray;                               // 0x0E10(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         BeginHideMaterialTime;                             // 0x0E20(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BeginShowMaterialTime;                             // 0x0E24(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndHideMaterialTime;                               // 0x0E28(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndShowMaterialTime;                               // 0x0E2C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           HideMaterialSlotNameArray;                         // 0x0E30(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ShowMaterialSlotNameArray;                         // 0x0E40(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   PlaybackSlot;                                      // 0x0E50(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlaybackParaName;                                  // 0x0E5C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCueDateActive;                                   // 0x0E68(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCueDateRemove;                                   // 0x0E78(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_E88[0x28];                                     // 0x0E88(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 OwnerMesh;                                         // 0x0EB0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AMarvelBaseCharacter*                   OwnerChar;                                         // 0x0EB8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnTagChanged(const struct FGameplayTag& TagUpdated, bool TagExists);
	void SetMaterialChangeTimer(float ChangeTime, TArray<class FName>* MaterialSlotNameArray, bool NewState);
	void SetMeshMaterials(TArray<class FName>* MaterialSlotNameArray, bool NewState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Ability_Loop_10434101">();
	}
	static class ACue_Ability_Loop_10434101* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Ability_Loop_10434101>();
	}
};
static_assert(alignof(ACue_Ability_Loop_10434101) == 0x000008, "Wrong alignment on ACue_Ability_Loop_10434101");
static_assert(sizeof(ACue_Ability_Loop_10434101) == 0x000EC0, "Wrong size on ACue_Ability_Loop_10434101");
static_assert(offsetof(ACue_Ability_Loop_10434101, NormalChangeMaterialArray) == 0x000E00, "Member 'ACue_Ability_Loop_10434101::NormalChangeMaterialArray' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10434101, ChangeMaterialArray) == 0x000E10, "Member 'ACue_Ability_Loop_10434101::ChangeMaterialArray' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10434101, BeginHideMaterialTime) == 0x000E20, "Member 'ACue_Ability_Loop_10434101::BeginHideMaterialTime' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10434101, BeginShowMaterialTime) == 0x000E24, "Member 'ACue_Ability_Loop_10434101::BeginShowMaterialTime' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10434101, EndHideMaterialTime) == 0x000E28, "Member 'ACue_Ability_Loop_10434101::EndHideMaterialTime' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10434101, EndShowMaterialTime) == 0x000E2C, "Member 'ACue_Ability_Loop_10434101::EndShowMaterialTime' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10434101, HideMaterialSlotNameArray) == 0x000E30, "Member 'ACue_Ability_Loop_10434101::HideMaterialSlotNameArray' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10434101, ShowMaterialSlotNameArray) == 0x000E40, "Member 'ACue_Ability_Loop_10434101::ShowMaterialSlotNameArray' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10434101, PlaybackSlot) == 0x000E50, "Member 'ACue_Ability_Loop_10434101::PlaybackSlot' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10434101, PlaybackParaName) == 0x000E5C, "Member 'ACue_Ability_Loop_10434101::PlaybackParaName' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10434101, OnCueDateActive) == 0x000E68, "Member 'ACue_Ability_Loop_10434101::OnCueDateActive' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10434101, OnCueDateRemove) == 0x000E78, "Member 'ACue_Ability_Loop_10434101::OnCueDateRemove' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10434101, OwnerMesh) == 0x000EB0, "Member 'ACue_Ability_Loop_10434101::OwnerMesh' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10434101, OwnerChar) == 0x000EB8, "Member 'ACue_Ability_Loop_10434101::OwnerChar' has a wrong offset!");

// Class Hero_1043.Ability_Glide
// 0x0080 (0x25D8 - 0x2558)
class UAbility_Glide final : public UAbility_108
{
public:
	class UMarvelAbilityTask_ApplyRootMotionGlide* GlideTask;                                         // 0x2558(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGlideCameraModifier*                   GlideCameraModifier;                               // 0x2560(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2568[0x70];                                    // 0x2568(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyCapsuleChange();
	void CreateAndApplyGlideTask();
	void CreateAndEnableCameraModifier();
	void EndGlideTask();
	void OnMoveBlock(const struct FHitResult& Impact);
	void OnMovementInputs(uint8 InMovementInputs, float DeltaTime);
	void OnMoveRight(float Val);
	void RecoverCapsuleChange();
	void RemoveCameraModifier();

	struct FVector GetAimLocation() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_Glide">();
	}
	static class UAbility_Glide* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_Glide>();
	}
};
static_assert(alignof(UAbility_Glide) == 0x000008, "Wrong alignment on UAbility_Glide");
static_assert(sizeof(UAbility_Glide) == 0x0025D8, "Wrong size on UAbility_Glide");
static_assert(offsetof(UAbility_Glide, GlideTask) == 0x002558, "Member 'UAbility_Glide::GlideTask' has a wrong offset!");
static_assert(offsetof(UAbility_Glide, GlideCameraModifier) == 0x002560, "Member 'UAbility_Glide::GlideCameraModifier' has a wrong offset!");

// Class Hero_1043.Config_Glide
// 0x0040 (0x00D8 - 0x0098)
class UConfig_Glide final : public UMarvelAbilityConfig
{
public:
	float                                         MaxGlideSpeed;                                     // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForwardAccelerate;                                 // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizontalTurnSpeed;                               // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VerticalTurnSpeed;                                 // 0x00A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHorizontalMoveSpeed;                            // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizontalAccelerate;                              // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizontalBreakAccelerate;                         // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxVerticalMoveSpeed;                              // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VerticalAccelerate;                                // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpenSpace;                                        // 0x00BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpenCtrl;                                         // 0x00BD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BE[0x2];                                       // 0x00BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CapsuleRadius;                                     // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleHalfHeight;                                 // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchInterpSpeed;                                  // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawInterpSpeed;                                    // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlideAlongWallAngelThreshold;                      // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_Glide">();
	}
	static class UConfig_Glide* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_Glide>();
	}
};
static_assert(alignof(UConfig_Glide) == 0x000008, "Wrong alignment on UConfig_Glide");
static_assert(sizeof(UConfig_Glide) == 0x0000D8, "Wrong size on UConfig_Glide");
static_assert(offsetof(UConfig_Glide, MaxGlideSpeed) == 0x000098, "Member 'UConfig_Glide::MaxGlideSpeed' has a wrong offset!");
static_assert(offsetof(UConfig_Glide, ForwardAccelerate) == 0x00009C, "Member 'UConfig_Glide::ForwardAccelerate' has a wrong offset!");
static_assert(offsetof(UConfig_Glide, HorizontalTurnSpeed) == 0x0000A0, "Member 'UConfig_Glide::HorizontalTurnSpeed' has a wrong offset!");
static_assert(offsetof(UConfig_Glide, VerticalTurnSpeed) == 0x0000A4, "Member 'UConfig_Glide::VerticalTurnSpeed' has a wrong offset!");
static_assert(offsetof(UConfig_Glide, MaxHorizontalMoveSpeed) == 0x0000A8, "Member 'UConfig_Glide::MaxHorizontalMoveSpeed' has a wrong offset!");
static_assert(offsetof(UConfig_Glide, HorizontalAccelerate) == 0x0000AC, "Member 'UConfig_Glide::HorizontalAccelerate' has a wrong offset!");
static_assert(offsetof(UConfig_Glide, HorizontalBreakAccelerate) == 0x0000B0, "Member 'UConfig_Glide::HorizontalBreakAccelerate' has a wrong offset!");
static_assert(offsetof(UConfig_Glide, MaxVerticalMoveSpeed) == 0x0000B4, "Member 'UConfig_Glide::MaxVerticalMoveSpeed' has a wrong offset!");
static_assert(offsetof(UConfig_Glide, VerticalAccelerate) == 0x0000B8, "Member 'UConfig_Glide::VerticalAccelerate' has a wrong offset!");
static_assert(offsetof(UConfig_Glide, bOpenSpace) == 0x0000BC, "Member 'UConfig_Glide::bOpenSpace' has a wrong offset!");
static_assert(offsetof(UConfig_Glide, bOpenCtrl) == 0x0000BD, "Member 'UConfig_Glide::bOpenCtrl' has a wrong offset!");
static_assert(offsetof(UConfig_Glide, CapsuleRadius) == 0x0000C0, "Member 'UConfig_Glide::CapsuleRadius' has a wrong offset!");
static_assert(offsetof(UConfig_Glide, CapsuleHalfHeight) == 0x0000C4, "Member 'UConfig_Glide::CapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(UConfig_Glide, PitchInterpSpeed) == 0x0000C8, "Member 'UConfig_Glide::PitchInterpSpeed' has a wrong offset!");
static_assert(offsetof(UConfig_Glide, YawInterpSpeed) == 0x0000CC, "Member 'UConfig_Glide::YawInterpSpeed' has a wrong offset!");
static_assert(offsetof(UConfig_Glide, SlideAlongWallAngelThreshold) == 0x0000D0, "Member 'UConfig_Glide::SlideAlongWallAngelThreshold' has a wrong offset!");

// Class Hero_1043.GlideCameraModifier
// 0x0028 (0x0078 - 0x0050)
class UGlideCameraModifier final : public UCameraModifier
{
public:
	uint8                                         Pad_50[0x28];                                      // 0x0050(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GlideCameraModifier">();
	}
	static class UGlideCameraModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGlideCameraModifier>();
	}
};
static_assert(alignof(UGlideCameraModifier) == 0x000008, "Wrong alignment on UGlideCameraModifier");
static_assert(sizeof(UGlideCameraModifier) == 0x000078, "Wrong size on UGlideCameraModifier");

// Class Hero_1043.EpicMomentAction_1043
// 0x0030 (0x0150 - 0x0120)
class UEpicMomentAction_1043 : public UEpicMomentBaseAction
{
public:
	uint8                                         Pad_120[0x10];                                     // 0x0120(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEpicMomentNodeInfo                    RightConfig;                                       // 0x0130(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         RightBuffID;                                       // 0x013C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ImmunityScopeIDs;                                  // 0x0140(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EpicMomentAction_1043">();
	}
	static class UEpicMomentAction_1043* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEpicMomentAction_1043>();
	}
};
static_assert(alignof(UEpicMomentAction_1043) == 0x000008, "Wrong alignment on UEpicMomentAction_1043");
static_assert(sizeof(UEpicMomentAction_1043) == 0x000150, "Wrong size on UEpicMomentAction_1043");
static_assert(offsetof(UEpicMomentAction_1043, RightConfig) == 0x000130, "Member 'UEpicMomentAction_1043::RightConfig' has a wrong offset!");
static_assert(offsetof(UEpicMomentAction_1043, RightBuffID) == 0x00013C, "Member 'UEpicMomentAction_1043::RightBuffID' has a wrong offset!");
static_assert(offsetof(UEpicMomentAction_1043, ImmunityScopeIDs) == 0x000140, "Member 'UEpicMomentAction_1043::ImmunityScopeIDs' has a wrong offset!");

// Class Hero_1043.StarlordAnimInstance
// 0x00E0 (0x09E0 - 0x0900)
class UStarlordAnimInstance final : public UMarvelAnimInstance
{
public:
	float                                         MaxHorizontalMoveSpeed;                            // 0x0900(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxVerticalMoveSpeed;                              // 0x0904(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsDoubleJumpingFlag;                               // 0x0908(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bResetDoubleJumpAnim;                              // 0x0909(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_90A[0x6];                                      // 0x090A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                StartVelocity;                                     // 0x0910(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsjumpLeftOrRight;                                // 0x0928(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsInSoulStatus;                                   // 0x0929(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bStartFly;                                         // 0x092A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFly;                                              // 0x092B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bStarFlyState;                                     // 0x092C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsFalling;                                         // 0x092D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsLandStop;                                        // 0x092E(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_92F[0x1];                                      // 0x092F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TurnRightAnimParam;                                // 0x0930(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TurnUpAnimParam;                                   // 0x0934(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AeroMovingDelta;                                   // 0x0938(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_93C[0x3C];                                     // 0x093C(0x003C)(Fixing Size After Last Property [ Dumper-7 ])
	class AStarlordCharacter*                     StarlordCharacter;                                 // 0x0978(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_980[0x60];                                     // 0x0980(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FVector GetStartVelocity();
	void UpdateDoubleJumpingFlag(bool NewState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StarlordAnimInstance">();
	}
	static class UStarlordAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStarlordAnimInstance>();
	}
};
static_assert(alignof(UStarlordAnimInstance) == 0x000010, "Wrong alignment on UStarlordAnimInstance");
static_assert(sizeof(UStarlordAnimInstance) == 0x0009E0, "Wrong size on UStarlordAnimInstance");
static_assert(offsetof(UStarlordAnimInstance, MaxHorizontalMoveSpeed) == 0x000900, "Member 'UStarlordAnimInstance::MaxHorizontalMoveSpeed' has a wrong offset!");
static_assert(offsetof(UStarlordAnimInstance, MaxVerticalMoveSpeed) == 0x000904, "Member 'UStarlordAnimInstance::MaxVerticalMoveSpeed' has a wrong offset!");
static_assert(offsetof(UStarlordAnimInstance, IsDoubleJumpingFlag) == 0x000908, "Member 'UStarlordAnimInstance::IsDoubleJumpingFlag' has a wrong offset!");
static_assert(offsetof(UStarlordAnimInstance, bResetDoubleJumpAnim) == 0x000909, "Member 'UStarlordAnimInstance::bResetDoubleJumpAnim' has a wrong offset!");
static_assert(offsetof(UStarlordAnimInstance, StartVelocity) == 0x000910, "Member 'UStarlordAnimInstance::StartVelocity' has a wrong offset!");
static_assert(offsetof(UStarlordAnimInstance, bIsjumpLeftOrRight) == 0x000928, "Member 'UStarlordAnimInstance::bIsjumpLeftOrRight' has a wrong offset!");
static_assert(offsetof(UStarlordAnimInstance, bIsInSoulStatus) == 0x000929, "Member 'UStarlordAnimInstance::bIsInSoulStatus' has a wrong offset!");
static_assert(offsetof(UStarlordAnimInstance, bStartFly) == 0x00092A, "Member 'UStarlordAnimInstance::bStartFly' has a wrong offset!");
static_assert(offsetof(UStarlordAnimInstance, bFly) == 0x00092B, "Member 'UStarlordAnimInstance::bFly' has a wrong offset!");
static_assert(offsetof(UStarlordAnimInstance, bStarFlyState) == 0x00092C, "Member 'UStarlordAnimInstance::bStarFlyState' has a wrong offset!");
static_assert(offsetof(UStarlordAnimInstance, IsFalling) == 0x00092D, "Member 'UStarlordAnimInstance::IsFalling' has a wrong offset!");
static_assert(offsetof(UStarlordAnimInstance, IsLandStop) == 0x00092E, "Member 'UStarlordAnimInstance::IsLandStop' has a wrong offset!");
static_assert(offsetof(UStarlordAnimInstance, TurnRightAnimParam) == 0x000930, "Member 'UStarlordAnimInstance::TurnRightAnimParam' has a wrong offset!");
static_assert(offsetof(UStarlordAnimInstance, TurnUpAnimParam) == 0x000934, "Member 'UStarlordAnimInstance::TurnUpAnimParam' has a wrong offset!");
static_assert(offsetof(UStarlordAnimInstance, AeroMovingDelta) == 0x000938, "Member 'UStarlordAnimInstance::AeroMovingDelta' has a wrong offset!");
static_assert(offsetof(UStarlordAnimInstance, StarlordCharacter) == 0x000978, "Member 'UStarlordAnimInstance::StarlordCharacter' has a wrong offset!");

// Class Hero_1043.StarlordChildActor
// 0x0030 (0x0A70 - 0x0A40)
class AStarlordChildActor final : public AMarvelCharacterChildActor
{
public:
	TArray<int32>                                 NormalHideMaterialIDArray;                         // 0x0A40(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           NormalHideMaterialSlotNameArray;                   // 0x0A50(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           NormalShowMaterialSlotNameArray;                   // 0x0A60(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StarlordChildActor">();
	}
	static class AStarlordChildActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AStarlordChildActor>();
	}
};
static_assert(alignof(AStarlordChildActor) == 0x000008, "Wrong alignment on AStarlordChildActor");
static_assert(sizeof(AStarlordChildActor) == 0x000A70, "Wrong size on AStarlordChildActor");
static_assert(offsetof(AStarlordChildActor, NormalHideMaterialIDArray) == 0x000A40, "Member 'AStarlordChildActor::NormalHideMaterialIDArray' has a wrong offset!");
static_assert(offsetof(AStarlordChildActor, NormalHideMaterialSlotNameArray) == 0x000A50, "Member 'AStarlordChildActor::NormalHideMaterialSlotNameArray' has a wrong offset!");
static_assert(offsetof(AStarlordChildActor, NormalShowMaterialSlotNameArray) == 0x000A60, "Member 'AStarlordChildActor::NormalShowMaterialSlotNameArray' has a wrong offset!");

// Class Hero_1043.StarlordCharacter
// 0x0050 (0x1810 - 0x17C0)
class AStarlordCharacter : public AMarvelBaseCharacter
{
public:
	FMulticastInlineDelegateProperty_             OnMoveBlock_ThreadSafe;                            // 0x17B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnDoubleJump;                                      // 0x17C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UStarlordMoveLogicBaseComponent*        StarlordMoveLogic;                                 // 0x17D8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17E0[0xC];                                     // 0x17E0(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bStartFly;                                         // 0x17EC(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFly;                                              // 0x17ED(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStarFlyState                                 StarFlyState;                                      // 0x17EE(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17EF[0x1];                                     // 0x17EF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CharacterInput;                                    // 0x17F0(0x0018)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUltimateDoubleJumping;                          // 0x1808(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1809[0x7];                                     // 0x1809(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AssignDeathCueTag(const struct FGameplayTag& InDeathCue);
	struct FVector GetCharacterInput();
	void SetCharacterInput(const struct FVector& CharInput);
	void SetDoubleJump(bool bNewState, bool bNeedBroadCast);
	void SetFly(bool NewState);
	void SetStarFlyState(EStarFlyState NewState);
	void SetStartFly(bool NewState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StarlordCharacter">();
	}
	static class AStarlordCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<AStarlordCharacter>();
	}
};
static_assert(alignof(AStarlordCharacter) == 0x000010, "Wrong alignment on AStarlordCharacter");
static_assert(sizeof(AStarlordCharacter) == 0x001810, "Wrong size on AStarlordCharacter");
static_assert(offsetof(AStarlordCharacter, OnMoveBlock_ThreadSafe) == 0x0017B8, "Member 'AStarlordCharacter::OnMoveBlock_ThreadSafe' has a wrong offset!");
static_assert(offsetof(AStarlordCharacter, OnDoubleJump) == 0x0017C8, "Member 'AStarlordCharacter::OnDoubleJump' has a wrong offset!");
static_assert(offsetof(AStarlordCharacter, StarlordMoveLogic) == 0x0017D8, "Member 'AStarlordCharacter::StarlordMoveLogic' has a wrong offset!");
static_assert(offsetof(AStarlordCharacter, bStartFly) == 0x0017EC, "Member 'AStarlordCharacter::bStartFly' has a wrong offset!");
static_assert(offsetof(AStarlordCharacter, bFly) == 0x0017ED, "Member 'AStarlordCharacter::bFly' has a wrong offset!");
static_assert(offsetof(AStarlordCharacter, StarFlyState) == 0x0017EE, "Member 'AStarlordCharacter::StarFlyState' has a wrong offset!");
static_assert(offsetof(AStarlordCharacter, CharacterInput) == 0x0017F0, "Member 'AStarlordCharacter::CharacterInput' has a wrong offset!");
static_assert(offsetof(AStarlordCharacter, bIsUltimateDoubleJumping) == 0x001808, "Member 'AStarlordCharacter::bIsUltimateDoubleJumping' has a wrong offset!");

// Class Hero_1043.StarlordMoveLogicBaseComponent
// 0x0000 (0x03F0 - 0x03F0)
class UStarlordMoveLogicBaseComponent final : public UMarvelMoveLogicBaseComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StarlordMoveLogicBaseComponent">();
	}
	static class UStarlordMoveLogicBaseComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStarlordMoveLogicBaseComponent>();
	}
};
static_assert(alignof(UStarlordMoveLogicBaseComponent) == 0x000008, "Wrong alignment on UStarlordMoveLogicBaseComponent");
static_assert(sizeof(UStarlordMoveLogicBaseComponent) == 0x0003F0, "Wrong size on UStarlordMoveLogicBaseComponent");

// Class Hero_1043.StarlordMovementComponent
// 0x0000 (0x1AF0 - 0x1AF0)
class UStarlordMovementComponent final : public UMarvelCharacterMovementComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StarlordMovementComponent">();
	}
	static class UStarlordMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStarlordMovementComponent>();
	}
};
static_assert(alignof(UStarlordMovementComponent) == 0x000010, "Wrong alignment on UStarlordMovementComponent");
static_assert(sizeof(UStarlordMovementComponent) == 0x001AF0, "Wrong size on UStarlordMovementComponent");

}

