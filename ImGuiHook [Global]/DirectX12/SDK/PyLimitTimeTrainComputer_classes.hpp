#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PyLimitTimeTrainComputer

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Marvel_structs.hpp"
#include "PyLimitTimeTrainComputer_structs.hpp"
#include "PyTrainComputer_classes.hpp"


namespace SDK
{

// PythonClass PyLimitTimeTrainComputer.PyLimitTimeTrainComputer
// 0x04B8 (0x0A28 - 0x0570)
class APyLimitTimeTrainComputer final : public APyTrainComputer
{
public:
	struct FReplicateTimer                        TrainingTimer;                                     // 0x0570(0x0078)(Net, NativeAccessSpecifierPublic)
	struct FReplicateTimer                        InteractiveCDTimer;                                // 0x05E8(0x0078)(Net, NativeAccessSpecifierPublic)
	struct FReplicateTimer                        ConfigCDTimer;                                     // 0x0660(0x0078)(Net, NativeAccessSpecifierPublic)
	ETrainingState                                TrainingState;                                     // 0x06D8(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D9[0x7];                                      // 0x06D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         TrainingConfigKey;                                 // 0x06E0(0x0010)(Net, NativeAccessSpecifierPublic)
	TArray<int32>                                 TrainingConfigValue;                               // 0x06F0(0x0010)(Net, RepNotify, NativeAccessSpecifierPublic)
	int32                                         TrainingScore;                                     // 0x0700(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TrainingKillCount;                                 // 0x0704(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 SpawnedAIUIDList;                                  // 0x0708(0x0010)(Net, NativeAccessSpecifierPublic)
	TMap<class FString, int32>                    DefaultConfig;                                     // 0x0718(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, TArray<class APyAISpawnActor*>> AISpawnActorConfig;                                // 0x0768(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, TArray<class APyAISpawnActor*>> AirAISpawnActorConfig;                             // 0x07B8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         AISpawnLimit;                                      // 0x0808(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AirAISpawnLimit;                                   // 0x080C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AIRandomSpawnLimit;                                // 0x0810(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AirAIRandomSpawnLimit;                             // 0x0814(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AIRespawnTime;                                     // 0x0818(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81C[0x4];                                      // 0x081C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 TrainingTimeList;                                  // 0x0820(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      AISpawnRangeList;                                  // 0x0830(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        AIMoveRangeList;                                   // 0x0840(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, TArray<class AActor*>>    AIMoveCenterList;                                  // 0x0850(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        AirAIMoveRangeList;                                // 0x08A0(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, TArray<class AActor*>>    AirAIMoveCenterList;                               // 0x08B0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<float>                                 AIMoveSpeedTypeList;                               // 0x0900(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<float>                                 AIHealthTypeList;                                  // 0x0910(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<int32, bool>                             AICustomCanFlyList;                                // 0x0920(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<int32, bool>                             AICustomCanGroundList;                             // 0x0970(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<int32>                                 AIExtraList;                                       // 0x09C0(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVector                                AITankMoveRangeOverride;                           // 0x09D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableRandomHero;                                  // 0x09E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9E9[0x3];                                      // 0x09E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         KillScore;                                         // 0x09EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CriticalKillScore;                                 // 0x09F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AutoResetTrainTime;                                // 0x09F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PrePareTime;                                       // 0x09F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9FC[0x4];                                      // 0x09FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         TrainingAreaScopeList;                             // 0x0A00(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          IgnoreKillStreak;                                  // 0x0A10(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A11[0x7];                                      // 0x0A11(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          InteractiveAudio;                                  // 0x0A18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     MusicActorClass;                                   // 0x0A20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void ReceiveInit();
	void ReceiveBeginPlay();
	void S_Interactive_CD_End();
	void S_Config_CD_End();
	void S_train_prepare_end();
	void S_train_end();
	void OnRep_TrainingConfig();
	void OnRep_TrainingState();
	void OnRep_TrainingScore();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyLimitTimeTrainComputer">();
	}
	static class APyLimitTimeTrainComputer* GetDefaultObj()
	{
		return GetDefaultObjImpl<APyLimitTimeTrainComputer>();
	}
};
static_assert(alignof(APyLimitTimeTrainComputer) == 0x000008, "Wrong alignment on APyLimitTimeTrainComputer");
static_assert(sizeof(APyLimitTimeTrainComputer) == 0x000A28, "Wrong size on APyLimitTimeTrainComputer");
static_assert(offsetof(APyLimitTimeTrainComputer, TrainingTimer) == 0x000570, "Member 'APyLimitTimeTrainComputer::TrainingTimer' has a wrong offset!");
static_assert(offsetof(APyLimitTimeTrainComputer, InteractiveCDTimer) == 0x0005E8, "Member 'APyLimitTimeTrainComputer::InteractiveCDTimer' has a wrong offset!");
static_assert(offsetof(APyLimitTimeTrainComputer, ConfigCDTimer) == 0x000660, "Member 'APyLimitTimeTrainComputer::ConfigCDTimer' has a wrong offset!");
static_assert(offsetof(APyLimitTimeTrainComputer, TrainingState) == 0x0006D8, "Member 'APyLimitTimeTrainComputer::TrainingState' has a wrong offset!");
static_assert(offsetof(APyLimitTimeTrainComputer, TrainingConfigKey) == 0x0006E0, "Member 'APyLimitTimeTrainComputer::TrainingConfigKey' has a wrong offset!");
static_assert(offsetof(APyLimitTimeTrainComputer, TrainingConfigValue) == 0x0006F0, "Member 'APyLimitTimeTrainComputer::TrainingConfigValue' has a wrong offset!");
static_assert(offsetof(APyLimitTimeTrainComputer, TrainingScore) == 0x000700, "Member 'APyLimitTimeTrainComputer::TrainingScore' has a wrong offset!");
static_assert(offsetof(APyLimitTimeTrainComputer, TrainingKillCount) == 0x000704, "Member 'APyLimitTimeTrainComputer::TrainingKillCount' has a wrong offset!");
static_assert(offsetof(APyLimitTimeTrainComputer, SpawnedAIUIDList) == 0x000708, "Member 'APyLimitTimeTrainComputer::SpawnedAIUIDList' has a wrong offset!");
static_assert(offsetof(APyLimitTimeTrainComputer, DefaultConfig) == 0x000718, "Member 'APyLimitTimeTrainComputer::DefaultConfig' has a wrong offset!");
static_assert(offsetof(APyLimitTimeTrainComputer, AISpawnActorConfig) == 0x000768, "Member 'APyLimitTimeTrainComputer::AISpawnActorConfig' has a wrong offset!");
static_assert(offsetof(APyLimitTimeTrainComputer, AirAISpawnActorConfig) == 0x0007B8, "Member 'APyLimitTimeTrainComputer::AirAISpawnActorConfig' has a wrong offset!");
static_assert(offsetof(APyLimitTimeTrainComputer, AISpawnLimit) == 0x000808, "Member 'APyLimitTimeTrainComputer::AISpawnLimit' has a wrong offset!");
static_assert(offsetof(APyLimitTimeTrainComputer, AirAISpawnLimit) == 0x00080C, "Member 'APyLimitTimeTrainComputer::AirAISpawnLimit' has a wrong offset!");
static_assert(offsetof(APyLimitTimeTrainComputer, AIRandomSpawnLimit) == 0x000810, "Member 'APyLimitTimeTrainComputer::AIRandomSpawnLimit' has a wrong offset!");
static_assert(offsetof(APyLimitTimeTrainComputer, AirAIRandomSpawnLimit) == 0x000814, "Member 'APyLimitTimeTrainComputer::AirAIRandomSpawnLimit' has a wrong offset!");
static_assert(offsetof(APyLimitTimeTrainComputer, AIRespawnTime) == 0x000818, "Member 'APyLimitTimeTrainComputer::AIRespawnTime' has a wrong offset!");
static_assert(offsetof(APyLimitTimeTrainComputer, TrainingTimeList) == 0x000820, "Member 'APyLimitTimeTrainComputer::TrainingTimeList' has a wrong offset!");
static_assert(offsetof(APyLimitTimeTrainComputer, AISpawnRangeList) == 0x000830, "Member 'APyLimitTimeTrainComputer::AISpawnRangeList' has a wrong offset!");
static_assert(offsetof(APyLimitTimeTrainComputer, AIMoveRangeList) == 0x000840, "Member 'APyLimitTimeTrainComputer::AIMoveRangeList' has a wrong offset!");
static_assert(offsetof(APyLimitTimeTrainComputer, AIMoveCenterList) == 0x000850, "Member 'APyLimitTimeTrainComputer::AIMoveCenterList' has a wrong offset!");
static_assert(offsetof(APyLimitTimeTrainComputer, AirAIMoveRangeList) == 0x0008A0, "Member 'APyLimitTimeTrainComputer::AirAIMoveRangeList' has a wrong offset!");
static_assert(offsetof(APyLimitTimeTrainComputer, AirAIMoveCenterList) == 0x0008B0, "Member 'APyLimitTimeTrainComputer::AirAIMoveCenterList' has a wrong offset!");
static_assert(offsetof(APyLimitTimeTrainComputer, AIMoveSpeedTypeList) == 0x000900, "Member 'APyLimitTimeTrainComputer::AIMoveSpeedTypeList' has a wrong offset!");
static_assert(offsetof(APyLimitTimeTrainComputer, AIHealthTypeList) == 0x000910, "Member 'APyLimitTimeTrainComputer::AIHealthTypeList' has a wrong offset!");
static_assert(offsetof(APyLimitTimeTrainComputer, AICustomCanFlyList) == 0x000920, "Member 'APyLimitTimeTrainComputer::AICustomCanFlyList' has a wrong offset!");
static_assert(offsetof(APyLimitTimeTrainComputer, AICustomCanGroundList) == 0x000970, "Member 'APyLimitTimeTrainComputer::AICustomCanGroundList' has a wrong offset!");
static_assert(offsetof(APyLimitTimeTrainComputer, AIExtraList) == 0x0009C0, "Member 'APyLimitTimeTrainComputer::AIExtraList' has a wrong offset!");
static_assert(offsetof(APyLimitTimeTrainComputer, AITankMoveRangeOverride) == 0x0009D0, "Member 'APyLimitTimeTrainComputer::AITankMoveRangeOverride' has a wrong offset!");
static_assert(offsetof(APyLimitTimeTrainComputer, EnableRandomHero) == 0x0009E8, "Member 'APyLimitTimeTrainComputer::EnableRandomHero' has a wrong offset!");
static_assert(offsetof(APyLimitTimeTrainComputer, KillScore) == 0x0009EC, "Member 'APyLimitTimeTrainComputer::KillScore' has a wrong offset!");
static_assert(offsetof(APyLimitTimeTrainComputer, CriticalKillScore) == 0x0009F0, "Member 'APyLimitTimeTrainComputer::CriticalKillScore' has a wrong offset!");
static_assert(offsetof(APyLimitTimeTrainComputer, AutoResetTrainTime) == 0x0009F4, "Member 'APyLimitTimeTrainComputer::AutoResetTrainTime' has a wrong offset!");
static_assert(offsetof(APyLimitTimeTrainComputer, PrePareTime) == 0x0009F8, "Member 'APyLimitTimeTrainComputer::PrePareTime' has a wrong offset!");
static_assert(offsetof(APyLimitTimeTrainComputer, TrainingAreaScopeList) == 0x000A00, "Member 'APyLimitTimeTrainComputer::TrainingAreaScopeList' has a wrong offset!");
static_assert(offsetof(APyLimitTimeTrainComputer, IgnoreKillStreak) == 0x000A10, "Member 'APyLimitTimeTrainComputer::IgnoreKillStreak' has a wrong offset!");
static_assert(offsetof(APyLimitTimeTrainComputer, InteractiveAudio) == 0x000A18, "Member 'APyLimitTimeTrainComputer::InteractiveAudio' has a wrong offset!");
static_assert(offsetof(APyLimitTimeTrainComputer, MusicActorClass) == 0x000A20, "Member 'APyLimitTimeTrainComputer::MusicActorClass' has a wrong offset!");

// PythonClass PyLimitTimeTrainComputer.PyLimitTimeTrainConfigComputer
// 0x0008 (0x0578 - 0x0570)
class APyLimitTimeTrainConfigComputer final : public APyTrainComputer
{
public:
	class UAkAudioEvent*                          InteractiveAudio;                                  // 0x0570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyLimitTimeTrainConfigComputer">();
	}
	static class APyLimitTimeTrainConfigComputer* GetDefaultObj()
	{
		return GetDefaultObjImpl<APyLimitTimeTrainConfigComputer>();
	}
};
static_assert(alignof(APyLimitTimeTrainConfigComputer) == 0x000008, "Wrong alignment on APyLimitTimeTrainConfigComputer");
static_assert(sizeof(APyLimitTimeTrainConfigComputer) == 0x000578, "Wrong size on APyLimitTimeTrainConfigComputer");
static_assert(offsetof(APyLimitTimeTrainConfigComputer, InteractiveAudio) == 0x000570, "Member 'APyLimitTimeTrainConfigComputer::InteractiveAudio' has a wrong offset!");

}

