#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PyMarvelGameState

#include "Basic.hpp"

#include "MarvelLevel_structs.hpp"
#include "Marvel_structs.hpp"
#include "Marvel_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// PythonClass PyMarvelGameState.PyMarvelGameState
// 0x0118 (0x0C10 - 0x0AF8)
class APyMarvelGameState : public AMarvelGameState
{
public:
	int32                                         RedScore;                                          // 0x0AF8(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BlueScore;                                         // 0x0AFC(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RoundIndex;                                        // 0x0B00(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScoreToWin;                                        // 0x0B04(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RedKillCount;                                      // 0x0B08(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BlueKillCount;                                     // 0x0B0C(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RoundPlayed;                                       // 0x0B10(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattleSide                                   OffenderBattleSide;                                // 0x0B14(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B15[0x3];                                      // 0x0B15(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APyMarvelLevelCtrlPawn*                 LevelCtrlPawn;                                     // 0x0B18(0x0008)(BlueprintVisible, Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FakeBattleId;                                      // 0x0B20(0x0010)(Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         PreDesHpList;                                      // 0x0B30(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, NativeAccessSpecifierPublic)
	int32                                         GamePlayModeID;                                    // 0x0B40(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBanPickMemberType                            BanPickMemberType;                                 // 0x0B44(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B45[0x3];                                      // 0x0B45(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LeagueRoundInfo;                                   // 0x0B48(0x0010)(BlueprintVisible, Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BattleID;                                          // 0x0B58(0x0010)(BlueprintVisible, Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SimpleStatLevel;                                   // 0x0B68(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SimpleStatClientMs;                                // 0x0B6C(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             DispatcherUpdateHeroSelectable;                    // 0x0B70(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             DispatcherUpvoteOther;                             // 0x0B80(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             BattlePreSettleDispatcher;                         // 0x0B90(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnMVPChangedDispatcher;                            // 0x0BA0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             HeroUseTimeChanged;                                // 0x0BB0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnKillCountChangeDispatcher;                       // 0x0BC0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPlayerRespawnUpdateDispatcher;                   // 0x0BD0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPlayerReconnectTimeoutDispatcher;                // 0x0BE0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnSignalBeResponded;                               // 0x0BF0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnSendSignalSuccess;                               // 0x0C00(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void DispatcherUpdateHeroSelectable__DelegateSignature();
	void DispatcherUpvoteOther__DelegateSignature(int32 Source_UID, int32 Target_UID);
	void BattlePreSettleDispatcher__DelegateSignature();
	void OnMVPChangedDispatcher__DelegateSignature();
	void HeroUseTimeChanged__DelegateSignature(int32 Player_uid, int32 Hero_id, float Time);
	void OnKillCountChangeDispatcher__DelegateSignature(EBattleSide battle_sid, int32 Kill_count);
	void OnPlayerRespawnUpdateDispatcher__DelegateSignature(class AMarvelPlayerState* PlayerState);
	void OnPlayerReconnectTimeoutDispatcher__DelegateSignature(class AMarvelPlayerState* PS);
	int32 GetRoundLegacyInfoInt(int32 Round_played_idx, const class FString& Name_0);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void OnCreateRHIChecker();
	void OnRHICheckerRenew();
	void OnRHICheckerRunOnce();
	void RegisterCharacter(class AMarvelBaseCharacter* InCharacter);
	void UnregisterCharacter(class AMarvelBaseCharacter* InCharacter);
	bool HasRoundStarted();
	class AMarvelLevelCtrlPawn* GetLevelCtrlPawn();
	bool NeedsEpicMomentForMatch();
	void BroadcastTurnOnExpression();
	void BroadcastBattleEnd(EBattleSide Win_side);
	void ClientAutoTestShutdown();
	void BroadcastUpvoteOther(int32 Source_UID, int32 Target_UID);
	void Server_notify_ds_traceback(const class FString& Content);
	float GetServerTimeSeconds();
	void OnRep_RedKillCount();
	void OnRep_BlueKillCount();
	void OnRep_FakeBattleId();
	TArray<int32> GetOnlinePlayerUids();
	bool IsInBorder(const struct FVector& InLocation);
	void ReceiveReplayIDChanged();
	void OnRep_BattleId();
	void OnRep_SimpleStatLevel();
	void OnRep_SimpleStatClientMs();
	void NetMultiCastReceiveBattleResult(const class FString& battle_result);
	void NetMultiCastReceiveMVPChange(const class FString& Mvp_info);
	void OnSignalBeResponded__DelegateSignature(int32 SignalID, class AMarvelBaseCharacter* SourceActor);
	void OnSendSignalSuccess__DelegateSignature(int32 SignalID, class AMarvelBaseCharacter* ResponseTarget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyMarvelGameState">();
	}
	static class APyMarvelGameState* GetDefaultObj()
	{
		return GetDefaultObjImpl<APyMarvelGameState>();
	}
};
static_assert(alignof(APyMarvelGameState) == 0x000008, "Wrong alignment on APyMarvelGameState");
static_assert(sizeof(APyMarvelGameState) == 0x000C10, "Wrong size on APyMarvelGameState");
static_assert(offsetof(APyMarvelGameState, RedScore) == 0x000AF8, "Member 'APyMarvelGameState::RedScore' has a wrong offset!");
static_assert(offsetof(APyMarvelGameState, BlueScore) == 0x000AFC, "Member 'APyMarvelGameState::BlueScore' has a wrong offset!");
static_assert(offsetof(APyMarvelGameState, RoundIndex) == 0x000B00, "Member 'APyMarvelGameState::RoundIndex' has a wrong offset!");
static_assert(offsetof(APyMarvelGameState, ScoreToWin) == 0x000B04, "Member 'APyMarvelGameState::ScoreToWin' has a wrong offset!");
static_assert(offsetof(APyMarvelGameState, RedKillCount) == 0x000B08, "Member 'APyMarvelGameState::RedKillCount' has a wrong offset!");
static_assert(offsetof(APyMarvelGameState, BlueKillCount) == 0x000B0C, "Member 'APyMarvelGameState::BlueKillCount' has a wrong offset!");
static_assert(offsetof(APyMarvelGameState, RoundPlayed) == 0x000B10, "Member 'APyMarvelGameState::RoundPlayed' has a wrong offset!");
static_assert(offsetof(APyMarvelGameState, OffenderBattleSide) == 0x000B14, "Member 'APyMarvelGameState::OffenderBattleSide' has a wrong offset!");
static_assert(offsetof(APyMarvelGameState, LevelCtrlPawn) == 0x000B18, "Member 'APyMarvelGameState::LevelCtrlPawn' has a wrong offset!");
static_assert(offsetof(APyMarvelGameState, FakeBattleId) == 0x000B20, "Member 'APyMarvelGameState::FakeBattleId' has a wrong offset!");
static_assert(offsetof(APyMarvelGameState, PreDesHpList) == 0x000B30, "Member 'APyMarvelGameState::PreDesHpList' has a wrong offset!");
static_assert(offsetof(APyMarvelGameState, GamePlayModeID) == 0x000B40, "Member 'APyMarvelGameState::GamePlayModeID' has a wrong offset!");
static_assert(offsetof(APyMarvelGameState, BanPickMemberType) == 0x000B44, "Member 'APyMarvelGameState::BanPickMemberType' has a wrong offset!");
static_assert(offsetof(APyMarvelGameState, LeagueRoundInfo) == 0x000B48, "Member 'APyMarvelGameState::LeagueRoundInfo' has a wrong offset!");
static_assert(offsetof(APyMarvelGameState, BattleID) == 0x000B58, "Member 'APyMarvelGameState::BattleID' has a wrong offset!");
static_assert(offsetof(APyMarvelGameState, SimpleStatLevel) == 0x000B68, "Member 'APyMarvelGameState::SimpleStatLevel' has a wrong offset!");
static_assert(offsetof(APyMarvelGameState, SimpleStatClientMs) == 0x000B6C, "Member 'APyMarvelGameState::SimpleStatClientMs' has a wrong offset!");
static_assert(offsetof(APyMarvelGameState, DispatcherUpdateHeroSelectable) == 0x000B70, "Member 'APyMarvelGameState::DispatcherUpdateHeroSelectable' has a wrong offset!");
static_assert(offsetof(APyMarvelGameState, DispatcherUpvoteOther) == 0x000B80, "Member 'APyMarvelGameState::DispatcherUpvoteOther' has a wrong offset!");
static_assert(offsetof(APyMarvelGameState, BattlePreSettleDispatcher) == 0x000B90, "Member 'APyMarvelGameState::BattlePreSettleDispatcher' has a wrong offset!");
static_assert(offsetof(APyMarvelGameState, OnMVPChangedDispatcher) == 0x000BA0, "Member 'APyMarvelGameState::OnMVPChangedDispatcher' has a wrong offset!");
static_assert(offsetof(APyMarvelGameState, HeroUseTimeChanged) == 0x000BB0, "Member 'APyMarvelGameState::HeroUseTimeChanged' has a wrong offset!");
static_assert(offsetof(APyMarvelGameState, OnKillCountChangeDispatcher) == 0x000BC0, "Member 'APyMarvelGameState::OnKillCountChangeDispatcher' has a wrong offset!");
static_assert(offsetof(APyMarvelGameState, OnPlayerRespawnUpdateDispatcher) == 0x000BD0, "Member 'APyMarvelGameState::OnPlayerRespawnUpdateDispatcher' has a wrong offset!");
static_assert(offsetof(APyMarvelGameState, OnPlayerReconnectTimeoutDispatcher) == 0x000BE0, "Member 'APyMarvelGameState::OnPlayerReconnectTimeoutDispatcher' has a wrong offset!");
static_assert(offsetof(APyMarvelGameState, OnSignalBeResponded) == 0x000BF0, "Member 'APyMarvelGameState::OnSignalBeResponded' has a wrong offset!");
static_assert(offsetof(APyMarvelGameState, OnSendSignalSuccess) == 0x000C00, "Member 'APyMarvelGameState::OnSendSignalSuccess' has a wrong offset!");

}

