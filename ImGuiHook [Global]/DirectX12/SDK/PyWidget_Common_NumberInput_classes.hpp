#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PyWidget_Common_NumberInput

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "Python_enums_structs.hpp"
#include "Marvel_structs.hpp"
#include "PyMarvelUserWidget_classes.hpp"


namespace SDK
{

// PythonClass PyWidget_Common_NumberInput.PyWidget_Common_NumberInput
// 0x0258 (0x0840 - 0x05E8)
#pragma pack(push, 0x1)
class alignas(0x10) UPyWidget_Common_NumberInput : public UPyMarvelUserWidget
{
public:
	uint8                                         Pad_5E1[0x7];                                      // 0x05E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   HintText;                                          // 0x05E8(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            BtnInputNormalBrush;                               // 0x0600(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            BtnInputEditingBrush;                              // 0x06D0(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         InputBoxWidth;                                     // 0x07A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEmptyTextAllowed;                                // 0x07A4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENumberType                                   NumberType;                                        // 0x07A5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableLengthLimit;                                 // 0x07A6(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A7[0x1];                                      // 0x07A7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LengthLimit;                                       // 0x07A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableRangeLimit;                                  // 0x07AC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7AD[0x3];                                      // 0x07AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DefaultValue;                                      // 0x07B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LowerLimit;                                        // 0x07B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UpperLimit;                                        // 0x07B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7BC[0x4];                                      // 0x07BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UUserWidget>                Input_Prompt;                                      // 0x07C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTipDownside;                                     // 0x07C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C9[0x3];                                      // 0x07C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TipTime;                                           // 0x07CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCenterAlign;                                     // 0x07D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D1[0x7];                                      // 0x07D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          AKEvent_OnValueChanged;                            // 0x07D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGuideTipsStyle>                TipsStyle;                                         // 0x07E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                Watermark;                                         // 0x07F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEditableTextBox*                       Input_Text;                                        // 0x07F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelRichTextBlock*                   RichText_Display;                                  // 0x0800(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnSubmitText;                                      // 0x0808(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnChangeText;                                      // 0x0818(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnChangeDisplayTextVisible;                        // 0x0828(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void OnSubmitText__DelegateSignature(const class FString& TextStr);
	void OnChangeText__DelegateSignature(const class FString& TextStr);
	void OnChangeDisplayTextVisible__DelegateSignature(bool Visible);
	void PreConstruct(bool IsDesignTime);
	void Construct();
	void Destruct();
	void OnInitialized();
	class FText GetInputText();
	void SetIsOwner(bool IsOwner);
	void SetHintText(const class FText& HintText_0);
	void SetInputBoxWidth(float Width);
	void SetNeedPercent(bool Is_percent);
	void SetInputText(const class FText& Text);
	void SetIsEditing(bool IsEditing);
	void UpdateWidgetStyleWithEditState(bool IsEditing);
	void SubmitText(const class FText& Text, bool bIsEnter);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyWidget_Common_NumberInput">();
	}
	static class UPyWidget_Common_NumberInput* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyWidget_Common_NumberInput>();
	}
};
#pragma pack(pop)
static_assert(alignof(UPyWidget_Common_NumberInput) == 0x000010, "Wrong alignment on UPyWidget_Common_NumberInput");
static_assert(sizeof(UPyWidget_Common_NumberInput) == 0x000840, "Wrong size on UPyWidget_Common_NumberInput");
static_assert(offsetof(UPyWidget_Common_NumberInput, HintText) == 0x0005E8, "Member 'UPyWidget_Common_NumberInput::HintText' has a wrong offset!");
static_assert(offsetof(UPyWidget_Common_NumberInput, BtnInputNormalBrush) == 0x000600, "Member 'UPyWidget_Common_NumberInput::BtnInputNormalBrush' has a wrong offset!");
static_assert(offsetof(UPyWidget_Common_NumberInput, BtnInputEditingBrush) == 0x0006D0, "Member 'UPyWidget_Common_NumberInput::BtnInputEditingBrush' has a wrong offset!");
static_assert(offsetof(UPyWidget_Common_NumberInput, InputBoxWidth) == 0x0007A0, "Member 'UPyWidget_Common_NumberInput::InputBoxWidth' has a wrong offset!");
static_assert(offsetof(UPyWidget_Common_NumberInput, IsEmptyTextAllowed) == 0x0007A4, "Member 'UPyWidget_Common_NumberInput::IsEmptyTextAllowed' has a wrong offset!");
static_assert(offsetof(UPyWidget_Common_NumberInput, NumberType) == 0x0007A5, "Member 'UPyWidget_Common_NumberInput::NumberType' has a wrong offset!");
static_assert(offsetof(UPyWidget_Common_NumberInput, EnableLengthLimit) == 0x0007A6, "Member 'UPyWidget_Common_NumberInput::EnableLengthLimit' has a wrong offset!");
static_assert(offsetof(UPyWidget_Common_NumberInput, LengthLimit) == 0x0007A8, "Member 'UPyWidget_Common_NumberInput::LengthLimit' has a wrong offset!");
static_assert(offsetof(UPyWidget_Common_NumberInput, EnableRangeLimit) == 0x0007AC, "Member 'UPyWidget_Common_NumberInput::EnableRangeLimit' has a wrong offset!");
static_assert(offsetof(UPyWidget_Common_NumberInput, DefaultValue) == 0x0007B0, "Member 'UPyWidget_Common_NumberInput::DefaultValue' has a wrong offset!");
static_assert(offsetof(UPyWidget_Common_NumberInput, LowerLimit) == 0x0007B4, "Member 'UPyWidget_Common_NumberInput::LowerLimit' has a wrong offset!");
static_assert(offsetof(UPyWidget_Common_NumberInput, UpperLimit) == 0x0007B8, "Member 'UPyWidget_Common_NumberInput::UpperLimit' has a wrong offset!");
static_assert(offsetof(UPyWidget_Common_NumberInput, Input_Prompt) == 0x0007C0, "Member 'UPyWidget_Common_NumberInput::Input_Prompt' has a wrong offset!");
static_assert(offsetof(UPyWidget_Common_NumberInput, IsTipDownside) == 0x0007C8, "Member 'UPyWidget_Common_NumberInput::IsTipDownside' has a wrong offset!");
static_assert(offsetof(UPyWidget_Common_NumberInput, TipTime) == 0x0007CC, "Member 'UPyWidget_Common_NumberInput::TipTime' has a wrong offset!");
static_assert(offsetof(UPyWidget_Common_NumberInput, IsCenterAlign) == 0x0007D0, "Member 'UPyWidget_Common_NumberInput::IsCenterAlign' has a wrong offset!");
static_assert(offsetof(UPyWidget_Common_NumberInput, AKEvent_OnValueChanged) == 0x0007D8, "Member 'UPyWidget_Common_NumberInput::AKEvent_OnValueChanged' has a wrong offset!");
static_assert(offsetof(UPyWidget_Common_NumberInput, TipsStyle) == 0x0007E0, "Member 'UPyWidget_Common_NumberInput::TipsStyle' has a wrong offset!");
static_assert(offsetof(UPyWidget_Common_NumberInput, Watermark) == 0x0007F0, "Member 'UPyWidget_Common_NumberInput::Watermark' has a wrong offset!");
static_assert(offsetof(UPyWidget_Common_NumberInput, Input_Text) == 0x0007F8, "Member 'UPyWidget_Common_NumberInput::Input_Text' has a wrong offset!");
static_assert(offsetof(UPyWidget_Common_NumberInput, RichText_Display) == 0x000800, "Member 'UPyWidget_Common_NumberInput::RichText_Display' has a wrong offset!");
static_assert(offsetof(UPyWidget_Common_NumberInput, OnSubmitText) == 0x000808, "Member 'UPyWidget_Common_NumberInput::OnSubmitText' has a wrong offset!");
static_assert(offsetof(UPyWidget_Common_NumberInput, OnChangeText) == 0x000818, "Member 'UPyWidget_Common_NumberInput::OnChangeText' has a wrong offset!");
static_assert(offsetof(UPyWidget_Common_NumberInput, OnChangeDisplayTextVisible) == 0x000828, "Member 'UPyWidget_Common_NumberInput::OnChangeDisplayTextVisible' has a wrong offset!");

}

