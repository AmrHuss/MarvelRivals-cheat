#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Hero_1049

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Marvel_structs.hpp"
#include "Marvel_classes.hpp"
#include "Hero_1049_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "Hero_Synergy_classes.hpp"


namespace SDK
{

// Class Hero_1049.AbilityExtraStatistics_104911
// 0x0000 (0x0070 - 0x0070)
class UAbilityExtraStatistics_104911 final : public UAbilityExtraStatistics
{
public:
	void OnApplyPercentDamage(float PercentDamageValue, const struct FGameplayEffectSpec& SourceSpec);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityExtraStatistics_104911">();
	}
	static class UAbilityExtraStatistics_104911* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityExtraStatistics_104911>();
	}
};
static_assert(alignof(UAbilityExtraStatistics_104911) == 0x000008, "Wrong alignment on UAbilityExtraStatistics_104911");
static_assert(sizeof(UAbilityExtraStatistics_104911) == 0x000070, "Wrong size on UAbilityExtraStatistics_104911");

// Class Hero_1049.AbilityExtraStatistics_104921
// 0x0010 (0x0080 - 0x0070)
class UAbilityExtraStatistics_104921 final : public UAbilityExtraStatistics
{
public:
	uint8                                         Pad_70[0x10];                                      // 0x0070(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityExtraStatistics_104921">();
	}
	static class UAbilityExtraStatistics_104921* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityExtraStatistics_104921>();
	}
};
static_assert(alignof(UAbilityExtraStatistics_104921) == 0x000008, "Wrong alignment on UAbilityExtraStatistics_104921");
static_assert(sizeof(UAbilityExtraStatistics_104921) == 0x000080, "Wrong size on UAbilityExtraStatistics_104921");

// Class Hero_1049.Config_104901
// 0x0050 (0x00E8 - 0x0098)
class UConfig_104901 : public UMarvelAbilityConfig
{
public:
	float                                         NotTreatShieldDuration;                            // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtraBaseHealth;                                   // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            AdjustNotTreatShieldFactorCurve;                   // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NotTreatShieldToHealthFactor;                      // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AngerValueType;                                    // 0x00AC(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           HealUITipTag;                                      // 0x00B8(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           HealCDTag;                                         // 0x00C4(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShieldToHealDelay;                                 // 0x00D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HealToEndDelay;                                    // 0x00D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBindReduceCDMethod_104901                    ReduceCDMethod_NotActivated;                       // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReduceCDValue_NotActivated;                        // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBindReduceCDMethod_104901                    ReduceCDMethod_Activated;                          // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReduceCDValue_Activated;                           // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_104901">();
	}
	static class UConfig_104901* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_104901>();
	}
};
static_assert(alignof(UConfig_104901) == 0x000008, "Wrong alignment on UConfig_104901");
static_assert(sizeof(UConfig_104901) == 0x0000E8, "Wrong size on UConfig_104901");
static_assert(offsetof(UConfig_104901, NotTreatShieldDuration) == 0x000098, "Member 'UConfig_104901::NotTreatShieldDuration' has a wrong offset!");
static_assert(offsetof(UConfig_104901, ExtraBaseHealth) == 0x00009C, "Member 'UConfig_104901::ExtraBaseHealth' has a wrong offset!");
static_assert(offsetof(UConfig_104901, AdjustNotTreatShieldFactorCurve) == 0x0000A0, "Member 'UConfig_104901::AdjustNotTreatShieldFactorCurve' has a wrong offset!");
static_assert(offsetof(UConfig_104901, NotTreatShieldToHealthFactor) == 0x0000A8, "Member 'UConfig_104901::NotTreatShieldToHealthFactor' has a wrong offset!");
static_assert(offsetof(UConfig_104901, AngerValueType) == 0x0000AC, "Member 'UConfig_104901::AngerValueType' has a wrong offset!");
static_assert(offsetof(UConfig_104901, HealUITipTag) == 0x0000B8, "Member 'UConfig_104901::HealUITipTag' has a wrong offset!");
static_assert(offsetof(UConfig_104901, HealCDTag) == 0x0000C4, "Member 'UConfig_104901::HealCDTag' has a wrong offset!");
static_assert(offsetof(UConfig_104901, ShieldToHealDelay) == 0x0000D0, "Member 'UConfig_104901::ShieldToHealDelay' has a wrong offset!");
static_assert(offsetof(UConfig_104901, HealToEndDelay) == 0x0000D4, "Member 'UConfig_104901::HealToEndDelay' has a wrong offset!");
static_assert(offsetof(UConfig_104901, ReduceCDMethod_NotActivated) == 0x0000D8, "Member 'UConfig_104901::ReduceCDMethod_NotActivated' has a wrong offset!");
static_assert(offsetof(UConfig_104901, ReduceCDValue_NotActivated) == 0x0000DC, "Member 'UConfig_104901::ReduceCDValue_NotActivated' has a wrong offset!");
static_assert(offsetof(UConfig_104901, ReduceCDMethod_Activated) == 0x0000E0, "Member 'UConfig_104901::ReduceCDMethod_Activated' has a wrong offset!");
static_assert(offsetof(UConfig_104901, ReduceCDValue_Activated) == 0x0000E4, "Member 'UConfig_104901::ReduceCDValue_Activated' has a wrong offset!");

// Class Hero_1049.Ability_104901
// 0x0088 (0x25D8 - 0x2550)
class UAbility_104901 : public UMarvelGameplayAbility
{
public:
	FMulticastInlineDelegateProperty_             OnEnterHealStageDispatcher;                        // 0x2550(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnResurrectSelfDispatcher;                         // 0x2560(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2570[0x18];                                    // 0x2570(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UConfig_104901*                         MyConfig;                                          // 0x2588(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AWolverineCharacter*                    OwnerCharacter;                                    // 0x2590(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ReduceCDCount_Activated;                           // 0x2598(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ResurrectCount;                                    // 0x259C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ReplicatedResurrectCount;                          // 0x25A0(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_25A4[0x4];                                     // 0x25A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           DelayHealTimerHandle;                              // 0x25A8(0x0018)(BlueprintVisible, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTimerHandle                           DelayEndAbilityTimerHandle;                        // 0x25C0(0x0018)(BlueprintVisible, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void BindNotTreatShieldChanged(bool bBind);
	bool CanResurrectSelf();
	void DelayEndAbility();
	void NotTreatShieldToHeal();
	void OnAbilityActivateFailed(const struct FGameplayTagContainer& FailureReason);
	void OnOwnerApplyDamage(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnOwnerTagUpdate(const struct FGameplayTag& InTag, bool bInExists);
	void OnRep_ReplicatedResurrectCount();
	void OnTargetActorDeath(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void TryResurrectSelf();

	float AdjustNotTreatShieldByAnger() const;
	float GetAngerToShieldFactor(float InAngerValue) const;
	float GetCurrentAngerValue() const;
	float GetExtraBaeHealthValue() const;
	float GetTreatHealth() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_104901">();
	}
	static class UAbility_104901* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_104901>();
	}
};
static_assert(alignof(UAbility_104901) == 0x000008, "Wrong alignment on UAbility_104901");
static_assert(sizeof(UAbility_104901) == 0x0025D8, "Wrong size on UAbility_104901");
static_assert(offsetof(UAbility_104901, OnEnterHealStageDispatcher) == 0x002550, "Member 'UAbility_104901::OnEnterHealStageDispatcher' has a wrong offset!");
static_assert(offsetof(UAbility_104901, OnResurrectSelfDispatcher) == 0x002560, "Member 'UAbility_104901::OnResurrectSelfDispatcher' has a wrong offset!");
static_assert(offsetof(UAbility_104901, MyConfig) == 0x002588, "Member 'UAbility_104901::MyConfig' has a wrong offset!");
static_assert(offsetof(UAbility_104901, OwnerCharacter) == 0x002590, "Member 'UAbility_104901::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(UAbility_104901, ReduceCDCount_Activated) == 0x002598, "Member 'UAbility_104901::ReduceCDCount_Activated' has a wrong offset!");
static_assert(offsetof(UAbility_104901, ResurrectCount) == 0x00259C, "Member 'UAbility_104901::ResurrectCount' has a wrong offset!");
static_assert(offsetof(UAbility_104901, ReplicatedResurrectCount) == 0x0025A0, "Member 'UAbility_104901::ReplicatedResurrectCount' has a wrong offset!");
static_assert(offsetof(UAbility_104901, DelayHealTimerHandle) == 0x0025A8, "Member 'UAbility_104901::DelayHealTimerHandle' has a wrong offset!");
static_assert(offsetof(UAbility_104901, DelayEndAbilityTimerHandle) == 0x0025C0, "Member 'UAbility_104901::DelayEndAbilityTimerHandle' has a wrong offset!");

// Class Hero_1049.MarvelCueNotify_Ability_10490101
// 0x00B0 (0x0EB0 - 0x0E00)
class AMarvelCueNotify_Ability_10490101 final : public AMarvelCueNotify_Ability
{
public:
	class FName                                   ShieldSwitchName;                                  // 0x0E00(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ShieldDissolveName;                                // 0x0E0C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            DissolveCurve;                                     // 0x0E18(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            AppearCurve;                                       // 0x0E20(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RimFresnelPowerName;                               // 0x0E28(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E34[0x4];                                      // 0x0E34(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            RimFresnelPowerCurve;                              // 0x0E38(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RimFresnelScaleName;                               // 0x0E40(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4C[0x4];                                      // 0x0E4C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            RimFresnelScaleCurve;                              // 0x0E50(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayActivateCameraShakeTime;                      // 0x0E58(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E5C[0x4];                                      // 0x0E5C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           DelayActivateCameraShakeTimerHandle;               // 0x0E60(0x0018)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ULegacyCameraShake>         ShieldActivateCameraShake;                         // 0x0E78(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ULegacyCameraShake>         ShieldDissolveCameraShake;                         // 0x0E80(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldPlayDissolveCameraShakeWithOutArmor;        // 0x0E88(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E89[0x3];                                      // 0x0E89(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AccumulateDissolveTime;                            // 0x0E8C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldPlayDissolveCurve;                          // 0x0E90(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E91[0x3];                                      // 0x0E91(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AccumulateAppearTime;                              // 0x0E94(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldPlayAppearCurve;                            // 0x0E98(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E99[0x7];                                      // 0x0E99(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelBaseCharacter*                   OwnerCharacter;                                    // 0x0EA0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAbility_104901*                        OwningAbility;                                     // 0x0EA8(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnOwningAbilityEnterHealStage(bool bCanHeal);
	void OnOwningAbilityResurrectSelf(int32 ResurrectCount);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCueNotify_Ability_10490101">();
	}
	static class AMarvelCueNotify_Ability_10490101* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelCueNotify_Ability_10490101>();
	}
};
static_assert(alignof(AMarvelCueNotify_Ability_10490101) == 0x000008, "Wrong alignment on AMarvelCueNotify_Ability_10490101");
static_assert(sizeof(AMarvelCueNotify_Ability_10490101) == 0x000EB0, "Wrong size on AMarvelCueNotify_Ability_10490101");
static_assert(offsetof(AMarvelCueNotify_Ability_10490101, ShieldSwitchName) == 0x000E00, "Member 'AMarvelCueNotify_Ability_10490101::ShieldSwitchName' has a wrong offset!");
static_assert(offsetof(AMarvelCueNotify_Ability_10490101, ShieldDissolveName) == 0x000E0C, "Member 'AMarvelCueNotify_Ability_10490101::ShieldDissolveName' has a wrong offset!");
static_assert(offsetof(AMarvelCueNotify_Ability_10490101, DissolveCurve) == 0x000E18, "Member 'AMarvelCueNotify_Ability_10490101::DissolveCurve' has a wrong offset!");
static_assert(offsetof(AMarvelCueNotify_Ability_10490101, AppearCurve) == 0x000E20, "Member 'AMarvelCueNotify_Ability_10490101::AppearCurve' has a wrong offset!");
static_assert(offsetof(AMarvelCueNotify_Ability_10490101, RimFresnelPowerName) == 0x000E28, "Member 'AMarvelCueNotify_Ability_10490101::RimFresnelPowerName' has a wrong offset!");
static_assert(offsetof(AMarvelCueNotify_Ability_10490101, RimFresnelPowerCurve) == 0x000E38, "Member 'AMarvelCueNotify_Ability_10490101::RimFresnelPowerCurve' has a wrong offset!");
static_assert(offsetof(AMarvelCueNotify_Ability_10490101, RimFresnelScaleName) == 0x000E40, "Member 'AMarvelCueNotify_Ability_10490101::RimFresnelScaleName' has a wrong offset!");
static_assert(offsetof(AMarvelCueNotify_Ability_10490101, RimFresnelScaleCurve) == 0x000E50, "Member 'AMarvelCueNotify_Ability_10490101::RimFresnelScaleCurve' has a wrong offset!");
static_assert(offsetof(AMarvelCueNotify_Ability_10490101, DelayActivateCameraShakeTime) == 0x000E58, "Member 'AMarvelCueNotify_Ability_10490101::DelayActivateCameraShakeTime' has a wrong offset!");
static_assert(offsetof(AMarvelCueNotify_Ability_10490101, DelayActivateCameraShakeTimerHandle) == 0x000E60, "Member 'AMarvelCueNotify_Ability_10490101::DelayActivateCameraShakeTimerHandle' has a wrong offset!");
static_assert(offsetof(AMarvelCueNotify_Ability_10490101, ShieldActivateCameraShake) == 0x000E78, "Member 'AMarvelCueNotify_Ability_10490101::ShieldActivateCameraShake' has a wrong offset!");
static_assert(offsetof(AMarvelCueNotify_Ability_10490101, ShieldDissolveCameraShake) == 0x000E80, "Member 'AMarvelCueNotify_Ability_10490101::ShieldDissolveCameraShake' has a wrong offset!");
static_assert(offsetof(AMarvelCueNotify_Ability_10490101, bShouldPlayDissolveCameraShakeWithOutArmor) == 0x000E88, "Member 'AMarvelCueNotify_Ability_10490101::bShouldPlayDissolveCameraShakeWithOutArmor' has a wrong offset!");
static_assert(offsetof(AMarvelCueNotify_Ability_10490101, AccumulateDissolveTime) == 0x000E8C, "Member 'AMarvelCueNotify_Ability_10490101::AccumulateDissolveTime' has a wrong offset!");
static_assert(offsetof(AMarvelCueNotify_Ability_10490101, bShouldPlayDissolveCurve) == 0x000E90, "Member 'AMarvelCueNotify_Ability_10490101::bShouldPlayDissolveCurve' has a wrong offset!");
static_assert(offsetof(AMarvelCueNotify_Ability_10490101, AccumulateAppearTime) == 0x000E94, "Member 'AMarvelCueNotify_Ability_10490101::AccumulateAppearTime' has a wrong offset!");
static_assert(offsetof(AMarvelCueNotify_Ability_10490101, bShouldPlayAppearCurve) == 0x000E98, "Member 'AMarvelCueNotify_Ability_10490101::bShouldPlayAppearCurve' has a wrong offset!");
static_assert(offsetof(AMarvelCueNotify_Ability_10490101, OwnerCharacter) == 0x000EA0, "Member 'AMarvelCueNotify_Ability_10490101::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(AMarvelCueNotify_Ability_10490101, OwningAbility) == 0x000EA8, "Member 'AMarvelCueNotify_Ability_10490101::OwningAbility' has a wrong offset!");

// Class Hero_1049.Config_104911
// 0x0068 (0x0100 - 0x0098)
class UConfig_104911 final : public UMarvelAbilityConfig
{
public:
	ETotalHealthType                              PercentDamageHealthType;                           // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, class UCurveFloat*>               DamagePercentCurveMap;                             // 0x00A0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AngerValueType;                                    // 0x00F0(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_104911">();
	}
	static class UConfig_104911* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_104911>();
	}
};
static_assert(alignof(UConfig_104911) == 0x000008, "Wrong alignment on UConfig_104911");
static_assert(sizeof(UConfig_104911) == 0x000100, "Wrong size on UConfig_104911");
static_assert(offsetof(UConfig_104911, PercentDamageHealthType) == 0x000098, "Member 'UConfig_104911::PercentDamageHealthType' has a wrong offset!");
static_assert(offsetof(UConfig_104911, DamagePercentCurveMap) == 0x0000A0, "Member 'UConfig_104911::DamagePercentCurveMap' has a wrong offset!");
static_assert(offsetof(UConfig_104911, AngerValueType) == 0x0000F0, "Member 'UConfig_104911::AngerValueType' has a wrong offset!");

// Class Hero_1049.EffectiveComponent_10491101
// 0x0000 (0x1C00 - 0x1C00)
class UEffectiveComponent_10491101 final : public UMarvelAgentEffectiveComponent
{
public:
	class UConfig_104911* GetConfig_104911();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EffectiveComponent_10491101">();
	}
	static class UEffectiveComponent_10491101* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEffectiveComponent_10491101>();
	}
};
static_assert(alignof(UEffectiveComponent_10491101) == 0x000010, "Wrong alignment on UEffectiveComponent_10491101");
static_assert(sizeof(UEffectiveComponent_10491101) == 0x001C00, "Wrong size on UEffectiveComponent_10491101");

// Class Hero_1049.Cue_Ability_Loop_104911
// 0x00D8 (0x0ED8 - 0x0E00)
class ACue_Ability_Loop_104911 final : public AMarvelCueNotify_Ability
{
public:
	class UFXSystemAsset*                         LeftNormalFX;                                      // 0x0E00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFXSystemAsset*                         LeftFullAngerFX;                                   // 0x0E08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFXSystemAsset*                         RightNormalFX;                                     // 0x0E10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFXSystemAsset*                         RightFullAngerFX;                                  // 0x0E18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LeftFXSocketName;                                  // 0x0E20(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RightFXSocketName;                                 // 0x0E2C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               LeftFXRelativeRotator;                             // 0x0E38(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               RightFXRelativeRotator;                            // 0x0E50(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   AlphaParamName;                                    // 0x0E68(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DissolveParamName;                                 // 0x0E74(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MaterialParamName;                                 // 0x0E80(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AngerMaterialSlotName;                             // 0x0E8C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               Mid;                                               // 0x0E98(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLastTimeWolverineIsFullAnger;                     // 0x0EA0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_EA1[0x7];                                      // 0x0EA1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AWolverineCharacter*                    WolverineCharacter;                                // 0x0EA8(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFXSystemComponent*                     LeftHandNormalFXComponent;                         // 0x0EB0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFXSystemComponent*                     LeftHandFullAngerFXComponent;                      // 0x0EB8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFXSystemComponent*                     RightHandNormalFXComponent;                        // 0x0EC0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFXSystemComponent*                     RightHandFullAngerFXComponent;                     // 0x0EC8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WolverineFullAngerValue;                           // 0x0ED0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_ED4[0x4];                                      // 0x0ED4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Ability_Loop_104911">();
	}
	static class ACue_Ability_Loop_104911* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Ability_Loop_104911>();
	}
};
static_assert(alignof(ACue_Ability_Loop_104911) == 0x000008, "Wrong alignment on ACue_Ability_Loop_104911");
static_assert(sizeof(ACue_Ability_Loop_104911) == 0x000ED8, "Wrong size on ACue_Ability_Loop_104911");
static_assert(offsetof(ACue_Ability_Loop_104911, LeftNormalFX) == 0x000E00, "Member 'ACue_Ability_Loop_104911::LeftNormalFX' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_104911, LeftFullAngerFX) == 0x000E08, "Member 'ACue_Ability_Loop_104911::LeftFullAngerFX' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_104911, RightNormalFX) == 0x000E10, "Member 'ACue_Ability_Loop_104911::RightNormalFX' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_104911, RightFullAngerFX) == 0x000E18, "Member 'ACue_Ability_Loop_104911::RightFullAngerFX' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_104911, LeftFXSocketName) == 0x000E20, "Member 'ACue_Ability_Loop_104911::LeftFXSocketName' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_104911, RightFXSocketName) == 0x000E2C, "Member 'ACue_Ability_Loop_104911::RightFXSocketName' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_104911, LeftFXRelativeRotator) == 0x000E38, "Member 'ACue_Ability_Loop_104911::LeftFXRelativeRotator' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_104911, RightFXRelativeRotator) == 0x000E50, "Member 'ACue_Ability_Loop_104911::RightFXRelativeRotator' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_104911, AlphaParamName) == 0x000E68, "Member 'ACue_Ability_Loop_104911::AlphaParamName' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_104911, DissolveParamName) == 0x000E74, "Member 'ACue_Ability_Loop_104911::DissolveParamName' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_104911, MaterialParamName) == 0x000E80, "Member 'ACue_Ability_Loop_104911::MaterialParamName' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_104911, AngerMaterialSlotName) == 0x000E8C, "Member 'ACue_Ability_Loop_104911::AngerMaterialSlotName' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_104911, Mid) == 0x000E98, "Member 'ACue_Ability_Loop_104911::Mid' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_104911, bLastTimeWolverineIsFullAnger) == 0x000EA0, "Member 'ACue_Ability_Loop_104911::bLastTimeWolverineIsFullAnger' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_104911, WolverineCharacter) == 0x000EA8, "Member 'ACue_Ability_Loop_104911::WolverineCharacter' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_104911, LeftHandNormalFXComponent) == 0x000EB0, "Member 'ACue_Ability_Loop_104911::LeftHandNormalFXComponent' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_104911, LeftHandFullAngerFXComponent) == 0x000EB8, "Member 'ACue_Ability_Loop_104911::LeftHandFullAngerFXComponent' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_104911, RightHandNormalFXComponent) == 0x000EC0, "Member 'ACue_Ability_Loop_104911::RightHandNormalFXComponent' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_104911, RightHandFullAngerFXComponent) == 0x000EC8, "Member 'ACue_Ability_Loop_104911::RightHandFullAngerFXComponent' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_104911, WolverineFullAngerValue) == 0x000ED0, "Member 'ACue_Ability_Loop_104911::WolverineFullAngerValue' has a wrong offset!");

// Class Hero_1049.Config_104921
// 0x0118 (0x01B0 - 0x0098)
class UConfig_104921 final : public UMarvelAbilityConfig
{
public:
	int32                                         RageBuffID;                                        // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RageBuffExtraDuration;                             // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRageInfo_104921>               RageGainFromAbilityHit;                            // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FMarvelGameplayTagRequirements         AbilityHitTargetRequirements;                      // 0x00B0(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FRageInfo_104921>               RageGainFromAbilityCast;                           // 0x0180(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         RageGainFromDamageInterval;                        // 0x0190(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RageGainFromDamageEachTime;                        // 0x0194(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           FullRageHairTag;                                   // 0x0198(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           FullRageScreenFXTag;                               // 0x01A4(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_104921">();
	}
	static class UConfig_104921* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_104921>();
	}
};
static_assert(alignof(UConfig_104921) == 0x000008, "Wrong alignment on UConfig_104921");
static_assert(sizeof(UConfig_104921) == 0x0001B0, "Wrong size on UConfig_104921");
static_assert(offsetof(UConfig_104921, RageBuffID) == 0x000098, "Member 'UConfig_104921::RageBuffID' has a wrong offset!");
static_assert(offsetof(UConfig_104921, RageBuffExtraDuration) == 0x00009C, "Member 'UConfig_104921::RageBuffExtraDuration' has a wrong offset!");
static_assert(offsetof(UConfig_104921, RageGainFromAbilityHit) == 0x0000A0, "Member 'UConfig_104921::RageGainFromAbilityHit' has a wrong offset!");
static_assert(offsetof(UConfig_104921, AbilityHitTargetRequirements) == 0x0000B0, "Member 'UConfig_104921::AbilityHitTargetRequirements' has a wrong offset!");
static_assert(offsetof(UConfig_104921, RageGainFromAbilityCast) == 0x000180, "Member 'UConfig_104921::RageGainFromAbilityCast' has a wrong offset!");
static_assert(offsetof(UConfig_104921, RageGainFromDamageInterval) == 0x000190, "Member 'UConfig_104921::RageGainFromDamageInterval' has a wrong offset!");
static_assert(offsetof(UConfig_104921, RageGainFromDamageEachTime) == 0x000194, "Member 'UConfig_104921::RageGainFromDamageEachTime' has a wrong offset!");
static_assert(offsetof(UConfig_104921, FullRageHairTag) == 0x000198, "Member 'UConfig_104921::FullRageHairTag' has a wrong offset!");
static_assert(offsetof(UConfig_104921, FullRageScreenFXTag) == 0x0001A4, "Member 'UConfig_104921::FullRageScreenFXTag' has a wrong offset!");

// Class Hero_1049.BuffAbility_10492101
// 0x0008 (0x1188 - 0x1180)
class UBuffAbility_10492101 : public UMarvelAttributeFallBaseAbility
{
public:
	class UCurveFloat*                            AttenuationSpeedCurve;                             // 0x1180(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	float GetAverageAttenuationSpeed() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BuffAbility_10492101">();
	}
	static class UBuffAbility_10492101* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBuffAbility_10492101>();
	}
};
static_assert(alignof(UBuffAbility_10492101) == 0x000008, "Wrong alignment on UBuffAbility_10492101");
static_assert(sizeof(UBuffAbility_10492101) == 0x001188, "Wrong size on UBuffAbility_10492101");
static_assert(offsetof(UBuffAbility_10492101, AttenuationSpeedCurve) == 0x001180, "Member 'UBuffAbility_10492101::AttenuationSpeedCurve' has a wrong offset!");

// Class Hero_1049.Ability_104921
// 0x0078 (0x25C8 - 0x2550)
class UAbility_104921 : public UMarvelGameplayAbility
{
public:
	struct FActiveGameplayEffectHandle            RageBuffHandle;                                    // 0x2550(0x0008)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UConfig_104921*                         CachedMyConfig;                                    // 0x2558(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBuffAbility_10492101*                  CachedMyBuffAbilityCDO;                            // 0x2560(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2568[0x60];                                    // 0x2568(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddPassiveRageMeter(float InValue);
	class UBuffAbility_10492101* GetMyBuffAbilityCDO();
	class UConfig_104921* GetMyConfig();
	void NotifyRemoveRage(const struct FGameplayEventData& Payload);
	void OnOwnerAbilityActivated(class UGameplayAbility* InAbility);
	void OnOwnerAbilityHit(class UGameplayAbility* InAbility, const struct FMarvelAbilityHitParams& HitParams, const TArray<struct FHitResult>& InHitResults);
	void OnOwnerCharacterDeath(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnOwnerCharacterReborn(class AActor* InSourceActor, const struct FCharacterRebornParam& RebornParam);
	void OnOwnerTakeDamage(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& InModifierParameterHandle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_104921">();
	}
	static class UAbility_104921* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_104921>();
	}
};
static_assert(alignof(UAbility_104921) == 0x000008, "Wrong alignment on UAbility_104921");
static_assert(sizeof(UAbility_104921) == 0x0025C8, "Wrong size on UAbility_104921");
static_assert(offsetof(UAbility_104921, RageBuffHandle) == 0x002550, "Member 'UAbility_104921::RageBuffHandle' has a wrong offset!");
static_assert(offsetof(UAbility_104921, CachedMyConfig) == 0x002558, "Member 'UAbility_104921::CachedMyConfig' has a wrong offset!");
static_assert(offsetof(UAbility_104921, CachedMyBuffAbilityCDO) == 0x002560, "Member 'UAbility_104921::CachedMyBuffAbilityCDO' has a wrong offset!");

// Class Hero_1049.BuffCue_10492101
// 0x0110 (0x10F8 - 0x0FE8)
class ABuffCue_10492101 final : public AMarvelCueNotify_Buff
{
public:
	class FName                                   RageMaterialParamName;                             // 0x0FE8(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AudioParamName;                                    // 0x0FF4(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            AudioParamCurve;                                   // 0x1000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RageReachToMaxAudioID;                             // 0x1008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RageReachToZeroAudioID;                            // 0x100C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      FireMeshNiagara;                                   // 0x1010(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraSystem*                         NS_FireMesh;                                       // 0x1018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraSystem*                         NS_FullRageInstantFX;                              // 0x1020(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFXSystemAsset*                         EndFX_WhenDeath;                                   // 0x1028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class FName, class UCurveFloat*>         RageMeterToFXParameters;                           // 0x1030(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, class UCurveFloat*>         RageMeterToMaterialParameters;                     // 0x1080(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                         FireMeshLowAlphaValue;                             // 0x10D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10D4[0x4];                                     // 0x10D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelBaseCharacter*                   OwningCharacter;                                   // 0x10D8(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10E0[0x14];                                    // 0x10E0(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastTimeRageValue;                                 // 0x10F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnOwnedTagUpdate(const struct FGameplayTag& TagUpdated, bool bTagExists);
	void OnRageReachToMax();
	void OnRageReachToZero();
	void UpdateAudioParametersByRage(float InValue);
	void UpdateFXParametersByRage(float InValue);
	void UpdateMaterialParametersByRage(float InValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BuffCue_10492101">();
	}
	static class ABuffCue_10492101* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABuffCue_10492101>();
	}
};
static_assert(alignof(ABuffCue_10492101) == 0x000008, "Wrong alignment on ABuffCue_10492101");
static_assert(sizeof(ABuffCue_10492101) == 0x0010F8, "Wrong size on ABuffCue_10492101");
static_assert(offsetof(ABuffCue_10492101, RageMaterialParamName) == 0x000FE8, "Member 'ABuffCue_10492101::RageMaterialParamName' has a wrong offset!");
static_assert(offsetof(ABuffCue_10492101, AudioParamName) == 0x000FF4, "Member 'ABuffCue_10492101::AudioParamName' has a wrong offset!");
static_assert(offsetof(ABuffCue_10492101, AudioParamCurve) == 0x001000, "Member 'ABuffCue_10492101::AudioParamCurve' has a wrong offset!");
static_assert(offsetof(ABuffCue_10492101, RageReachToMaxAudioID) == 0x001008, "Member 'ABuffCue_10492101::RageReachToMaxAudioID' has a wrong offset!");
static_assert(offsetof(ABuffCue_10492101, RageReachToZeroAudioID) == 0x00100C, "Member 'ABuffCue_10492101::RageReachToZeroAudioID' has a wrong offset!");
static_assert(offsetof(ABuffCue_10492101, FireMeshNiagara) == 0x001010, "Member 'ABuffCue_10492101::FireMeshNiagara' has a wrong offset!");
static_assert(offsetof(ABuffCue_10492101, NS_FireMesh) == 0x001018, "Member 'ABuffCue_10492101::NS_FireMesh' has a wrong offset!");
static_assert(offsetof(ABuffCue_10492101, NS_FullRageInstantFX) == 0x001020, "Member 'ABuffCue_10492101::NS_FullRageInstantFX' has a wrong offset!");
static_assert(offsetof(ABuffCue_10492101, EndFX_WhenDeath) == 0x001028, "Member 'ABuffCue_10492101::EndFX_WhenDeath' has a wrong offset!");
static_assert(offsetof(ABuffCue_10492101, RageMeterToFXParameters) == 0x001030, "Member 'ABuffCue_10492101::RageMeterToFXParameters' has a wrong offset!");
static_assert(offsetof(ABuffCue_10492101, RageMeterToMaterialParameters) == 0x001080, "Member 'ABuffCue_10492101::RageMeterToMaterialParameters' has a wrong offset!");
static_assert(offsetof(ABuffCue_10492101, FireMeshLowAlphaValue) == 0x0010D0, "Member 'ABuffCue_10492101::FireMeshLowAlphaValue' has a wrong offset!");
static_assert(offsetof(ABuffCue_10492101, OwningCharacter) == 0x0010D8, "Member 'ABuffCue_10492101::OwningCharacter' has a wrong offset!");
static_assert(offsetof(ABuffCue_10492101, LastTimeRageValue) == 0x0010F4, "Member 'ABuffCue_10492101::LastTimeRageValue' has a wrong offset!");

// Class Hero_1049.AnimNotifyState_WolverineTimedNiagaraWithAngerParam
// 0x0058 (0x0230 - 0x01D8)
class UAnimNotifyState_WolverineTimedNiagaraWithAngerParam final : public UAnimNotifyState_TimedNiagaraEffectEx
{
public:
	TMap<class FName, class UCurveFloat*>         RageMeterToFXParameters;                           // 0x01D8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      CachedSpawnNiagara;                                // 0x0228(0x0008)(ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_WolverineTimedNiagaraWithAngerParam">();
	}
	static class UAnimNotifyState_WolverineTimedNiagaraWithAngerParam* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_WolverineTimedNiagaraWithAngerParam>();
	}
};
static_assert(alignof(UAnimNotifyState_WolverineTimedNiagaraWithAngerParam) == 0x000008, "Wrong alignment on UAnimNotifyState_WolverineTimedNiagaraWithAngerParam");
static_assert(sizeof(UAnimNotifyState_WolverineTimedNiagaraWithAngerParam) == 0x000230, "Wrong size on UAnimNotifyState_WolverineTimedNiagaraWithAngerParam");
static_assert(offsetof(UAnimNotifyState_WolverineTimedNiagaraWithAngerParam, RageMeterToFXParameters) == 0x0001D8, "Member 'UAnimNotifyState_WolverineTimedNiagaraWithAngerParam::RageMeterToFXParameters' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_WolverineTimedNiagaraWithAngerParam, CachedSpawnNiagara) == 0x000228, "Member 'UAnimNotifyState_WolverineTimedNiagaraWithAngerParam::CachedSpawnNiagara' has a wrong offset!");

// Class Hero_1049.EffectiveComponent_10493101
// 0x0000 (0x1C00 - 0x1C00)
class UEffectiveComponent_10493101 final : public UMarvelAgentEffectiveComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EffectiveComponent_10493101">();
	}
	static class UEffectiveComponent_10493101* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEffectiveComponent_10493101>();
	}
};
static_assert(alignof(UEffectiveComponent_10493101) == 0x000010, "Wrong alignment on UEffectiveComponent_10493101");
static_assert(sizeof(UEffectiveComponent_10493101) == 0x001C00, "Wrong size on UEffectiveComponent_10493101");

// Class Hero_1049.BuffAbility_10493101
// 0x0000 (0x10E8 - 0x10E8)
class UBuffAbility_10493101 final : public UMarvelEffectGameplayAbility
{
public:
	void OnWolverineParticipateKill();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BuffAbility_10493101">();
	}
	static class UBuffAbility_10493101* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBuffAbility_10493101>();
	}
};
static_assert(alignof(UBuffAbility_10493101) == 0x000008, "Wrong alignment on UBuffAbility_10493101");
static_assert(sizeof(UBuffAbility_10493101) == 0x0010E8, "Wrong size on UBuffAbility_10493101");

// Class Hero_1049.BuffCue_10493101
// 0x0080 (0x1068 - 0x0FE8)
class ABuffCue_10493101 final : public AMarvelCueNotify_Buff
{
public:
	class UPoseableMeshComponent*                 PoseMesh;                                          // 0x0FE8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPoseableMeshComponent*                 WeaponMesh;                                        // 0x0FF0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     AllyPerspectiveMaterial;                           // 0x0FF8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     EnemyPerspectiveMaterial;                          // 0x1000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnemyShouldSee;                                   // 0x1008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1009[0x3];                                     // 0x1009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PassedTime;                                        // 0x100C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TotalTime;                                         // 0x1010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1014[0x4];                                     // 0x1014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FSpecialMeshHideBoneSetting> HeroMeshSpecialSettings;                           // 0x1018(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BuffCue_10493101">();
	}
	static class ABuffCue_10493101* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABuffCue_10493101>();
	}
};
static_assert(alignof(ABuffCue_10493101) == 0x000008, "Wrong alignment on ABuffCue_10493101");
static_assert(sizeof(ABuffCue_10493101) == 0x001068, "Wrong size on ABuffCue_10493101");
static_assert(offsetof(ABuffCue_10493101, PoseMesh) == 0x000FE8, "Member 'ABuffCue_10493101::PoseMesh' has a wrong offset!");
static_assert(offsetof(ABuffCue_10493101, WeaponMesh) == 0x000FF0, "Member 'ABuffCue_10493101::WeaponMesh' has a wrong offset!");
static_assert(offsetof(ABuffCue_10493101, AllyPerspectiveMaterial) == 0x000FF8, "Member 'ABuffCue_10493101::AllyPerspectiveMaterial' has a wrong offset!");
static_assert(offsetof(ABuffCue_10493101, EnemyPerspectiveMaterial) == 0x001000, "Member 'ABuffCue_10493101::EnemyPerspectiveMaterial' has a wrong offset!");
static_assert(offsetof(ABuffCue_10493101, bEnemyShouldSee) == 0x001008, "Member 'ABuffCue_10493101::bEnemyShouldSee' has a wrong offset!");
static_assert(offsetof(ABuffCue_10493101, PassedTime) == 0x00100C, "Member 'ABuffCue_10493101::PassedTime' has a wrong offset!");
static_assert(offsetof(ABuffCue_10493101, TotalTime) == 0x001010, "Member 'ABuffCue_10493101::TotalTime' has a wrong offset!");
static_assert(offsetof(ABuffCue_10493101, HeroMeshSpecialSettings) == 0x001018, "Member 'ABuffCue_10493101::HeroMeshSpecialSettings' has a wrong offset!");

// Class Hero_1049.Cue_HitImpact_10494101
// 0x0008 (0x06B8 - 0x06B0)
class UCue_HitImpact_10494101 final : public UMarvelCueNotify_MeleeHitImpact
{
public:
	int32                                         NormalAudioID;                                     // 0x06B0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FullRageAudioID;                                   // 0x06B4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_HitImpact_10494101">();
	}
	static class UCue_HitImpact_10494101* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCue_HitImpact_10494101>();
	}
};
static_assert(alignof(UCue_HitImpact_10494101) == 0x000008, "Wrong alignment on UCue_HitImpact_10494101");
static_assert(sizeof(UCue_HitImpact_10494101) == 0x0006B8, "Wrong size on UCue_HitImpact_10494101");
static_assert(offsetof(UCue_HitImpact_10494101, NormalAudioID) == 0x0006B0, "Member 'UCue_HitImpact_10494101::NormalAudioID' has a wrong offset!");
static_assert(offsetof(UCue_HitImpact_10494101, FullRageAudioID) == 0x0006B4, "Member 'UCue_HitImpact_10494101::FullRageAudioID' has a wrong offset!");

// Class Hero_1049.AnimNotify_WolverinePlayNiagaraByAnger
// 0x0060 (0x03C0 - 0x0360)
class UAnimNotify_WolverinePlayNiagaraByAnger final : public UAnimNotify_PlayNiagaraEffectEx
{
public:
	TSoftObjectPtr<class UNiagaraSystem>          NormalFX;                                          // 0x0358(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UNiagaraSystem>          FullAngerFX;                                       // 0x0388(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsWolverineFullAnger;                             // 0x03B8(0x0001)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3B9[0x7];                                      // 0x03B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_WolverinePlayNiagaraByAnger">();
	}
	static class UAnimNotify_WolverinePlayNiagaraByAnger* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_WolverinePlayNiagaraByAnger>();
	}
};
static_assert(alignof(UAnimNotify_WolverinePlayNiagaraByAnger) == 0x000010, "Wrong alignment on UAnimNotify_WolverinePlayNiagaraByAnger");
static_assert(sizeof(UAnimNotify_WolverinePlayNiagaraByAnger) == 0x0003C0, "Wrong size on UAnimNotify_WolverinePlayNiagaraByAnger");
static_assert(offsetof(UAnimNotify_WolverinePlayNiagaraByAnger, NormalFX) == 0x000358, "Member 'UAnimNotify_WolverinePlayNiagaraByAnger::NormalFX' has a wrong offset!");
static_assert(offsetof(UAnimNotify_WolverinePlayNiagaraByAnger, FullAngerFX) == 0x000388, "Member 'UAnimNotify_WolverinePlayNiagaraByAnger::FullAngerFX' has a wrong offset!");
static_assert(offsetof(UAnimNotify_WolverinePlayNiagaraByAnger, bIsWolverineFullAnger) == 0x0003B8, "Member 'UAnimNotify_WolverinePlayNiagaraByAnger::bIsWolverineFullAnger' has a wrong offset!");

// Class Hero_1049.Config_104951
// 0x0B70 (0x0C08 - 0x0098)
class UConfig_104951 final : public UMarvelAbilityConfig
{
public:
	struct FDashAbilityInfo                       DashAbilityInfo;                                   // 0x0098(0x0B70)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_104951">();
	}
	static class UConfig_104951* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_104951>();
	}
};
static_assert(alignof(UConfig_104951) == 0x000008, "Wrong alignment on UConfig_104951");
static_assert(sizeof(UConfig_104951) == 0x000C08, "Wrong size on UConfig_104951");
static_assert(offsetof(UConfig_104951, DashAbilityInfo) == 0x000098, "Member 'UConfig_104951::DashAbilityInfo' has a wrong offset!");

// Class Hero_1049.Ability_104951
// 0x0020 (0x2578 - 0x2558)
class UAbility_104951 : public UAbility_108
{
public:
	FMulticastInlineDelegateProperty_             OnStateChangeDelegate;                             // 0x2558(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	ERushState_104951                             CurrentState;                                      // 0x2568(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2569[0x7];                                     // 0x2569(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelAbilityTask_Dash*                DashTask;                                          // 0x2570(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	ERushState_104951 GetCurrentState();
	void OnDashFinish(EDashStopReason InReason);
	void OnRep_CurrentState();
	void SetCurrentState(ERushState_104951 NewStat);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_104951">();
	}
	static class UAbility_104951* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_104951>();
	}
};
static_assert(alignof(UAbility_104951) == 0x000008, "Wrong alignment on UAbility_104951");
static_assert(sizeof(UAbility_104951) == 0x002578, "Wrong size on UAbility_104951");
static_assert(offsetof(UAbility_104951, OnStateChangeDelegate) == 0x002558, "Member 'UAbility_104951::OnStateChangeDelegate' has a wrong offset!");
static_assert(offsetof(UAbility_104951, CurrentState) == 0x002568, "Member 'UAbility_104951::CurrentState' has a wrong offset!");
static_assert(offsetof(UAbility_104951, DashTask) == 0x002570, "Member 'UAbility_104951::DashTask' has a wrong offset!");

// Class Hero_1049.Cue_Ability_Loop_10495101
// 0x00B8 (0x0EB8 - 0x0E00)
class ACue_Ability_Loop_10495101 final : public AMarvelCueNotify_Ability
{
public:
	class UFXSystemAsset*                         SmokeTemplate;                                     // 0x0E00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SmokeLocationOffset;                               // 0x0E08(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SmokeRotationOffset;                               // 0x0E20(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UFXSystemAsset*                         Attack01Template;                                  // 0x0E38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Attack01LocationOffset;                            // 0x0E40(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Attack01RotationOffset;                            // 0x0E58(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UFXSystemAsset*                         Attack02Template;                                  // 0x0E70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Attack02LocationOffset;                            // 0x0E78(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Attack02RotationOffset;                            // 0x0E90(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AMarvelBaseCharacter*                   WolverineCharacter;                                // 0x0EA8(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAbility_104951*                        WolverineAbility;                                  // 0x0EB0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnWolverineStateChange(ERushState_104951 InState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Ability_Loop_10495101">();
	}
	static class ACue_Ability_Loop_10495101* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Ability_Loop_10495101>();
	}
};
static_assert(alignof(ACue_Ability_Loop_10495101) == 0x000008, "Wrong alignment on ACue_Ability_Loop_10495101");
static_assert(sizeof(ACue_Ability_Loop_10495101) == 0x000EB8, "Wrong size on ACue_Ability_Loop_10495101");
static_assert(offsetof(ACue_Ability_Loop_10495101, SmokeTemplate) == 0x000E00, "Member 'ACue_Ability_Loop_10495101::SmokeTemplate' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10495101, SmokeLocationOffset) == 0x000E08, "Member 'ACue_Ability_Loop_10495101::SmokeLocationOffset' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10495101, SmokeRotationOffset) == 0x000E20, "Member 'ACue_Ability_Loop_10495101::SmokeRotationOffset' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10495101, Attack01Template) == 0x000E38, "Member 'ACue_Ability_Loop_10495101::Attack01Template' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10495101, Attack01LocationOffset) == 0x000E40, "Member 'ACue_Ability_Loop_10495101::Attack01LocationOffset' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10495101, Attack01RotationOffset) == 0x000E58, "Member 'ACue_Ability_Loop_10495101::Attack01RotationOffset' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10495101, Attack02Template) == 0x000E70, "Member 'ACue_Ability_Loop_10495101::Attack02Template' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10495101, Attack02LocationOffset) == 0x000E78, "Member 'ACue_Ability_Loop_10495101::Attack02LocationOffset' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10495101, Attack02RotationOffset) == 0x000E90, "Member 'ACue_Ability_Loop_10495101::Attack02RotationOffset' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10495101, WolverineCharacter) == 0x000EA8, "Member 'ACue_Ability_Loop_10495101::WolverineCharacter' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10495101, WolverineAbility) == 0x000EB0, "Member 'ACue_Ability_Loop_10495101::WolverineAbility' has a wrong offset!");

// Class Hero_1049.BuffCue_10496101
// 0x0020 (0x1008 - 0x0FE8)
class ABuffCue_10496101 final : public AMarvelCueNotify_Buff
{
public:
	class UMaterialInterface*                     MetalMaterial;                                     // 0x0FE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHiddenOriginalMesh;                               // 0x0FF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FF1[0x7];                                      // 0x0FF1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelShellMeshComponent*              ShellComponent;                                    // 0x0FF8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1000[0x8];                                     // 0x1000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BuffCue_10496101">();
	}
	static class ABuffCue_10496101* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABuffCue_10496101>();
	}
};
static_assert(alignof(ABuffCue_10496101) == 0x000008, "Wrong alignment on ABuffCue_10496101");
static_assert(sizeof(ABuffCue_10496101) == 0x001008, "Wrong size on ABuffCue_10496101");
static_assert(offsetof(ABuffCue_10496101, MetalMaterial) == 0x000FE8, "Member 'ABuffCue_10496101::MetalMaterial' has a wrong offset!");
static_assert(offsetof(ABuffCue_10496101, bHiddenOriginalMesh) == 0x000FF0, "Member 'ABuffCue_10496101::bHiddenOriginalMesh' has a wrong offset!");
static_assert(offsetof(ABuffCue_10496101, ShellComponent) == 0x000FF8, "Member 'ABuffCue_10496101::ShellComponent' has a wrong offset!");

// Class Hero_1049.Config_104971
// 0x00C0 (0x0158 - 0x0098)
class UConfig_104971 : public UMarvelAbilityConfig
{
public:
	int32                                         GrabbedTargetCount;                                // 0x0098(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GrabbedScopeID;                                    // 0x009C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GrabbedDistanceCheckThreshold;                     // 0x00A0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWolverineShiftJumpParam               JumpParam;                                         // 0x00A8(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	ETriggerSpecialLeftTime                       TriggerSpecialLeftTime;                            // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<int32>                                   SpecialLeftBuffSet;                                // 0x0108(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_104971">();
	}
	static class UConfig_104971* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_104971>();
	}
};
static_assert(alignof(UConfig_104971) == 0x000008, "Wrong alignment on UConfig_104971");
static_assert(sizeof(UConfig_104971) == 0x000158, "Wrong size on UConfig_104971");
static_assert(offsetof(UConfig_104971, GrabbedTargetCount) == 0x000098, "Member 'UConfig_104971::GrabbedTargetCount' has a wrong offset!");
static_assert(offsetof(UConfig_104971, GrabbedScopeID) == 0x00009C, "Member 'UConfig_104971::GrabbedScopeID' has a wrong offset!");
static_assert(offsetof(UConfig_104971, GrabbedDistanceCheckThreshold) == 0x0000A0, "Member 'UConfig_104971::GrabbedDistanceCheckThreshold' has a wrong offset!");
static_assert(offsetof(UConfig_104971, JumpParam) == 0x0000A8, "Member 'UConfig_104971::JumpParam' has a wrong offset!");
static_assert(offsetof(UConfig_104971, TriggerSpecialLeftTime) == 0x000100, "Member 'UConfig_104971::TriggerSpecialLeftTime' has a wrong offset!");
static_assert(offsetof(UConfig_104971, SpecialLeftBuffSet) == 0x000108, "Member 'UConfig_104971::SpecialLeftBuffSet' has a wrong offset!");

// Class Hero_1049.Ability_104971
// 0x01E8 (0x2738 - 0x2550)
class UAbility_104971 : public UMarvelGameplayAbility
{
public:
	class AWolverineCharacter*                    OwnerCharacter;                                    // 0x2550(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPredictionKey                         ReplicateLaunchVelocityKey;                        // 0x2558(0x00A0)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPredictionKey                         SetLaunchParamKey;                                 // 0x25F8(0x00A0)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelBaseAbilitySystemComponent*      ASC;                                               // 0x2698(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWolverineMovementComponent*            OwnerMoveComp;                                     // 0x26A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UConfig_104971*                         Config;                                            // 0x26A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CacheGravityScale;                                 // 0x26B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CacheMaxAcceleration;                              // 0x26B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CachedMaxSpeed;                                    // 0x26B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26BC[0x4];                                     // 0x26BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class ACharacter*>                       MoveIgnoreCharacterSet;                            // 0x26C0(0x0050)(NativeAccessSpecifierPublic)
	bool                                          bHitTarget;                                        // 0x2710(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERushState_104971                             CurrentState;                                      // 0x2711(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnterDropDown;                                    // 0x2712(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnterEndState;                                    // 0x2713(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2714[0x4];                                     // 0x2714(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ACharacter*>                     GrabbedTargets;                                    // 0x2718(0x0010)(BlueprintVisible, Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	bool                                          bSpecialLeftStatusApplied;                         // 0x2728(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2729[0x7];                                     // 0x2729(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelAbilityTask_WaitTargetData*      ServerWaitGrabTargetTask;                          // 0x2730(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void AddMoveIgnoreActor(class ACharacter* InActor);
	struct FVector CalcShiftJumpVelocity();
	ERushState_104971 GetCurrentState();
	void K2_ApplySpecialLeftStatus();
	void K2_EnterEndState();
	void K2_OnShiftJumpLaunched();
	bool K2_ShouldEndScope();
	void LaunchCharacter();
	void MulticastEnterDropDown();
	void OnHitTarget();
	void OnRep_CurrentState();
	void OnRep_GrabbedTargets();
	void OnServerReceiveGrabTarget(const struct FGameplayAbilityTargetDataHandle& Data);
	void OnServerReceiveLaunchVelocity(const struct FGameplayAbilityTargetDataHandle& Data);
	void RegisterGrabTarget(class ACharacter* InTarget);
	void RemoveAllMoveIgnoreCharacters();
	void RemoveMoveIgnoreActor(class ACharacter* InActor);
	void ResetShiftJumpParameters();
	void SetCurrentState(ERushState_104971 NewStat);
	void SetupShiftJumpParameters(struct FVector* InVelocity);
	void TryGrabTarget(class ACharacter* InTarget);
	void UpdateShiftJumpUpState(float DeltaSeconds, const struct FVector& OldLocation, const struct FVector& OldVelocity);

	struct FVector GetGrabbedRelativeLocation(class ACharacter* InTarget, const struct FVector& OriginRelativeLocation) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_104971">();
	}
	static class UAbility_104971* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_104971>();
	}
};
static_assert(alignof(UAbility_104971) == 0x000008, "Wrong alignment on UAbility_104971");
static_assert(sizeof(UAbility_104971) == 0x002738, "Wrong size on UAbility_104971");
static_assert(offsetof(UAbility_104971, OwnerCharacter) == 0x002550, "Member 'UAbility_104971::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(UAbility_104971, ReplicateLaunchVelocityKey) == 0x002558, "Member 'UAbility_104971::ReplicateLaunchVelocityKey' has a wrong offset!");
static_assert(offsetof(UAbility_104971, SetLaunchParamKey) == 0x0025F8, "Member 'UAbility_104971::SetLaunchParamKey' has a wrong offset!");
static_assert(offsetof(UAbility_104971, ASC) == 0x002698, "Member 'UAbility_104971::ASC' has a wrong offset!");
static_assert(offsetof(UAbility_104971, OwnerMoveComp) == 0x0026A0, "Member 'UAbility_104971::OwnerMoveComp' has a wrong offset!");
static_assert(offsetof(UAbility_104971, Config) == 0x0026A8, "Member 'UAbility_104971::Config' has a wrong offset!");
static_assert(offsetof(UAbility_104971, CacheGravityScale) == 0x0026B0, "Member 'UAbility_104971::CacheGravityScale' has a wrong offset!");
static_assert(offsetof(UAbility_104971, CacheMaxAcceleration) == 0x0026B4, "Member 'UAbility_104971::CacheMaxAcceleration' has a wrong offset!");
static_assert(offsetof(UAbility_104971, CachedMaxSpeed) == 0x0026B8, "Member 'UAbility_104971::CachedMaxSpeed' has a wrong offset!");
static_assert(offsetof(UAbility_104971, MoveIgnoreCharacterSet) == 0x0026C0, "Member 'UAbility_104971::MoveIgnoreCharacterSet' has a wrong offset!");
static_assert(offsetof(UAbility_104971, bHitTarget) == 0x002710, "Member 'UAbility_104971::bHitTarget' has a wrong offset!");
static_assert(offsetof(UAbility_104971, CurrentState) == 0x002711, "Member 'UAbility_104971::CurrentState' has a wrong offset!");
static_assert(offsetof(UAbility_104971, bEnterDropDown) == 0x002712, "Member 'UAbility_104971::bEnterDropDown' has a wrong offset!");
static_assert(offsetof(UAbility_104971, bEnterEndState) == 0x002713, "Member 'UAbility_104971::bEnterEndState' has a wrong offset!");
static_assert(offsetof(UAbility_104971, GrabbedTargets) == 0x002718, "Member 'UAbility_104971::GrabbedTargets' has a wrong offset!");
static_assert(offsetof(UAbility_104971, bSpecialLeftStatusApplied) == 0x002728, "Member 'UAbility_104971::bSpecialLeftStatusApplied' has a wrong offset!");
static_assert(offsetof(UAbility_104971, ServerWaitGrabTargetTask) == 0x002730, "Member 'UAbility_104971::ServerWaitGrabTargetTask' has a wrong offset!");

// Class Hero_1049.Ability_AirGrab_104971
// 0x0010 (0x1168 - 0x1158)
class UAbility_AirGrab_104971 : public UAbility_AirGrab
{
public:
	float                                         BeginAbilityDamage;                                // 0x1158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_115C[0x4];                                     // 0x115C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbility_104971*                        GrantedAbility;                                    // 0x1160(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_AirGrab_104971">();
	}
	static class UAbility_AirGrab_104971* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_AirGrab_104971>();
	}
};
static_assert(alignof(UAbility_AirGrab_104971) == 0x000008, "Wrong alignment on UAbility_AirGrab_104971");
static_assert(sizeof(UAbility_AirGrab_104971) == 0x001168, "Wrong size on UAbility_AirGrab_104971");
static_assert(offsetof(UAbility_AirGrab_104971, BeginAbilityDamage) == 0x001158, "Member 'UAbility_AirGrab_104971::BeginAbilityDamage' has a wrong offset!");
static_assert(offsetof(UAbility_AirGrab_104971, GrantedAbility) == 0x001160, "Member 'UAbility_AirGrab_104971::GrantedAbility' has a wrong offset!");

// Class Hero_1049.Ability_104981
// 0x0018 (0x2568 - 0x2550)
class UAbility_104981 : public UMarvelGameplayAbility
{
public:
	FMulticastInlineDelegateProperty_             AbilityStatusChangeDispatcher;                     // 0x2550(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	EAbilityStatus_104981                         CurrentStatus;                                     // 0x2560(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2561[0x7];                                     // 0x2561(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_CurrentStatus();
	void SetCurrentStatus(EAbilityStatus_104981 InStatus);

	EAbilityStatus_104981 GetCurrentStatus() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_104981">();
	}
	static class UAbility_104981* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_104981>();
	}
};
static_assert(alignof(UAbility_104981) == 0x000008, "Wrong alignment on UAbility_104981");
static_assert(sizeof(UAbility_104981) == 0x002568, "Wrong size on UAbility_104981");
static_assert(offsetof(UAbility_104981, AbilityStatusChangeDispatcher) == 0x002550, "Member 'UAbility_104981::AbilityStatusChangeDispatcher' has a wrong offset!");
static_assert(offsetof(UAbility_104981, CurrentStatus) == 0x002560, "Member 'UAbility_104981::CurrentStatus' has a wrong offset!");

// Class Hero_1049.Cue_Buff_10498105
// 0x0038 (0x1020 - 0x0FE8)
class ACue_Buff_10498105 final : public AMarvelCueNotify_Buff
{
public:
	class UMaterialInterface*                     AfterImageMaterial;                                // 0x0FE8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPoseableMeshComponent*                 PoseMesh;                                          // 0x0FF0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPoseableMeshComponent*                 WeaponMesh;                                        // 0x0FF8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TimeInterval;                                      // 0x1000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1004[0x4];                                     // 0x1004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           LoopTimerHandle;                                   // 0x1008(0x0018)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void UpdatePoseMesh(float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Buff_10498105">();
	}
	static class ACue_Buff_10498105* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Buff_10498105>();
	}
};
static_assert(alignof(ACue_Buff_10498105) == 0x000008, "Wrong alignment on ACue_Buff_10498105");
static_assert(sizeof(ACue_Buff_10498105) == 0x001020, "Wrong size on ACue_Buff_10498105");
static_assert(offsetof(ACue_Buff_10498105, AfterImageMaterial) == 0x000FE8, "Member 'ACue_Buff_10498105::AfterImageMaterial' has a wrong offset!");
static_assert(offsetof(ACue_Buff_10498105, PoseMesh) == 0x000FF0, "Member 'ACue_Buff_10498105::PoseMesh' has a wrong offset!");
static_assert(offsetof(ACue_Buff_10498105, WeaponMesh) == 0x000FF8, "Member 'ACue_Buff_10498105::WeaponMesh' has a wrong offset!");
static_assert(offsetof(ACue_Buff_10498105, TimeInterval) == 0x001000, "Member 'ACue_Buff_10498105::TimeInterval' has a wrong offset!");
static_assert(offsetof(ACue_Buff_10498105, LoopTimerHandle) == 0x001008, "Member 'ACue_Buff_10498105::LoopTimerHandle' has a wrong offset!");

// Class Hero_1049.MarvelCueNotify_TraceActor_10498101
// 0x0000 (0x0CB0 - 0x0CB0)
class AMarvelCueNotify_TraceActor_10498101 final : public AMarvelCueNotify_TraceActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCueNotify_TraceActor_10498101">();
	}
	static class AMarvelCueNotify_TraceActor_10498101* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelCueNotify_TraceActor_10498101>();
	}
};
static_assert(alignof(AMarvelCueNotify_TraceActor_10498101) == 0x000008, "Wrong alignment on AMarvelCueNotify_TraceActor_10498101");
static_assert(sizeof(AMarvelCueNotify_TraceActor_10498101) == 0x000CB0, "Wrong size on AMarvelCueNotify_TraceActor_10498101");

// Class Hero_1049.MarvelCueNotify_Ability_10498101
// 0x0030 (0x0E30 - 0x0E00)
class AMarvelCueNotify_Ability_10498101 final : public AMarvelCueNotify_Ability
{
public:
	FMulticastInlineDelegateProperty_             OnHideMaterialParamDispatcher;                     // 0x0E00(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int32                                         DashLoopAudioID;                                   // 0x0E10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E14[0x14];                                     // 0x0E14(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelBaseCharacter*                   TargetCharacter;                                   // 0x0E28(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnAbilityStatusChanged(EAbilityStatus_104981 InStatus);
	void OnOwnedTagUpdate(const struct FGameplayTag& TagUpdated, bool bTagExists);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCueNotify_Ability_10498101">();
	}
	static class AMarvelCueNotify_Ability_10498101* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelCueNotify_Ability_10498101>();
	}
};
static_assert(alignof(AMarvelCueNotify_Ability_10498101) == 0x000008, "Wrong alignment on AMarvelCueNotify_Ability_10498101");
static_assert(sizeof(AMarvelCueNotify_Ability_10498101) == 0x000E30, "Wrong size on AMarvelCueNotify_Ability_10498101");
static_assert(offsetof(AMarvelCueNotify_Ability_10498101, OnHideMaterialParamDispatcher) == 0x000E00, "Member 'AMarvelCueNotify_Ability_10498101::OnHideMaterialParamDispatcher' has a wrong offset!");
static_assert(offsetof(AMarvelCueNotify_Ability_10498101, DashLoopAudioID) == 0x000E10, "Member 'AMarvelCueNotify_Ability_10498101::DashLoopAudioID' has a wrong offset!");
static_assert(offsetof(AMarvelCueNotify_Ability_10498101, TargetCharacter) == 0x000E28, "Member 'AMarvelCueNotify_Ability_10498101::TargetCharacter' has a wrong offset!");

// Class Hero_1049.Config_104991
// 0x0ED0 (0x2200 - 0x1330)
class UConfig_104991 : public UConfig_100015
{
public:
	struct FDashAbilityInfo                       DashToTargetInfo;                                  // 0x1328(0x0B70)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         DashDurationBuffID;                                // 0x1E98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E9C[0x4];                                     // 0x1E9C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  BlockAbilityTagsWhenFlying;                        // 0x1EA0(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bBindCameraToRidingCharacter;                      // 0x1F08(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F09[0x7];                                     // 0x1F09(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  BlockAbilityTagsWhenRiding;                        // 0x1F10(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<int32, class FName>                      SocketNameMap;                                     // 0x1F78(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TargetDetachTagContainer;                          // 0x1FC8(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  WolverineDetachTagContainer;                       // 0x2030(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UCameraInterp*                          RidingCameraInterp;                                // 0x2098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExitRideWhenWolverineTakeDamage;                  // 0x20A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20A1[0x7];                                     // 0x20A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<int32>                                   SameBuffSet;                                       // 0x20A8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RemoveEffectWithTagsWhileAttach;                   // 0x20F8(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVector                                AttachCylinderOffset;                              // 0x2160(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AttachMeshOffset;                                  // 0x2178(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DetachCameraBlendTime;                             // 0x2190(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2194[0x4];                                     // 0x2194(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  ThrowAbilityTagContainer;                          // 0x2198(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_104991">();
	}
	static class UConfig_104991* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_104991>();
	}
};
static_assert(alignof(UConfig_104991) == 0x000010, "Wrong alignment on UConfig_104991");
static_assert(sizeof(UConfig_104991) == 0x002200, "Wrong size on UConfig_104991");
static_assert(offsetof(UConfig_104991, DashToTargetInfo) == 0x001328, "Member 'UConfig_104991::DashToTargetInfo' has a wrong offset!");
static_assert(offsetof(UConfig_104991, DashDurationBuffID) == 0x001E98, "Member 'UConfig_104991::DashDurationBuffID' has a wrong offset!");
static_assert(offsetof(UConfig_104991, BlockAbilityTagsWhenFlying) == 0x001EA0, "Member 'UConfig_104991::BlockAbilityTagsWhenFlying' has a wrong offset!");
static_assert(offsetof(UConfig_104991, bBindCameraToRidingCharacter) == 0x001F08, "Member 'UConfig_104991::bBindCameraToRidingCharacter' has a wrong offset!");
static_assert(offsetof(UConfig_104991, BlockAbilityTagsWhenRiding) == 0x001F10, "Member 'UConfig_104991::BlockAbilityTagsWhenRiding' has a wrong offset!");
static_assert(offsetof(UConfig_104991, SocketNameMap) == 0x001F78, "Member 'UConfig_104991::SocketNameMap' has a wrong offset!");
static_assert(offsetof(UConfig_104991, TargetDetachTagContainer) == 0x001FC8, "Member 'UConfig_104991::TargetDetachTagContainer' has a wrong offset!");
static_assert(offsetof(UConfig_104991, WolverineDetachTagContainer) == 0x002030, "Member 'UConfig_104991::WolverineDetachTagContainer' has a wrong offset!");
static_assert(offsetof(UConfig_104991, RidingCameraInterp) == 0x002098, "Member 'UConfig_104991::RidingCameraInterp' has a wrong offset!");
static_assert(offsetof(UConfig_104991, bExitRideWhenWolverineTakeDamage) == 0x0020A0, "Member 'UConfig_104991::bExitRideWhenWolverineTakeDamage' has a wrong offset!");
static_assert(offsetof(UConfig_104991, SameBuffSet) == 0x0020A8, "Member 'UConfig_104991::SameBuffSet' has a wrong offset!");
static_assert(offsetof(UConfig_104991, RemoveEffectWithTagsWhileAttach) == 0x0020F8, "Member 'UConfig_104991::RemoveEffectWithTagsWhileAttach' has a wrong offset!");
static_assert(offsetof(UConfig_104991, AttachCylinderOffset) == 0x002160, "Member 'UConfig_104991::AttachCylinderOffset' has a wrong offset!");
static_assert(offsetof(UConfig_104991, AttachMeshOffset) == 0x002178, "Member 'UConfig_104991::AttachMeshOffset' has a wrong offset!");
static_assert(offsetof(UConfig_104991, DetachCameraBlendTime) == 0x002190, "Member 'UConfig_104991::DetachCameraBlendTime' has a wrong offset!");
static_assert(offsetof(UConfig_104991, ThrowAbilityTagContainer) == 0x002198, "Member 'UConfig_104991::ThrowAbilityTagContainer' has a wrong offset!");

// Class Hero_1049.Ability_104991
// 0x0178 (0x2CC0 - 0x2B48)
class UAbility_104991 : public UAbility_100015
{
public:
	struct FGameplayTag                           MarkOnHulkTag;                                     // 0x2B48(0x000C)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B54[0x4];                                     // 0x2B54(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnWolverineSynergyStateChangeDispatcher;           // 0x2B58(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	EWolverineSynergyState                        CurrentState;                                      // 0x2B68(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B69[0x7];                                     // 0x2B69(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelBaseCharacter*                   Hulk;                                              // 0x2B70(0x0008)(BlueprintVisible, Net, ZeroConstructor, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B78[0x90];                                    // 0x2B78(0x0090)(Fixing Size After Last Property [ Dumper-7 ])
	class AWolverineChildActor*                   WolverineChildActor;                               // 0x2C08(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UConfig_104991*                         RideConfig;                                        // 0x2C10(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FPredictionKey                         DashKey;                                           // 0x2C18(0x00A0)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasBeenThrowed;                                   // 0x2CB8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2CB9[0x7];                                     // 0x2CB9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BindCameraToRideCharacter(class AMarvelBaseCharacter* RideCharacter, bool bBind);
	void BindDettachDelegates(class AActor* InHulk);
	void MarkOnHulk(bool bOnGroot);
	void OnHulkDeath(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnHulkRepToSimulatedRole();
	void OnHulkTagUpdated(const struct FGameplayTag& TagUpdated, bool bTagExists);
	void OnRep_CurrentState();
	void OnRep_Hulk();
	void OnWolverineDeath(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnWolverineTagUpdated(const struct FGameplayTag& TagUpdated, bool bTagExists);
	void OnWolverineTakeDamage(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void Python_AttachToHulk();
	void Python_DetachFromHulk();
	void Python_FailedFlyingToHulk();
	void Python_StartFlyingToHulk();
	void SetSpringArmIgnore(class AMarvelBaseCharacter* InHulk, class AMarvelBaseCharacter* OwnChar, bool bIgnore);
	void SetSynergyState(EWolverineSynergyState InState);
	void UnBindDettachDelegates(class AActor* InHulk);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_104991">();
	}
	static class UAbility_104991* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_104991>();
	}
};
static_assert(alignof(UAbility_104991) == 0x000008, "Wrong alignment on UAbility_104991");
static_assert(sizeof(UAbility_104991) == 0x002CC0, "Wrong size on UAbility_104991");
static_assert(offsetof(UAbility_104991, MarkOnHulkTag) == 0x002B48, "Member 'UAbility_104991::MarkOnHulkTag' has a wrong offset!");
static_assert(offsetof(UAbility_104991, OnWolverineSynergyStateChangeDispatcher) == 0x002B58, "Member 'UAbility_104991::OnWolverineSynergyStateChangeDispatcher' has a wrong offset!");
static_assert(offsetof(UAbility_104991, CurrentState) == 0x002B68, "Member 'UAbility_104991::CurrentState' has a wrong offset!");
static_assert(offsetof(UAbility_104991, Hulk) == 0x002B70, "Member 'UAbility_104991::Hulk' has a wrong offset!");
static_assert(offsetof(UAbility_104991, WolverineChildActor) == 0x002C08, "Member 'UAbility_104991::WolverineChildActor' has a wrong offset!");
static_assert(offsetof(UAbility_104991, RideConfig) == 0x002C10, "Member 'UAbility_104991::RideConfig' has a wrong offset!");
static_assert(offsetof(UAbility_104991, DashKey) == 0x002C18, "Member 'UAbility_104991::DashKey' has a wrong offset!");
static_assert(offsetof(UAbility_104991, bHasBeenThrowed) == 0x002CB8, "Member 'UAbility_104991::bHasBeenThrowed' has a wrong offset!");

// Class Hero_1049.Cue_Ability_Loop_10499101
// 0x00F0 (0x0EF0 - 0x0E00)
class ACue_Ability_Loop_10499101 : public AMarvelCueNotify_Ability
{
public:
	float                                         StopRideSoundID;                                   // 0x0E00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E04[0x4];                                      // 0x0E04(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         NS_AttachInstantFX;                                // 0x0E08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         NS_AttachInstantFX_Horizontal;                     // 0x0E10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               AttachInstantFX_Horizontal_Rotator;                // 0x0E18(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   AttachInstantFXSocket;                             // 0x0E30(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E3C[0x4];                                      // 0x0E3C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelBaseCharacter*                   OwningCharacter;                                   // 0x0E40(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAbility_104991*                        CoopAbility;                                       // 0x0E48(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCameraInterp*                          RidingCameraInterp;                                // 0x0E50(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class AActor*, struct FSpringArmControlHandler> SpringArmHandlers;                                 // 0x0E58(0x0050)(Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_EA8[0x18];                                     // 0x0EA8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnSynergyFlyDispatcher;                            // 0x0EC0(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnSynergyAttachDispatcher;                         // 0x0ED0(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnSynergyDetachDispatcher;                         // 0x0EE0(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void OnCoopStateChange(EWolverineSynergyState InState);
	void PlayAttachInstantFX();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Ability_Loop_10499101">();
	}
	static class ACue_Ability_Loop_10499101* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Ability_Loop_10499101>();
	}
};
static_assert(alignof(ACue_Ability_Loop_10499101) == 0x000008, "Wrong alignment on ACue_Ability_Loop_10499101");
static_assert(sizeof(ACue_Ability_Loop_10499101) == 0x000EF0, "Wrong size on ACue_Ability_Loop_10499101");
static_assert(offsetof(ACue_Ability_Loop_10499101, StopRideSoundID) == 0x000E00, "Member 'ACue_Ability_Loop_10499101::StopRideSoundID' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10499101, NS_AttachInstantFX) == 0x000E08, "Member 'ACue_Ability_Loop_10499101::NS_AttachInstantFX' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10499101, NS_AttachInstantFX_Horizontal) == 0x000E10, "Member 'ACue_Ability_Loop_10499101::NS_AttachInstantFX_Horizontal' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10499101, AttachInstantFX_Horizontal_Rotator) == 0x000E18, "Member 'ACue_Ability_Loop_10499101::AttachInstantFX_Horizontal_Rotator' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10499101, AttachInstantFXSocket) == 0x000E30, "Member 'ACue_Ability_Loop_10499101::AttachInstantFXSocket' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10499101, OwningCharacter) == 0x000E40, "Member 'ACue_Ability_Loop_10499101::OwningCharacter' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10499101, CoopAbility) == 0x000E48, "Member 'ACue_Ability_Loop_10499101::CoopAbility' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10499101, RidingCameraInterp) == 0x000E50, "Member 'ACue_Ability_Loop_10499101::RidingCameraInterp' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10499101, SpringArmHandlers) == 0x000E58, "Member 'ACue_Ability_Loop_10499101::SpringArmHandlers' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10499101, OnSynergyFlyDispatcher) == 0x000EC0, "Member 'ACue_Ability_Loop_10499101::OnSynergyFlyDispatcher' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10499101, OnSynergyAttachDispatcher) == 0x000ED0, "Member 'ACue_Ability_Loop_10499101::OnSynergyAttachDispatcher' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10499101, OnSynergyDetachDispatcher) == 0x000EE0, "Member 'ACue_Ability_Loop_10499101::OnSynergyDetachDispatcher' has a wrong offset!");

// Class Hero_1049.MarvelDrainLifeEffectAbility
// 0x03A0 (0x1488 - 0x10E8)
class UMarvelDrainLifeEffectAbility final : public UMarvelEffectGameplayAbility
{
public:
	struct FMarvelTraceRule                       DrainLifeTraceRule;                                // 0x10E8(0x0390)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         DrainLifeRatio;                                    // 0x1478(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_147C[0x4];                                     // 0x147C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelBaseAbilitySystemComponent*      OwningASC;                                         // 0x1480(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnOwnerApplyDamage(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelDrainLifeEffectAbility">();
	}
	static class UMarvelDrainLifeEffectAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelDrainLifeEffectAbility>();
	}
};
static_assert(alignof(UMarvelDrainLifeEffectAbility) == 0x000008, "Wrong alignment on UMarvelDrainLifeEffectAbility");
static_assert(sizeof(UMarvelDrainLifeEffectAbility) == 0x001488, "Wrong size on UMarvelDrainLifeEffectAbility");
static_assert(offsetof(UMarvelDrainLifeEffectAbility, DrainLifeTraceRule) == 0x0010E8, "Member 'UMarvelDrainLifeEffectAbility::DrainLifeTraceRule' has a wrong offset!");
static_assert(offsetof(UMarvelDrainLifeEffectAbility, DrainLifeRatio) == 0x001478, "Member 'UMarvelDrainLifeEffectAbility::DrainLifeRatio' has a wrong offset!");
static_assert(offsetof(UMarvelDrainLifeEffectAbility, OwningASC) == 0x001480, "Member 'UMarvelDrainLifeEffectAbility::OwningASC' has a wrong offset!");

// Class Hero_1049.WolverineAnimInstance
// 0x02E0 (0x0BE0 - 0x0900)
class UWolverineAnimInstance final : public UMarvelAnimInstance
{
public:
	float                                         DelayExitShiftBlendTime;                           // 0x0900(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnterMouseRight;                                  // 0x0904(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bExitMouseRight;                                   // 0x0905(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bMouseRightForceToGroundMotion;                    // 0x0906(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_907[0x1];                                      // 0x0907(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentPitchAngle;                                 // 0x0908(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnterShift;                                       // 0x090C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bExitShift;                                        // 0x090D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShiftToNormal;                                    // 0x090E(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShiftEndBlendUpperBody;                           // 0x090F(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShiftForceToGroundMotion;                         // 0x0910(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bInSynergyRideState;                               // 0x0911(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_912[0x2];                                      // 0x0912(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SynergyRidePosition;                               // 0x0914(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHulkRunning;                                      // 0x0918(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHulkGatheringToThrow;                             // 0x0919(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_91A[0x6];                                      // 0x091A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FWolverineSynergyRideAnimationData> SynergyAnimationDataMap;                           // 0x0920(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TMap<int32, float>                            SynergyAnimationRatioMap;                          // 0x0970(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TMap<int32, struct FWolverineSynergyAnimationRatioSpeedUpInfo> SynergyAnimationRatioAnimationMap;                 // 0x09C0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FWolverineSynergyRideAnimBlendData     SynergyRideLoopAnimBlendData;                      // 0x0A10(0x0038)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FWolverineSynergyRideAnimBlendData     SynergyRideGatherAnimBlendData;                    // 0x0A48(0x0038)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_A80[0x38];                                     // 0x0A80(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWolverineSynergyRideAnimBlendData     SynergyRideLoopAnimBlendData_TS;                   // 0x0AB8(0x0038)(Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FWolverineSynergyRideAnimBlendData     SynergyRideGatherAnimBlendData_TS;                 // 0x0AF0(0x0038)(Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_B28[0xB8];                                     // 0x0B28(0x00B8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnMouseRightStateChanged(ERushState_104951 CurrentState);
	void OnShiftStateChanged(int32 InState);
	void OnTagUpdated(const struct FGameplayTag& TagUpdated, bool TagExists);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WolverineAnimInstance">();
	}
	static class UWolverineAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWolverineAnimInstance>();
	}
};
static_assert(alignof(UWolverineAnimInstance) == 0x000010, "Wrong alignment on UWolverineAnimInstance");
static_assert(sizeof(UWolverineAnimInstance) == 0x000BE0, "Wrong size on UWolverineAnimInstance");
static_assert(offsetof(UWolverineAnimInstance, DelayExitShiftBlendTime) == 0x000900, "Member 'UWolverineAnimInstance::DelayExitShiftBlendTime' has a wrong offset!");
static_assert(offsetof(UWolverineAnimInstance, bEnterMouseRight) == 0x000904, "Member 'UWolverineAnimInstance::bEnterMouseRight' has a wrong offset!");
static_assert(offsetof(UWolverineAnimInstance, bExitMouseRight) == 0x000905, "Member 'UWolverineAnimInstance::bExitMouseRight' has a wrong offset!");
static_assert(offsetof(UWolverineAnimInstance, bMouseRightForceToGroundMotion) == 0x000906, "Member 'UWolverineAnimInstance::bMouseRightForceToGroundMotion' has a wrong offset!");
static_assert(offsetof(UWolverineAnimInstance, CurrentPitchAngle) == 0x000908, "Member 'UWolverineAnimInstance::CurrentPitchAngle' has a wrong offset!");
static_assert(offsetof(UWolverineAnimInstance, bEnterShift) == 0x00090C, "Member 'UWolverineAnimInstance::bEnterShift' has a wrong offset!");
static_assert(offsetof(UWolverineAnimInstance, bExitShift) == 0x00090D, "Member 'UWolverineAnimInstance::bExitShift' has a wrong offset!");
static_assert(offsetof(UWolverineAnimInstance, bShiftToNormal) == 0x00090E, "Member 'UWolverineAnimInstance::bShiftToNormal' has a wrong offset!");
static_assert(offsetof(UWolverineAnimInstance, bShiftEndBlendUpperBody) == 0x00090F, "Member 'UWolverineAnimInstance::bShiftEndBlendUpperBody' has a wrong offset!");
static_assert(offsetof(UWolverineAnimInstance, bShiftForceToGroundMotion) == 0x000910, "Member 'UWolverineAnimInstance::bShiftForceToGroundMotion' has a wrong offset!");
static_assert(offsetof(UWolverineAnimInstance, bInSynergyRideState) == 0x000911, "Member 'UWolverineAnimInstance::bInSynergyRideState' has a wrong offset!");
static_assert(offsetof(UWolverineAnimInstance, SynergyRidePosition) == 0x000914, "Member 'UWolverineAnimInstance::SynergyRidePosition' has a wrong offset!");
static_assert(offsetof(UWolverineAnimInstance, bHulkRunning) == 0x000918, "Member 'UWolverineAnimInstance::bHulkRunning' has a wrong offset!");
static_assert(offsetof(UWolverineAnimInstance, bHulkGatheringToThrow) == 0x000919, "Member 'UWolverineAnimInstance::bHulkGatheringToThrow' has a wrong offset!");
static_assert(offsetof(UWolverineAnimInstance, SynergyAnimationDataMap) == 0x000920, "Member 'UWolverineAnimInstance::SynergyAnimationDataMap' has a wrong offset!");
static_assert(offsetof(UWolverineAnimInstance, SynergyAnimationRatioMap) == 0x000970, "Member 'UWolverineAnimInstance::SynergyAnimationRatioMap' has a wrong offset!");
static_assert(offsetof(UWolverineAnimInstance, SynergyAnimationRatioAnimationMap) == 0x0009C0, "Member 'UWolverineAnimInstance::SynergyAnimationRatioAnimationMap' has a wrong offset!");
static_assert(offsetof(UWolverineAnimInstance, SynergyRideLoopAnimBlendData) == 0x000A10, "Member 'UWolverineAnimInstance::SynergyRideLoopAnimBlendData' has a wrong offset!");
static_assert(offsetof(UWolverineAnimInstance, SynergyRideGatherAnimBlendData) == 0x000A48, "Member 'UWolverineAnimInstance::SynergyRideGatherAnimBlendData' has a wrong offset!");
static_assert(offsetof(UWolverineAnimInstance, SynergyRideLoopAnimBlendData_TS) == 0x000AB8, "Member 'UWolverineAnimInstance::SynergyRideLoopAnimBlendData_TS' has a wrong offset!");
static_assert(offsetof(UWolverineAnimInstance, SynergyRideGatherAnimBlendData_TS) == 0x000AF0, "Member 'UWolverineAnimInstance::SynergyRideGatherAnimBlendData_TS' has a wrong offset!");

// Class Hero_1049.WolverineCharacter
// 0x0060 (0x1820 - 0x17C0)
class AWolverineCharacter : public AMarvelBaseCharacter
{
public:
	class URideOnCharacterManagementComponent*    SynergyRideManagementComponent;                    // 0x17B8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnStateChangeDelegate;                             // 0x17C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bHoldingForResurrectAbility;                       // 0x17D0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17D1[0x7];                                     // 0x17D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWolverineMoveLogicBaseComponent*       WolverineMoveLogic;                                // 0x17D8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTimerHandle                           DelayActivateTimerHandle;                          // 0x17E0(0x0018)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           AngerValueType;                                    // 0x17F8(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1804[0x4];                                     // 0x1804(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             WolverineParticipateInKillEventDispatcher;         // 0x1808(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1818[0x8];                                     // 0x1818(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CanResurrectSelfExternal(bool* Result);
	void DispatchWolverineParticipateKillEvent();

	float GetWolverineAngerCurrent() const;
	float GetWolverineAngerFull() const;
	bool IsWolverineAngerFull() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WolverineCharacter">();
	}
	static class AWolverineCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWolverineCharacter>();
	}
};
static_assert(alignof(AWolverineCharacter) == 0x000010, "Wrong alignment on AWolverineCharacter");
static_assert(sizeof(AWolverineCharacter) == 0x001820, "Wrong size on AWolverineCharacter");
static_assert(offsetof(AWolverineCharacter, SynergyRideManagementComponent) == 0x0017B8, "Member 'AWolverineCharacter::SynergyRideManagementComponent' has a wrong offset!");
static_assert(offsetof(AWolverineCharacter, OnStateChangeDelegate) == 0x0017C0, "Member 'AWolverineCharacter::OnStateChangeDelegate' has a wrong offset!");
static_assert(offsetof(AWolverineCharacter, bHoldingForResurrectAbility) == 0x0017D0, "Member 'AWolverineCharacter::bHoldingForResurrectAbility' has a wrong offset!");
static_assert(offsetof(AWolverineCharacter, WolverineMoveLogic) == 0x0017D8, "Member 'AWolverineCharacter::WolverineMoveLogic' has a wrong offset!");
static_assert(offsetof(AWolverineCharacter, DelayActivateTimerHandle) == 0x0017E0, "Member 'AWolverineCharacter::DelayActivateTimerHandle' has a wrong offset!");
static_assert(offsetof(AWolverineCharacter, AngerValueType) == 0x0017F8, "Member 'AWolverineCharacter::AngerValueType' has a wrong offset!");
static_assert(offsetof(AWolverineCharacter, WolverineParticipateInKillEventDispatcher) == 0x001808, "Member 'AWolverineCharacter::WolverineParticipateInKillEventDispatcher' has a wrong offset!");

// Class Hero_1049.WolverineChildActor
// 0x0110 (0x0B50 - 0x0A40)
class AWolverineChildActor final : public AMarvelCharacterChildActor
{
public:
	struct FPortableMaterialSlotName              MaxAngerHairSlotName;                              // 0x0A40(0x0018)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ShowMaxAngerHairTag;                               // 0x0A58(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A64[0x4];                                      // 0x0A64(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class UCurveFloat*>         ShowHairCurveMap;                                  // 0x0A68(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FName, class UCurveFloat*>         HideHairCurveMap;                                  // 0x0AB8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         NS_ShowFireHair;                                   // 0x0B08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HideHariTime;                                      // 0x0B10(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccumulateHairTime;                                // 0x0B14(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowFireHair;                                     // 0x0B18(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B19[0x7];                                      // 0x0B19(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      FireHairNiagara;                                   // 0x0B20(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B28[0x18];                                     // 0x0B28(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class AWolverineCharacter*                    WolverineOwner;                                    // 0x0B40(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsHairMaterialShowed;                             // 0x0B48(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B49[0x7];                                      // 0x0B49(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnHairTagUpdated(const struct FGameplayTag& InTag, bool bInExist);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WolverineChildActor">();
	}
	static class AWolverineChildActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWolverineChildActor>();
	}
};
static_assert(alignof(AWolverineChildActor) == 0x000008, "Wrong alignment on AWolverineChildActor");
static_assert(sizeof(AWolverineChildActor) == 0x000B50, "Wrong size on AWolverineChildActor");
static_assert(offsetof(AWolverineChildActor, MaxAngerHairSlotName) == 0x000A40, "Member 'AWolverineChildActor::MaxAngerHairSlotName' has a wrong offset!");
static_assert(offsetof(AWolverineChildActor, ShowMaxAngerHairTag) == 0x000A58, "Member 'AWolverineChildActor::ShowMaxAngerHairTag' has a wrong offset!");
static_assert(offsetof(AWolverineChildActor, ShowHairCurveMap) == 0x000A68, "Member 'AWolverineChildActor::ShowHairCurveMap' has a wrong offset!");
static_assert(offsetof(AWolverineChildActor, HideHairCurveMap) == 0x000AB8, "Member 'AWolverineChildActor::HideHairCurveMap' has a wrong offset!");
static_assert(offsetof(AWolverineChildActor, NS_ShowFireHair) == 0x000B08, "Member 'AWolverineChildActor::NS_ShowFireHair' has a wrong offset!");
static_assert(offsetof(AWolverineChildActor, HideHariTime) == 0x000B10, "Member 'AWolverineChildActor::HideHariTime' has a wrong offset!");
static_assert(offsetof(AWolverineChildActor, AccumulateHairTime) == 0x000B14, "Member 'AWolverineChildActor::AccumulateHairTime' has a wrong offset!");
static_assert(offsetof(AWolverineChildActor, bShowFireHair) == 0x000B18, "Member 'AWolverineChildActor::bShowFireHair' has a wrong offset!");
static_assert(offsetof(AWolverineChildActor, FireHairNiagara) == 0x000B20, "Member 'AWolverineChildActor::FireHairNiagara' has a wrong offset!");
static_assert(offsetof(AWolverineChildActor, WolverineOwner) == 0x000B40, "Member 'AWolverineChildActor::WolverineOwner' has a wrong offset!");
static_assert(offsetof(AWolverineChildActor, bIsHairMaterialShowed) == 0x000B48, "Member 'AWolverineChildActor::bIsHairMaterialShowed' has a wrong offset!");

// Class Hero_1049.WolverineMoveLogicBaseComponent
// 0x0000 (0x03F0 - 0x03F0)
class UWolverineMoveLogicBaseComponent final : public UMarvelMoveLogicBaseComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WolverineMoveLogicBaseComponent">();
	}
	static class UWolverineMoveLogicBaseComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWolverineMoveLogicBaseComponent>();
	}
};
static_assert(alignof(UWolverineMoveLogicBaseComponent) == 0x000008, "Wrong alignment on UWolverineMoveLogicBaseComponent");
static_assert(sizeof(UWolverineMoveLogicBaseComponent) == 0x0003F0, "Wrong size on UWolverineMoveLogicBaseComponent");

// Class Hero_1049.WolverineMovementComponent
// 0x0010 (0x1B00 - 0x1AF0)
class UWolverineMovementComponent final : public UMarvelCharacterMovementComponent
{
public:
	bool                                          bBlendAccelerationByCameraDir;                     // 0x1AF0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1AF1[0x3];                                     // 0x1AF1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendFactor;                                       // 0x1AF4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AMarvelBaseCharacter*                   WolverineCharacter;                                // 0x1AF8(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetBlendAccelerationByCameraDirection(bool bBlend, float InBlendFactor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WolverineMovementComponent">();
	}
	static class UWolverineMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWolverineMovementComponent>();
	}
};
static_assert(alignof(UWolverineMovementComponent) == 0x000010, "Wrong alignment on UWolverineMovementComponent");
static_assert(sizeof(UWolverineMovementComponent) == 0x001B00, "Wrong size on UWolverineMovementComponent");
static_assert(offsetof(UWolverineMovementComponent, bBlendAccelerationByCameraDir) == 0x001AF0, "Member 'UWolverineMovementComponent::bBlendAccelerationByCameraDir' has a wrong offset!");
static_assert(offsetof(UWolverineMovementComponent, BlendFactor) == 0x001AF4, "Member 'UWolverineMovementComponent::BlendFactor' has a wrong offset!");
static_assert(offsetof(UWolverineMovementComponent, WolverineCharacter) == 0x001AF8, "Member 'UWolverineMovementComponent::WolverineCharacter' has a wrong offset!");

}

