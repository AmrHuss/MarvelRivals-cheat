#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PyAbility_200401

#include "Basic.hpp"

#include "Marvel_structs.hpp"
#include "Marvel_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "MarvelLevel_classes.hpp"


namespace SDK
{

// PythonClass PyAbility_200401.PyConfig_200401
// 0x0030 (0x10D0 - 0x10A0)
class UPyConfig_200401 final : public UConfig_AeroBase
{
public:
	uint8                                         Pad_1098[0x8];                                     // 0x1098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AscendModeID;                                      // 0x10A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStateChangedTaskParam                 CustomActiveUserSetting;                           // 0x10A4(0x0028)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MinFlyTime;                                        // 0x10CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyConfig_200401">();
	}
	static class UPyConfig_200401* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyConfig_200401>();
	}
};
static_assert(alignof(UPyConfig_200401) == 0x000010, "Wrong alignment on UPyConfig_200401");
static_assert(sizeof(UPyConfig_200401) == 0x0010D0, "Wrong size on UPyConfig_200401");
static_assert(offsetof(UPyConfig_200401, AscendModeID) == 0x0010A0, "Member 'UPyConfig_200401::AscendModeID' has a wrong offset!");
static_assert(offsetof(UPyConfig_200401, CustomActiveUserSetting) == 0x0010A4, "Member 'UPyConfig_200401::CustomActiveUserSetting' has a wrong offset!");
static_assert(offsetof(UPyConfig_200401, MinFlyTime) == 0x0010CC, "Member 'UPyConfig_200401::MinFlyTime' has a wrong offset!");

// PythonClass PyAbility_200401.PyAbility_200401
// 0x00C0 (0x5B50 - 0x5A90)
class UPyAbility_200401 : public UAbility_200401
{
public:
	struct FGameplayTagQuery                      BlockAbilityQuery;                                 // 0x5A90(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  SpecialBlockAbilityTags;                           // 0x5AD8(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarvelGameplayEffectTemplate> GravityZoneEfectTemplate;                          // 0x5B40(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void K2_ActivateAbility();
	void K2_OnEndAbility(bool bWasCancelled);
	void OnAbilityActivate(int32 AbilityID);
	void ServerStartFly();
	void ServerStopFly();
	struct FVector GetFinalInputDirection(float DeltaTime, bool bIsFloat);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyAbility_200401">();
	}
	static class UPyAbility_200401* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyAbility_200401>();
	}
};
static_assert(alignof(UPyAbility_200401) == 0x000010, "Wrong alignment on UPyAbility_200401");
static_assert(sizeof(UPyAbility_200401) == 0x005B50, "Wrong size on UPyAbility_200401");
static_assert(offsetof(UPyAbility_200401, BlockAbilityQuery) == 0x005A90, "Member 'UPyAbility_200401::BlockAbilityQuery' has a wrong offset!");
static_assert(offsetof(UPyAbility_200401, SpecialBlockAbilityTags) == 0x005AD8, "Member 'UPyAbility_200401::SpecialBlockAbilityTags' has a wrong offset!");
static_assert(offsetof(UPyAbility_200401, GravityZoneEfectTemplate) == 0x005B40, "Member 'UPyAbility_200401::GravityZoneEfectTemplate' has a wrong offset!");

}

