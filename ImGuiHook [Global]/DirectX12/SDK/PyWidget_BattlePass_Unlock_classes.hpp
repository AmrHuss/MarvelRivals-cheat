#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PyWidget_BattlePass_Unlock

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "PyWidget_Common_Button_classes.hpp"
#include "PyWidget_ModuleMainPanel_classes.hpp"
#include "PyWidget_BattlePass_Unlock_structs.hpp"


namespace SDK
{

// PythonClass PyWidget_BattlePass_Unlock.PyWidget_BattlePass_RewardItemData
// 0x0000 (0x0030 - 0x0030)
class UPyWidget_BattlePass_RewardItemData final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyWidget_BattlePass_RewardItemData">();
	}
	static class UPyWidget_BattlePass_RewardItemData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyWidget_BattlePass_RewardItemData>();
	}
};
static_assert(alignof(UPyWidget_BattlePass_RewardItemData) == 0x000008, "Wrong alignment on UPyWidget_BattlePass_RewardItemData");
static_assert(sizeof(UPyWidget_BattlePass_RewardItemData) == 0x000030, "Wrong size on UPyWidget_BattlePass_RewardItemData");

// PythonClass PyWidget_BattlePass_Unlock.PyWidget_BattlePass_RewardItem
// 0x0000 (0x08E0 - 0x08E0)
#pragma pack(push, 0x1)
class alignas(0x10) UPyWidget_BattlePass_RewardItem : public UPyWidget_BaseCommonButton
{
public:
	void Destruct();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyWidget_BattlePass_RewardItem">();
	}
	static class UPyWidget_BattlePass_RewardItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyWidget_BattlePass_RewardItem>();
	}
};
#pragma pack(pop)
static_assert(alignof(UPyWidget_BattlePass_RewardItem) == 0x000010, "Wrong alignment on UPyWidget_BattlePass_RewardItem");
static_assert(sizeof(UPyWidget_BattlePass_RewardItem) == 0x0008E0, "Wrong size on UPyWidget_BattlePass_RewardItem");

// PythonClass PyWidget_BattlePass_Unlock.PyWidget_BattlePass_Unlock
// 0x0040 (0x0650 - 0x0610)
class UPyWidget_BattlePass_Unlock : public UPyWidget_ModuleMainPanel
{
public:
	uint8                                         Pad_609[0x7];                                      // 0x0609(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPyWidget_BattlePass_RewardItemStruct> Normal_Reward;                                     // 0x0610(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FPyWidget_BattlePass_RewardItemStruct> Advance_Reward;                                    // 0x0620(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FPyWidget_BattlePass_RewardItemStruct> Free_To_Advance_Reward;                            // 0x0630(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         Reward_Delay_Time;                                 // 0x0640(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Normal_To_Advance_Text_Delay_Time;                 // 0x0644(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AkEvent_Upgrade;                                   // 0x0648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnInitialized();
	void OnBecomeTop();
	void OnBecomeNoneTop();
	void Construct();
	void Destruct();
	void Trigger_show_reward_list();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyWidget_BattlePass_Unlock">();
	}
	static class UPyWidget_BattlePass_Unlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyWidget_BattlePass_Unlock>();
	}
};
static_assert(alignof(UPyWidget_BattlePass_Unlock) == 0x000008, "Wrong alignment on UPyWidget_BattlePass_Unlock");
static_assert(sizeof(UPyWidget_BattlePass_Unlock) == 0x000650, "Wrong size on UPyWidget_BattlePass_Unlock");
static_assert(offsetof(UPyWidget_BattlePass_Unlock, Normal_Reward) == 0x000610, "Member 'UPyWidget_BattlePass_Unlock::Normal_Reward' has a wrong offset!");
static_assert(offsetof(UPyWidget_BattlePass_Unlock, Advance_Reward) == 0x000620, "Member 'UPyWidget_BattlePass_Unlock::Advance_Reward' has a wrong offset!");
static_assert(offsetof(UPyWidget_BattlePass_Unlock, Free_To_Advance_Reward) == 0x000630, "Member 'UPyWidget_BattlePass_Unlock::Free_To_Advance_Reward' has a wrong offset!");
static_assert(offsetof(UPyWidget_BattlePass_Unlock, Reward_Delay_Time) == 0x000640, "Member 'UPyWidget_BattlePass_Unlock::Reward_Delay_Time' has a wrong offset!");
static_assert(offsetof(UPyWidget_BattlePass_Unlock, Normal_To_Advance_Text_Delay_Time) == 0x000644, "Member 'UPyWidget_BattlePass_Unlock::Normal_To_Advance_Text_Delay_Time' has a wrong offset!");
static_assert(offsetof(UPyWidget_BattlePass_Unlock, AkEvent_Upgrade) == 0x000648, "Member 'UPyWidget_BattlePass_Unlock::AkEvent_Upgrade' has a wrong offset!");

}

